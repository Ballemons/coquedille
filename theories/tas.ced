module tas.
data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

add : Π n : nat . Π m : nat . nat = λ n : nat . λ m : nat . μ add. n @(λ n : nat . Π m : nat . nat) {
  | O ➔ λ _ . m
  | S p ➔ λ _ . S (add p m)
 } m.

nat_ind : ∀ P : Π n : nat . ★ . Π f : P O . Π f' : Π n : nat . P n ➔ P (S n) . Π n : nat . P n = Λ P : Π n : nat . ★ . λ f : P O . λ f' : Π n : nat . P n ➔ P (S n) . λ n : nat . μ F. n @(λ n : nat . P n) {
  | O ➔ f
  | S n' ➔ f' (to/nat -isType/F n') (F n')
 }.

data ex (A : ★) (P : A ➔ ★) : ★ =
  | ex_intro : Π x : A . P x ➔ ex.

ex_ind : ∀ A : ★ . ∀ P : A ➔ ★ . ∀ P' : ★ . Π f : Π x : A . P x ➔ P' . Π e : ex ·A ·P . P' = Λ A : ★ . Λ P : A ➔ ★ . Λ P' : ★ . λ f : Π x : A . P x ➔ P' . λ e : ex ·A ·P . σ e @(λ _ : ex ·A ·P . P') {
  | ex_intro x' p ➔ f x' p
 }.



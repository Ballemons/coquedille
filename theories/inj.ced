module inj.


data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

f_equal : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π x : A . Π y : A . eq ·A x y ➔ eq ·B (f x) (f y) = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ x : A . λ y : A . λ H : eq ·A x y . μ' H @(λ y' : A . λ _ : eq ·A x y' . eq ·B (f x) (f y')) {
  | eq_refl  ➔ eq_refl ·B (f x)
 }.

eq_ind : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . Π f : P x . Π y : A . Π e : eq ·A x y . P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ f : P x . λ y : A . λ e : eq ·A x y . μ' e @(λ y' : A . λ _ : eq ·A x y' . P y') {
  | eq_refl  ➔ f
 }.

eq_sym : ∀ A : ★ . Π x : A . Π y : A . eq ·A x y ➔ eq ·A y x = Λ A : ★ . λ x : A . λ y : A . λ H : eq ·A x y . μ' H @(λ y' : A . λ _ : eq ·A x y' . eq ·A y' x) {
  | eq_refl  ➔ eq_refl ·A x
 }.

eq_ind_r : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . P x ➔ Π y : A . eq ·A y x ➔ P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ H : P x . λ y : A . λ H0 : eq ·A y x . eq_ind ·A x ·(λ y' : A . P y') H y (eq_sym ·A y x H0).

cons_inj : ∀ A : ★ . Π z : A . Π y : A . eq ·(list ·A) (cons ·A z (nil ·A)) (cons ·A y (nil ·A)) ➔ eq ·A z y
         = Λ A : ★ . λ z : A . λ y : A . λ H : eq ·(list ·A) (cons ·A z (nil ·A)) (cons ·A y (nil ·A)) .
         [ H0 : eq ·(list ·A) (cons ·A y (nil ·A)) (cons ·A y (nil ·A)) ➔ eq ·A z y
              = μ' H @(λ y' : list ·A . λ _ : eq ·(list ·A) (cons ·A z (nil ·A)) y' . eq ·(list ·A) y' (cons ·A y (nil ·A)) ➔ eq ·A z y) {
                    | eq_refl  ➔ λ H0 : eq ·(list ·A) (cons ·A z (nil ·A)) (cons ·A y (nil ·A)) .
                                 (λ H0' : eq ·(list ·A) (cons ·A z (nil ·A)) (cons ·A y (nil ·A)) .
                                 [ H1 : eq ·A z y
                                      = f_equal ·(list ·A) ·A (λ e : list ·A . μ' e @(λ l : list ·A . A) {
                                      | nil  ➔ z
                                      | cons a l ➔ a
                                      })
                                      (cons ·A z (nil ·A))
                                      (cons ·A y (nil ·A)) H0']
                                 - (λ H1' : eq ·A z y .
                                 [ H2 : eq ·A z y = H1' ]
                                 - eq_ind_r ·A y ·(λ a : A . eq ·A a y) (eq_refl ·A y) z H2) H1) H0
                    } ]
         - H0 (eq_refl ·(list ·A) (cons ·A y (nil ·A))).

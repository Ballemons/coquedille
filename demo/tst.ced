module vnil_neq_nil.

data JMeq (A : ★) (x : A) : Π B : ★ . B ➔ ★ =
  | JMeq_refl : JMeq ·A x.

data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

data Vec (A : ★) : nat ➔ ★ =
  | vnil : Vec O
  | vcons : A ➔ Π n : nat . Vec n ➔ Vec (S n).

data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

JMeq_rect : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . P x ➔ Π y : A . JMeq ·A x ·A y ➔ P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ p : P x . λ y : A . λ H : JMeq ·A x ·A y . μ' H @(λ A1 : ★ . λ y1 : A1 . λ _ : JMeq ·A x ·A1 y1 . P y) {
  | JMeq_refl ➔ [ H : { y ≃ x } = μ' H {
  | JMeq_refl ➔ β
 } ] - ρ H - p
 }.

JMeq_sym : ∀ A : ★ . ∀ B : ★ . Π x : A . Π y : B . JMeq ·A x ·B y ➔ JMeq ·B y ·A x = Λ A : ★ . Λ B : ★ . λ x : A . λ y : B . λ H : JMeq ·A x ·B y . μ' H @(λ B' : ★ . λ x' : B' . λ _ : JMeq ·A x ·B' x' . JMeq ·B' x' ·A x) {
  | JMeq_refl  ➔ JMeq_refl ·A x
 }.

eq_ind : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . Π f : P x . Π y : A . Π e : eq ·A x y . P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ f : P x . λ y : A . λ e : eq ·A x y . μ' e @(λ y' : A . λ _ : eq ·A x y' . P y') {
  | eq_refl  ➔ f
 }.

False : ★ = ∀ X : ★ . X.

data True : ★ =
  | I : True.

False_ind : ∀ P : ★ . False ➔ P = Λ P : ★ . λ f : False . f ·P.

vector_0_nil : ∀ A : ★ . Π n : nat . Π v : Vec ·A n . eq ·nat n O ➔ JMeq ·(Vec ·A n) v ·(Vec ·A O) (vnil ·A) = Λ A : ★ . λ n : nat . λ v : Vec ·A n . μ' v @(λ n' : nat . λ v' : Vec ·A n' . eq ·nat n' O ➔ JMeq ·(Vec ·A n') v' ·(Vec ·A O) (vnil ·A)) {
  | vnil  ➔ λ H : eq ·nat O O . JMeq_refl ·(Vec ·A O) (vnil ·A)
  | vcons a n' v' ➔ λ H : eq ·nat (S n') O . δ - ( μ' H @(λ x : nat . λ _ : eq ·nat (S n') x . { S n' ≃ x }) {
  | eq_refl ➔ β
 })
 }.

case0' : ∀ A : ★ . ∀ P : Vec ·A O ➔ ★ . Π H : P (vnil ·A) . Π v : Vec ·A O . P v = Λ A : ★ . Λ P : Vec ·A O ➔ ★ . λ H : P (vnil ·A) . λ v : Vec ·A O . JMeq_rect ·(Vec ·A O) (vnil ·A) ·P H v (JMeq_sym ·(Vec ·A O) ·(Vec ·A O) v (vnil ·A) (vector_0_nil ·A O v (eq_refl ·nat O))).

eq_vnil : ∀ A : ★ . Π x : Vec ·A O . Π y : Vec ·A O . eq ·(Vec ·A O) x y = Λ A : ★ . λ x0 : Vec ·A O . λ y : Vec ·A O . case0' ·A ·(λ v : Vec ·A O . eq ·(Vec ·A O) v y) (case0' ·A ·(eq ·(Vec ·A O) (vnil ·A)) (eq_refl ·(Vec ·A O) (vnil ·A)) y) x0.

not : Π A : ★ . ★ = λ A : ★ . A ➔ False.

peq_eq : ∀ A : ★ . Π x : A . Π y : A . eq ·A x y ➔ { x ≃ y }
       = Λ A . λ x . λ y . λ eq . μ' eq { eq_refl ➔ β }.

Vector_nil_neq_List_nil : ∀ A : ★ . Π a : A . not ·(JMeq ·(Vec ·A O) (vnil ·A)
·(list ·A) (nil ·A)) = Λ A : ★ . λ a : A . λ H : JMeq ·(Vec ·A O) (vnil ·A)
·(list ·A) (nil ·A) . [ H0 : Π x : Vec ·A O . Π y : Vec ·A O . eq ·(Vec ·A O) x
y = eq_vnil ·A ] - [ H1 : JMeq ·(list ·A) (nil ·A) ·(Vec ·A O) (vnil ·A) =
JMeq_sym ·(Vec ·A O) ·(list ·A) (vnil ·A) (nil ·A) H ] - (λ H' : JMeq ·(list ·A)
(nil ·A) ·(Vec ·A O) (vnil ·A) . [ v : Vec ·A O = vnil ·A ] - [ T : ★ = Vec ·A O
] - μ' H' @(λ B : ★ . λ x : B . λ _ : JMeq ·(list ·A) (nil ·A) ·B x . Π H0' : Π
x' : B . Π y : B . eq ·B x' y . False) { | JMeq_refl ➔ λ H0' : Π x : list ·A . Π
y : list ·A . eq ·(list ·A) x y . [ H' : eq ·(list ·A) (nil ·A) (cons ·A a (nil
·A)) = H0' (nil ·A) (cons ·A a (nil ·A)) ] - δ - ( peq_eq (nil ·A) (cons ·A a (nil
·A)) H') } H0) H1.

JMeq_heq : ∀ A : ★ . ∀ B: ★ . Π x : A . Π y : B . JMeq ·A x ·B y ➔ { x ≃ y } = Λ A . Λ B . λ x . λ y . λ e . μ' e {
         | JMeq_refl ➔ β
         }.

module tst2.

data nat_ : ★ =
  | O : nat_
  | S : nat_ ➔ nat_.

data t_ (A : ★) : nat_ ➔ ★ =
  | nil : t_ O
  | cons : Π h : A . Π n : nat_ . t_ n ➔ t_ (S n).

data eq_ (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq_ x.

data JMeq_ (A : ★) (x : A) : Π B : ★ . B ➔ ★ =
  | JMeq_refl : JMeq_ ·A x.

eq_ind_ : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . Π f : P x . Π y : A . Π e : eq_ ·A x y . P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ f : P x . λ y : A . λ e : eq_ ·A x y . μ' e {
  | eq_refl  ➔ f
 }.

False_ : ★ = ∀ X : ★ . X.

data True_ : ★ =
  | I : True_.

False_ind : ∀ P : ★ . False_ ➔ P = Λ P : ★ . λ f : False_ . f ·P.

vector_0_nil_ : ∀ A : ★ . Π n : nat_ . Π v : t_ ·A n . eq_ ·nat_ n O ➔ JMeq_ ·(t_ ·A n) v ·(t_ ·A O) (nil ·A) = Λ A : ★ . λ n : nat_ . λ v : t_ ·A n . μ' v {
  | nil  ➔ λ H : eq_ ·nat_ O O . JMeq_refl ·(t_ ·A O) (nil ·A)
  | cons h n v ➔ λ H : eq_ ·nat_ (S n) O . δ - ( μ' H @(λ x : nat_ . λ _ : eq_ ·nat_ (S n) x . { S n ≃ x }) {
  | eq_refl ➔ β
 })
 }.

JMeq_heq : ∀ A : ★ . ∀ B: ★ . Π x : A . Π y : B . JMeq_ ·A x ·B y ➔ { x ≃ y } = Λ A . Λ B . λ x . λ y . λ e . μ' e {
         | JMeq_refl ➔ β
         }.

eqrefl : ∀ A : ★ . ∀ x : A . ∀ y : A . { x ≃ y } ➔ { y ≃ x } = Λ A . Λ x . Λ y . λ eq . ρ eq - β.

JMeq_rect : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . P x ➔ Π y : A . JMeq_ ·A x ·A y ➔ P y
         = Λ A . λ x . Λ P . λ p . λ y . λ j . μ' j @(λ A1 : ★ . λ y1 : A1 . λ _ : JMeq_ ·A x ·A1 y1 . P y){
         | JMeq_refl ➔ [H : { y ≃ x } = μ' j { JMeq_refl ➔ β } ] - ρ H - p
         }.

-- heq_eq : ∀ A : ★ . Π x : A . Π y : A . { x ≃ y } ➔ eq_ ·A x y = Λ A . λ x . λ y . λ eq . ρ+ eq - (eq_refl ·A x).

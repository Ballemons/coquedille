module eqthms.

data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

data t (A : ★) : nat ➔ ★ =
  | nil : t O
  | cons : Π h : A . Π n : nat . t n ➔ t (S n).

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

data JMeq (A : ★) (x : A) : Π B : ★ . B ➔ ★ =
  | JMeq_refl : JMeq ·A x.

eq_ind : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . Π f : P x . Π y : A . Π e : eq ·A x y . P y =
Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ f : P x . λ y : A . λ e : eq ·A x y . μ' e {
  | eq_refl  ➔ f
 }.

False : ★ = ∀ X : ★ . X.

data True : ★ =
  | I : True.

False_ind : ∀ P : ★ . False ➔ P = Λ P : ★ . λ f : False . f ·P.

eq_heq : ∀ A : ★ . Π x : A . Π y : A . eq ·A x y ➔ { x ≃ y } =
Λ A . λ x . λ y . λ e . μ' e {
         | eq_refl ➔ β
         }.


-- eq_false : Π n : nat . eq ·nat (S n) O ➔ False  = λ n . λ e . δ - (eq_heq (S n) O e) .

eq_false : Π n : nat . eq ·nat (S n) O ➔ False
         = λ n . λ e .
         δ - (μ' e @ (λ x : nat . λ _ : eq ·nat (S n) x . { S n ≃ x })
         { eq_refl ➔ β } ).

O_S : Π n : nat . eq ·nat O (S n) ➔ False =
    λ n : nat . λ H : eq ·nat O (S n) .
    δ - ( μ' H @(λ x : nat . λ _ : eq ·nat O x . { O ≃ x }) {
    | eq_refl ➔ β
    }).

JMeq_heq : ∀ A : ★ . ∀ B: ★ . Π x : A . Π y : B . JMeq ·A x ·B y ➔ { x ≃ y } = Λ A . Λ B . λ x . λ y . λ e . μ' e {
         | JMeq_refl ➔ β
         }.

-- JMeq_false : Π n : nat . JMeq ·nat (S n) ·nat O ➔ False  = λ n . λ e . δ - (JMeq_heq (S n) O e) .

JMeq_false : Π n : nat . JMeq ·nat (S n) ·nat O ➔ False
           = λ n . λ e .
           [ H1 : False =
                δ - ((μ' e @ (λ A : ★ . λ x : A . λ _ : JMeq ·nat (S n) ·A x . { S n ≃ x })
                { JMeq_refl ➔ β }))
           ] - False_ind H1.

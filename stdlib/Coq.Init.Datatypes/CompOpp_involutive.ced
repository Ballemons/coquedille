module test.
data comparison : ★ =
  | Eq : comparison
  | Lt : comparison
  | Gt : comparison.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

CompOpp : Π r : comparison . comparison = λ r : comparison . σ r @(λ r' : comparison . comparison) {
  | Eq ➔ Eq 
  | Lt ➔ Gt 
  | Gt ➔ Lt 
 }.

CompOpp_involutive : Π c : comparison . eq ·comparison (CompOpp (CompOpp c)) c = λ c : comparison . σ c @(λ c' : comparison . eq ·comparison (CompOpp (CompOpp c')) c') {
  | Eq ➔ eq_refl ·comparison Eq 
  | Lt ➔ eq_refl ·comparison Lt 
  | Gt ➔ eq_refl ·comparison Gt 
 }.



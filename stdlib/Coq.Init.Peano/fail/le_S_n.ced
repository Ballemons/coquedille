module test.
data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

data le (n : nat) : nat ➔ ★ =
  | le_n : le n
  | le_S : Π m : nat . le m ➔ le (S m).

le_ind : Π n : nat . ∀ P : nat ➔ ★ . Π f : P n . Π f' : Π m : nat . le n m ➔ P m ➔ P (S m) . Π n' : nat . Π l : le n n' . P n' = λ n : nat . Λ P : nat ➔ ★ . λ f : P n . λ f' : Π m : nat . le n m ➔ P m ➔ P (S m) . λ n' : nat . λ l : le n n' . μ F. l @(λ n' : nat . λ l : le n n' . P n') {
  | le_n ➔ f 
  | le_S m l' ➔ f' m l' (F -m l') 
 }.

pred : Π n : nat . nat = λ n : nat . σ n @(λ n' : nat . nat) {
  | O ➔ n 
  | S u ➔ u 
 }.

le_pred : Π n : nat . Π m : nat . le n m ➔ le (pred n) (pred m) = λ n : nat . λ m : nat . λ H : le n m . le_ind n ·(λ m' : nat . le (pred n) (pred m')) (le_n (pred n)) (λ m' : nat . λ H' : le n m' . λ IHle : le (pred n) (pred m') . σ m' @(λ n' : nat . Π H' : le n n' . Π IHle' : le (pred n) (pred n') . le (pred n) (pred (S n'))) {
  | O ➔ λ H' : le n O . λ IHle' : le (pred n) (pred O) . IHle' 
  | S m' ➔ λ H' : le n (S m') . λ IHle' : le (pred n) (pred (S m')) . le_S (pred n) m' IHle' 
 } H' IHle) m H.

le_S_n : Π n : nat . Π m : nat . le (S n) (S m) ➔ le n m = λ n : nat . λ m : nat . le_pred (S n) (S m).



module test.
data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

nat_ind : ∀ P : Π n : nat . ★ . Π f : P O . Π f' : Π n : nat . P n ➔ P (S n) . Π n : nat . P n = Λ P : Π n : nat . ★ . λ f : P O . λ f' : Π n : nat . P n ➔ P (S n) . λ n : nat . μ F. n @(λ n : nat . P n) {
  | O ➔ f 
  | S n' ➔ f' (to/nat -isType/F n') (F n') 
 }.

data le (n : nat) : nat ➔ ★ =
  | le_n : le n
  | le_S : Π m : nat . le m ➔ le (S m).

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

max : Π n : nat . Π m : nat . nat = λ n : nat . λ m : nat . μ max. n @(λ n : nat . Π m : nat . nat) {
  | O ➔ λ _ . m 
  | S n' ➔ λ _ . σ m @(λ m' : nat . nat) {
  | O ➔ n 
  | S m' ➔ S (max n' m') 
 } 
 } m.

eq_ind : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . Π f : P x . Π y : A . Π e : eq ·A x y . P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ f : P x . λ y : A . λ e : eq ·A x y . σ e @(λ y' : A . λ _ : eq ·A x y' . P y') {
  | eq_refl ➔ f 
 }.

False : ★ = ∀ X : ★ . X.

data True : ★ =
  | I : True.

False_ind : ∀ P : ★ . False ➔ P = Λ P : ★ . λ f : False . f ·P.

f_equal : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π x : A . Π y : A . eq ·A x y ➔ eq ·B (f x) (f y) = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·B (f x) (f y')) {
  | eq_refl ➔ eq_refl ·B (f x) 
 }.

le_ind : Π n : nat . ∀ P : nat ➔ ★ . Π f : P n . Π f' : Π m : nat . le n m ➔ P m ➔ P (S m) . Π n' : nat . Π l : le n n' . P n' = λ n : nat . Λ P : nat ➔ ★ . λ f : P n . λ f' : Π m : nat . le n m ➔ P m ➔ P (S m) . λ n' : nat . λ l : le n n' . μ F. l @(λ n' : nat . λ l : le n n' . P n') {
  | le_n ➔ f 
  | le_S m l' ➔ f' m l' (F -m l') 
 }.

pred : Π n : nat . nat = λ n : nat . σ n @(λ n' : nat . nat) {
  | O ➔ n 
  | S u ➔ u 
 }.

le_pred : Π n : nat . Π m : nat . le n m ➔ le (pred n) (pred m) = λ n : nat . λ m : nat . λ H : le n m . le_ind n ·(λ m' : nat . le (pred n) (pred m')) (le_n (pred n)) (λ m' : nat . λ H' : le n m' . λ IHle : le (pred n) (pred m') . σ m' @(λ n' : nat . Π H' : le n n' . Π IHle' : le (pred n) (pred n') . le (pred n) (pred (S n'))) {
  | O ➔ λ H' : le n O . λ IHle' : le (pred n) (pred O) . IHle' 
  | S m' ➔ λ H' : le n (S m') . λ IHle' : le (pred n) (pred (S m')) . le_S (pred n) m' IHle' 
 } H' IHle) m H.

le_S_n : Π n : nat . Π m : nat . le (S n) (S m) ➔ le n m = λ n : nat . λ m : nat . le_pred (S n) (S m).

max_r : Π n : nat . Π m : nat . le n m ➔ eq ·nat (max n m) m = λ n : nat . λ m : nat . nat_ind (λ n' : nat . tprodT?) (λ m' : nat . σ m' @(λ n' : nat . le O n' ➔ eq ·nat (max O n') n') {
  | O ➔ λ H : le O O . eq_refl ·nat O 
  | S m' ➔ λ H : le O (S m') . eq_refl ·nat (S m') 
 }) (λ n' : nat . λ IHn : Π m' : nat . le n' m' ➔ eq ·nat (max n' m') m' . λ m' : nat . σ m' @(λ n' : nat . le (S n') n' ➔ eq ·nat (max (S n') n') n') {
  | O ➔ λ H : le (S n') O . ([ H0 : eq ·nat O O ➔ eq ·nat (S n') O = σ H @(λ n' : nat . λ _ : le (S n') n' . eq ·nat n' O ➔ eq ·nat (S n') O) {
  | le_n ➔ λ H0 : eq ·nat (S n') O . (λ H0' : eq ·nat (S n') O . δ - ( σ H0' @(λ x : nat . λ _ : eq ·nat (S n') x . { S n' ≃ x }) {
  | eq_refl ➔ β 
 })) H0 
  | le_S m' H0 ➔ λ H1 : eq ·nat (S m') O . (λ H1' : eq ·nat (S m') O . δ - ( σ H1' @(λ x : nat . λ _ : eq ·nat (S m') x . { S m' ≃ x }) {
  | eq_refl ➔ β 
 })) H1 H0 
 } ] - H0 (eq_refl ·nat O)) 
  | S m' ➔ λ H : le (S n') (S m') . f_equal ·nat ·nat S (max n' m') m' (IHn m' (le_S_n n' m' H)) 
 }) n m.



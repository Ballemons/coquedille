module test.
data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

f_equal : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π x : A . Π y : A . eq ·A x y ➔ eq ·B (f x) (f y) = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·B (f x) (f y')) {
  | eq_refl ➔ eq_refl ·B (f x) 
 }.

data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

pred : Π n : nat . nat = λ n : nat . σ n @(λ n' : nat . nat) {
  | O ➔ n 
  | S u ➔ u 
 }.

f_equal_pred : Π x : nat . Π y : nat . eq ·nat x y ➔ eq ·nat (pred x) (pred y) = f_equal ·nat ·nat pred.



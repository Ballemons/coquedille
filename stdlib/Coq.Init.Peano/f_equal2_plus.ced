module test.
data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

f_equal2 : ∀ A1 : ★ . ∀ A2 : ★ . ∀ B : ★ . Π f : A1 ➔ A2 ➔ B . Π x1 : A1 . Π y1 : A1 . Π x2 : A2 . Π y2 : A2 . eq ·A1 x1 y1 ➔ eq ·A2 x2 y2 ➔ eq ·B (f x1 x2) (f y1 y2) = Λ A1 : ★ . Λ A2 : ★ . Λ B : ★ . λ f : A1 ➔ A2 ➔ B . λ x1 : A1 . λ y1 : A1 . λ x2 : A2 . λ y2 : A2 . λ H : eq ·A1 x1 y1 . σ H @(λ y : A1 . λ _ : eq ·A1 x1 y . eq ·A2 x2 y2 ➔ eq ·B (f x1 x2) (f y y2)) {
  | eq_refl ➔ λ H' : eq ·A2 x2 y2 . σ H' @(λ y : A2 . λ _ : eq ·A2 x2 y . eq ·B (f x1 x2) (f x1 y)) {
  | eq_refl ➔ eq_refl ·B (f x1 x2) 
 } 
 }.

data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

add : Π n : nat . Π m : nat . nat = λ n : nat . λ m : nat . μ add. n @(λ n : nat . Π m : nat . nat) {
  | O ➔ λ _ . m 
  | S p ➔ λ _ . S (add p m) 
 } m.

f_equal2_plus : Π x1 : nat . Π y1 : nat . Π x2 : nat . Π y2 : nat . eq ·nat x1 y1 ➔ eq ·nat x2 y2 ➔ eq ·nat (add x1 x2) (add y1 y2) = f_equal2 ·nat ·nat ·nat add.



module test.
data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

nat_ind : ∀ P : Π n : nat . ★ . Π f : P O . Π f' : Π n : nat . P n ➔ P (S n) . Π n : nat . P n = Λ P : Π n : nat . ★ . λ f : P O . λ f' : Π n : nat . P n ➔ P (S n) . λ n : nat . μ F. n @(λ n : nat . P n) {
  | O ➔ f 
  | S n' ➔ f' (to/nat -isType/F n') (F n') 
 }.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

add : Π n : nat . Π m : nat . nat = λ n : nat . λ m : nat . μ add. n @(λ n : nat . Π m : nat . nat) {
  | O ➔ λ _ . m 
  | S p ➔ λ _ . S (add p m) 
 } m.

mul : Π n : nat . Π m : nat . nat = λ n : nat . λ m : nat . μ mul. n @(λ n : nat . Π m : nat . nat) {
  | O ➔ λ _ . O 
  | S p ➔ λ _ . add m (mul p m) 
 } m.

mult_n_O : Π n : nat . eq ·nat O (mul n O) = λ n : nat . nat_ind ·(λ n' : nat . eq ·nat O (mul n' O)) (eq_refl ·nat O) (λ n' : nat . λ IHn : eq ·nat O (mul n' O) . IHn) n.



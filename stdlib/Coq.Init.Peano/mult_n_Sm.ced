module test.
data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

nat_ind : ∀ P : Π n : nat . ★ . Π f : P O . Π f' : Π n : nat . P n ➔ P (S n) . Π n : nat . P n = Λ P : Π n : nat . ★ . λ f : P O . λ f' : Π n : nat . P n ➔ P (S n) . λ n : nat . μ F. n @(λ n : nat . P n) {
  | O ➔ f 
  | S n' ➔ f' (to/nat -isType/F n') (F n') 
 }.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

add : Π n : nat . Π m : nat . nat = λ n : nat . λ m : nat . μ add. n @(λ n : nat . Π m : nat . nat) {
  | O ➔ λ _ . m 
  | S p ➔ λ _ . S (add p m) 
 } m.

mul : Π n : nat . Π m : nat . nat = λ n : nat . λ m : nat . μ mul. n @(λ n : nat . Π m : nat . nat) {
  | O ➔ λ _ . O 
  | S p ➔ λ _ . add m (mul p m) 
 } m.

eq_ind : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . Π f : P x . Π y : A . Π e : eq ·A x y . P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ f : P x . λ y : A . λ e : eq ·A x y . σ e @(λ y' : A . λ _ : eq ·A x y' . P y') {
  | eq_refl ➔ f 
 }.

f_equal : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π x : A . Π y : A . eq ·A x y ➔ eq ·B (f x) (f y) = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·B (f x) (f y')) {
  | eq_refl ➔ eq_refl ·B (f x) 
 }.

eq_S : Π x : nat . Π y : nat . eq ·nat x y ➔ eq ·nat (S x) (S y) = f_equal ·nat ·nat S.

f_equal_nat : ∀ B : ★ . Π f : nat ➔ B . Π x : nat . Π y : nat . eq ·nat x y ➔ eq ·B (f x) (f y) = f_equal ·nat.

plus_n_Sm : Π n : nat . Π m : nat . eq ·nat (S (add n m)) (add n (S m)) = λ n : nat . λ m : nat . nat_ind ·(λ n' : nat . eq ·nat (S (add n' m)) (add n' (S m))) (eq_refl ·nat (S m)) (λ n' : nat . λ IHn : eq ·nat (S (add n' m)) (add n' (S m)) . f_equal_nat ·nat S (S (add n' m)) (add n' (S m)) IHn) n.

mult_n_Sm : Π n : nat . Π m : nat . eq ·nat (add (mul n m) n) (mul n (S m)) = λ n : nat . λ m : nat . nat_ind ·(λ n' : nat . eq ·nat (add (mul n' m) n') (mul n' (S m))) (eq_refl ·nat O) (λ p : nat . λ H : eq ·nat (add (mul p m) p) (mul p (S m)) . ([ n' : nat = mul p (S m) ] - σ H @(λ y : nat . λ _ : eq ·nat (add (mul p m) p) y . eq ·nat (add (add m (mul p m)) (S p)) (S (add m y))) {
  | eq_refl ➔ eq_ind ·nat (S (add (add m (mul p m)) p)) ·(λ n' : nat . eq ·nat n' (S (add m (add (mul p m) p)))) (eq_S (add (add m (mul p m)) p) (add m (add (mul p m) p)) (nat_ind ·(λ n' : nat . eq ·nat (add (add n' (mul p m)) p) (add n' (add (mul p m) p))) (eq_refl ·nat (add (mul p m) p)) (λ n' : nat . λ H' : eq ·nat (add (add n' (mul p m)) p) (add n' (add (mul p m) p)) . f_equal_nat ·nat S (add (add n' (mul p m)) p) (add n' (add (mul p m) p)) H') m)) (add (add m (mul p m)) (S p)) (plus_n_Sm (add m (mul p m)) p) 
 })) n.



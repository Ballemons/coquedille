module test.
data ex (A : ★) (P : A ➔ ★) : ★ =
  | ex_intro : Π x : A . P x ➔ ex.

ex_proj1 : ∀ A : ★ . ∀ P : A ➔ ★ . Π x : ex ·A ·P . A = Λ A : ★ . Λ P : A ➔ ★ . λ x : ex ·A ·P . σ x @(λ x' : ex ·A ·P . A) {
  | ex_intro a p ➔ a 
 }.

ex_proj2 : ∀ A : ★ . ∀ P : A ➔ ★ . Π x : ex ·A ·P . P (ex_proj1 ·A ·P x) = Λ A : ★ . Λ P : A ➔ ★ . λ x : ex ·A ·P . σ x @(λ x' : ex ·A ·P . P (ex_proj1 ·A ·P x')) {
  | ex_intro x0 b ➔ b 
 }.



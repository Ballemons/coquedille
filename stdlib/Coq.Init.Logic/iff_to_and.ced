module test.
data and (A : ★) (B : ★) : ★ =
  | conj : A ➔ B ➔ and.

iff : Π A : ★ . Π B : ★ . ★ = λ A : ★ . λ B : ★ . and ·(A ➔ B) ·(B ➔ A).

iff_to_and : ∀ A : ★ . ∀ B : ★ . iff ·(iff ·A ·B) ·(and ·(A ➔ B) ·(B ➔ A)) = Λ A : ★ . Λ B : ★ . conj ·(iff ·A ·B ➔ and ·(A ➔ B) ·(B ➔ A)) ·(and ·(A ➔ B) ·(B ➔ A) ➔ iff ·A ·B) (λ H : iff ·A ·B . σ H @(λ _ : and ·(A ➔ B) ·(B ➔ A) . and ·(A ➔ B) ·(B ➔ A)) {
  | conj Hl Hr ➔ conj ·(A ➔ B) ·(B ➔ A) (λ H' : A . Hl H') (λ H' : B . Hr H') 
 }) (λ H : and ·(A ➔ B) ·(B ➔ A) . σ H @(λ _ : and ·(A ➔ B) ·(B ➔ A) . iff ·A ·B) {
  | conj Hl Hr ➔ conj ·(A ➔ B) ·(B ➔ A) (λ H' : A . Hl H') (λ H' : B . Hr H') 
 }).



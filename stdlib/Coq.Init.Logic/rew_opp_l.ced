module test.
data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

eq_rect : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . Π f : P x . Π y : A . Π e : eq ·A x y . P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ f : P x . λ y : A . λ e : eq ·A x y . σ e @(λ y' : A . λ _ : eq ·A x y' . P y') {
  | eq_refl ➔ f 
 }.

eq_sym : ∀ A : ★ . Π x : A . Π y : A . eq ·A x y ➔ eq ·A y x = Λ A : ★ . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·A y' x) {
  | eq_refl ➔ eq_refl ·A x 
 }.

eq_rect_r : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . P x ➔ Π y : A . eq ·A y x ➔ P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ H : P x . λ y : A . λ H0 : eq ·A y x . eq_rect ·A x ·(λ y' : A . P y') H y (eq_sym ·A y x H0).

rew_opp_l : ∀ A : ★ . ∀ P : A ➔ ★ . Π x : A . Π y : A . Π H : eq ·A x y . Π a : P x . eq ·(P x) (eq_rect_r ·A y ·P (eq_rect ·A x ·P a y H) x H) a = Λ A : ★ . Λ P : A ➔ ★ . λ x : A . λ y : A . λ H : eq ·A x y . λ a : P x . σ H @(λ y' : A . λ e : eq ·A x y' . eq ·(P x) (eq_rect_r ·A y' ·P (eq_rect ·A x ·P a y' e) x e) a) {
  | eq_refl ➔ eq_refl ·(P x) a 
 }.



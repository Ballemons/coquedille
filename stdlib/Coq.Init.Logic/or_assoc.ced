module test.
data and (A : ★) (B : ★) : ★ =
  | conj : A ➔ B ➔ and.

data or (A : ★) (B : ★) : ★ =
  | or_introl : A ➔ or
  | or_intror : B ➔ or.

iff : Π A : ★ . Π B : ★ . ★ = λ A : ★ . λ B : ★ . and ·(A ➔ B) ·(B ➔ A).

or_assoc : ∀ A : ★ . ∀ B : ★ . ∀ C : ★ . iff ·(or ·(or ·A ·B) ·C) ·(or ·A ·(or ·B ·C)) = Λ A : ★ . Λ B : ★ . Λ C : ★ . conj ·(or ·(or ·A ·B) ·C ➔ or ·A ·(or ·B ·C)) ·(or ·A ·(or ·B ·C) ➔ or ·(or ·A ·B) ·C) (λ H : or ·(or ·A ·B) ·C . σ H @(λ _ : or ·(or ·A ·B) ·C . or ·A ·(or ·B ·C)) {
  | or_introl H' ➔ σ H' @(λ _ : or ·A ·B . or ·A ·(or ·B ·C)) {
  | or_introl H' ➔ or_introl ·A ·(or ·B ·C) H' 
  | or_intror H' ➔ or_intror ·A ·(or ·B ·C) (or_introl ·B ·C H') 
 } 
  | or_intror H' ➔ or_intror ·A ·(or ·B ·C) (or_intror ·B ·C H') 
 }) (λ H : or ·A ·(or ·B ·C) . σ H @(λ _ : or ·A ·(or ·B ·C) . or ·(or ·A ·B) ·C) {
  | or_introl H' ➔ or_introl ·(or ·A ·B) ·C (or_introl ·A ·B H') 
  | or_intror H' ➔ σ H' @(λ _ : or ·B ·C . or ·(or ·A ·B) ·C) {
  | or_introl H' ➔ or_introl ·(or ·A ·B) ·C (or_intror ·A ·B H') 
  | or_intror H' ➔ or_intror ·(or ·A ·B) ·C H' 
 } 
 }).



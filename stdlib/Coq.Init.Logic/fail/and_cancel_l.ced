module test.
data and (A : ★) (B : ★) : ★ =
  | conj : A ➔ B ➔ and.

iff : Π A : ★ . Π B : ★ . ★ = λ A : ★ . λ B : ★ . and ·(λ _ : A . B) ·(λ _ : B . A).

and_iff_compat_l : ∀ A : ★ . ∀ B : ★ . ∀ C : ★ . iff ·B ·C ➔ iff ·(and ·A ·B) ·(and ·A ·C) = Λ A : ★ . Λ B : ★ . Λ C : ★ . λ H : iff ·B ·C . σ H @(λ _ : and ·(λ _ : B . C) ·(λ _ : C . B) . iff ·(and ·A ·B) ·(and ·A ·C)) {
  | conj Hl Hr ➔ conj ·and ·A ·B ➔ and ·A ·C ·and ·A ·C ➔ and ·A ·B (λ H' : and ·A ·B . σ H' @(λ _ : and ·A ·B . and ·A ·C) {
  | conj H' H0 ➔ conj ·A ·C H' (Hl H0) 
 }) (λ H' : and ·A ·C . σ H' @(λ _ : and ·A ·C . and ·A ·B) {
  | conj H' H0 ➔ conj ·A ·B H' (Hr H0) 
 }) 
 }.

and_cancel_l : ∀ A : ★ . ∀ B : ★ . ∀ C : ★ . (B ➔ A) ➔ (C ➔ A) ➔ iff ·(iff ·(and ·A ·B) ·(and ·A ·C)) ·(iff ·B ·C) = Λ A : ★ . Λ B : ★ . Λ C : ★ . λ Hl : B ➔ A . λ Hr : C ➔ A . conj ·iff ·(and ·A ·B) ·(and ·A ·C) ➔ iff ·B ·C ·iff ·B ·C ➔ iff ·(and ·A ·B) ·(and ·A ·C) (λ H : iff ·(and ·A ·B) ·(and ·A ·C) . σ H @(λ _ : and ·and ·A ·B ➔ and ·A ·C ·and ·A ·C ➔ and ·A ·B . iff ·B ·C) {
  | conj HypL HypR ➔ conj ·(λ _ : B . C) ·(λ _ : C . B) (λ H' : B . ([ H0 : and ·A ·B ➔ C = λ _ : and ·A ·B . σ HypL _ @(λ _ : and ·A ·C . C) {
  | conj XX XX ➔ _ 
 } ] - H0 (conj ·A ·B (Hl H') H'))) (λ H' : C . ([ H0 : and ·A ·C ➔ B = λ _ : and ·A ·C . σ HypR _ @(λ _ : and ·A ·B . B) {
  | conj XX XX ➔ _ 
 } ] - H0 (conj ·A ·C (Hr H') H'))) 
 }) (and_iff_compat_l ·A ·B ·C).



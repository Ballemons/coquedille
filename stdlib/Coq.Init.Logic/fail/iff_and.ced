module test.
data and (A : ★) (B : ★) : ★ =
  | conj : A ➔ B ➔ and.

iff : Π A : ★ . Π B : ★ . ★ = λ A : ★ . λ B : ★ . and ·(λ _ : A . B) ·(λ _ : B . A).

iff_and : ∀ A : ★ . ∀ B : ★ . iff ·A ·B ➔ and ·(λ _ : A . B) ·(λ _ : B . A) = Λ A : ★ . Λ B : ★ . λ H : iff ·A ·B . σ H @(λ _ : and ·(λ _ : A . B) ·(λ _ : B . A) . and ·(λ _ : A . B) ·(λ _ : B . A)) {
  | conj H' H0 ➔ conj ·(λ _ : A . B) ·(λ _ : B . A) H' H0 
 }.



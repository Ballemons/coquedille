module test.
data and (A : ★) (B : ★) : ★ =
  | conj : A ➔ B ➔ and.

data ex (A : ★) (P : A ➔ ★) : ★ =
  | ex_intro : Π x : A . P x ➔ ex.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

uniqueness : Π A : ★ . Π P : A ➔ ★ . ★ = λ A : ★ . λ P : A ➔ ★ . Π x : A . Π y : A . P x ➔ P y ➔ eq ·A x y.

unique : Π A : ★ . Π P : A ➔ ★ . Π x : A . ★ = λ A : ★ . λ P : A ➔ ★ . λ x : A . and ·(P x) ·(λ x' : A . λ _ : P x' . eq ·A x x').

eq_trans : ∀ A : ★ . Π x : A . Π y : A . Π z : A . eq ·A x y ➔ eq ·A y z ➔ eq ·A x z = Λ A : ★ . λ x : A . λ y : A . λ z : A . λ H : eq ·A x y . λ H0 : eq ·A y z . σ H0 @(λ y' : A . λ _ : eq ·A y y' . eq ·A x y') {
  | eq_refl ➔ H 
 }.

eq_sym : ∀ A : ★ . Π x : A . Π y : A . eq ·A x y ➔ eq ·A y x = Λ A : ★ . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·A y' x) {
  | eq_refl ➔ eq_refl ·A x 
 }.

iff : Π A : ★ . Π B : ★ . ★ = λ A : ★ . λ B : ★ . and ·(λ _ : A . B) ·(λ _ : B . A).

unique_existence : ∀ A : ★ . ∀ P : A ➔ ★ . iff ·(and ·(ex ·A ·(λ x : A . P x)) ·(uniqueness ·A ·P)) ·(ex ·A ·(unique ·A ·(λ x : A . P x))) = Λ A : ★ . Λ P : A ➔ ★ . conj ·and ·(ex ·A ·(λ x : A . P x)) ·(uniqueness ·A ·P) ➔ ex ·A ·(unique ·A ·(λ x : A . P x)) ·ex ·A ·(unique ·A ·(λ x : A . P x)) ➔ and ·(ex ·A ·(λ x : A . P x)) ·(uniqueness ·A ·P) (λ H : and ·(ex ·A ·(λ x : A . P x)) ·(uniqueness ·A ·P) . σ H @(λ _ : and ·(ex ·A ·(λ x : A . P x)) ·(uniqueness ·A ·P) . ex ·A ·(unique ·A ·(λ x : A . P x))) {
  | conj H' ➔ σ H' @(λ _ : ex ·A ·(λ x : A . P x) . uniqueness ·A ·P ➔ ex ·A ·(unique ·A ·(λ x : A . P x))) {
  | ex_intro x Hx ➔ λ Huni : uniqueness ·A ·P . ex_intro ·A ·(unique ·A ·(λ x' : A . P x')) x (conj ·(P x) ·(λ x' : A . λ _ : P x' . eq ·A x x') Hx (λ x' : A . λ H' : P x' . Huni x x' Hx H')) 
 } 
 }) (λ H : ex ·A ·(unique ·A ·(λ x : A . P x)) . σ H @(λ _ : ex ·A ·(unique ·A ·(λ x : A . P x)) . and ·(ex ·A ·(λ x : A . P x)) ·(uniqueness ·A ·P)) {
  | ex_intro x H' ➔ σ H' @(λ _ : and ·(P x) ·(λ x' : A . λ _ : P x' . eq ·A x x') . and ·(ex ·A ·(λ x' : A . P x')) ·(uniqueness ·A ·P)) {
  | conj Hx Huni ➔ conj ·(ex ·A ·(λ x' : A . P x')) ·(uniqueness ·A ·P) (ex_intro ·A ·(λ x' : A . P x') x Hx) (λ x' : A . λ x'' : A . λ Hx' : P x' . λ Hx'' : P x'' . eq_trans ·A x' x x'' (eq_sym ·A x x' (Huni x' Hx')) (Huni x'' Hx'')) 
 } 
 }).



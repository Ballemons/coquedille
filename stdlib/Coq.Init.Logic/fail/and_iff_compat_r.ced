module test.
data and (A : ★) (B : ★) : ★ =
  | conj : A ➔ B ➔ and.

iff : Π A : ★ . Π B : ★ . ★ = λ A : ★ . λ B : ★ . and ·(λ _ : A . B) ·(λ _ : B . A).

and_iff_compat_r : ∀ A : ★ . ∀ B : ★ . ∀ C : ★ . iff ·B ·C ➔ iff ·(and ·B ·A) ·(and ·C ·A) = Λ A : ★ . Λ B : ★ . Λ C : ★ . λ H : iff ·B ·C . σ H @(λ _ : and ·(λ _ : B . C) ·(λ _ : C . B) . iff ·(and ·B ·A) ·(and ·C ·A)) {
  | conj Hl Hr ➔ conj ·and ·B ·A ➔ and ·C ·A ·and ·C ·A ➔ and ·B ·A (λ H' : and ·B ·A . σ H' @(λ _ : and ·B ·A . and ·C ·A) {
  | conj H' H0 ➔ conj ·C ·A (Hl H') H0 
 }) (λ H' : and ·C ·A . σ H' @(λ _ : and ·C ·A . and ·B ·A) {
  | conj H' H0 ➔ conj ·B ·A (Hr H') H0 
 }) 
 }.



module test.
data and (A : ★) (B : ★) : ★ =
  | conj : A ➔ B ➔ and.

False : ★ = ∀ X : ★ . X.

iff : Π A : ★ . Π B : ★ . ★ = λ A : ★ . λ B : ★ . and ·(A ➔ B) ·(B ➔ A).

False_ind : ∀ P : ★ . False ➔ P = Λ P : ★ . λ f : False . f ·P.

not : Π A : ★ . ★ = λ A : ★ . A ➔ False.

neg_false : ∀ A : ★ . iff ·(not ·A) ·(iff ·A ·False) = Λ A : ★ . conj ·((A ➔ False) ➔ iff ·A ·False) ·(iff ·A ·False ➔ A ➔ False) (λ H : A ➔ False . conj ·(A ➔ False) ·(False ➔ A) H (λ H1 : False . False_ind ·A H1)) (λ H0 : iff ·A ·False . σ H0 @(λ _ : and ·(A ➔ False) ·(False ➔ A) . A ➔ False) {
  | conj H _tmp ➔ H 
 }).



module test.
data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

eq_sym : ∀ A : ★ . Π x : A . Π y : A . eq ·A x y ➔ eq ·A y x = Λ A : ★ . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·A y' x) {
  | eq_refl ➔ eq_refl ·A x 
 }.

eq_trans : ∀ A : ★ . Π x : A . Π y : A . Π z : A . eq ·A x y ➔ eq ·A y z ➔ eq ·A x z = Λ A : ★ . λ x : A . λ y : A . λ z : A . λ H : eq ·A x y . λ H0 : eq ·A y z . σ H0 @(λ y' : A . λ _ : eq ·A y y' . eq ·A x y') {
  | eq_refl ➔ H 
 }.

eq_trans_sym_distr : ∀ A : ★ . Π x : A . Π y : A . Π z : A . Π e : eq ·A x y . Π e' : eq ·A y z . eq ·(eq ·A z x) (eq_sym ·A x z (eq_trans ·A x y z e e')) (eq_trans ·A z y x (eq_sym ·A y z e') (eq_sym ·A x y e)) = Λ A : ★ . λ x : A . λ y : A . λ z : A . λ e : eq ·A x y . σ e @(λ y' : A . λ e' : eq ·A x y' . Π e'' : eq ·A y' z . eq ·(eq ·A z x) (eq_sym ·A x z (eq_trans ·A x y' z e' e'')) (eq_trans ·A z y' x (eq_sym ·A y' z e'') (eq_sym ·A x y' e'))) {
  | eq_refl ➔ λ e' : eq ·A x z . σ e' @(λ y' : A . λ e' : eq ·A x y' . eq ·(eq ·A y' x) (eq_sym ·A x y' (eq_trans ·A x x y' (eq_refl ·A x) e')) (eq_trans ·A y' x x (eq_sym ·A x y' e') (eq_sym ·A x x (eq_refl ·A x)))) {
  | eq_refl ➔ eq_refl ·(eq ·A x x) (eq_trans ·A x x x (eq_sym ·A x x (eq_refl ·A x)) (eq_sym ·A x x (eq_refl ·A x))) 
 } 
 }.



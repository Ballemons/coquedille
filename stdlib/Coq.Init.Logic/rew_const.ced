module test.
data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

eq_rect : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . Π f : P x . Π y : A . Π e : eq ·A x y . P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ f : P x . λ y : A . λ e : eq ·A x y . σ e @(λ y' : A . λ _ : eq ·A x y' . P y') {
  | eq_refl ➔ f 
 }.

rew_const : ∀ A : ★ . ∀ P : ★ . Π x : A . Π y : A . Π e : eq ·A x y . Π k : P . eq ·P (eq_rect ·A x ·(λ _ : A . P) k y e) k = Λ A : ★ . Λ P : ★ . λ x : A . λ y : A . λ e : eq ·A x y . σ e @(λ y' : A . λ e' : eq ·A x y' . Π k : P . eq ·P (eq_rect ·A x ·(λ _ : A . P) k y' e') k) {
  | eq_refl ➔ λ k : P . eq_refl ·P k 
 }.



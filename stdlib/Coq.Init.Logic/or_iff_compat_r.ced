module test.
data and (A : ★) (B : ★) : ★ =
  | conj : A ➔ B ➔ and.

iff : Π A : ★ . Π B : ★ . ★ = λ A : ★ . λ B : ★ . and ·(A ➔ B) ·(B ➔ A).

data or (A : ★) (B : ★) : ★ =
  | or_introl : A ➔ or
  | or_intror : B ➔ or.

or_iff_compat_r : ∀ A : ★ . ∀ B : ★ . ∀ C : ★ . iff ·B ·C ➔ iff ·(or ·B ·A) ·(or ·C ·A) = Λ A : ★ . Λ B : ★ . Λ C : ★ . λ H : iff ·B ·C . σ H @(λ _ : and ·(B ➔ C) ·(C ➔ B) . iff ·(or ·B ·A) ·(or ·C ·A)) {
  | conj Hl Hr ➔ conj ·(or ·B ·A ➔ or ·C ·A) ·(or ·C ·A ➔ or ·B ·A) (λ H' : or ·B ·A . σ H' @(λ _ : or ·B ·A . or ·C ·A) {
  | or_introl H' ➔ or_introl ·C ·A (Hl H') 
  | or_intror H' ➔ or_intror ·C ·A H' 
 }) (λ H' : or ·C ·A . σ H' @(λ _ : or ·C ·A . or ·B ·A) {
  | or_introl H' ➔ or_introl ·B ·A (Hr H') 
  | or_intror H' ➔ or_intror ·B ·A H' 
 }) 
 }.



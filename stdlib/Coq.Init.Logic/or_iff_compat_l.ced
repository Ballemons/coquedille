module test.
data and (A : ★) (B : ★) : ★ =
  | conj : A ➔ B ➔ and.

iff : Π A : ★ . Π B : ★ . ★ = λ A : ★ . λ B : ★ . and ·(A ➔ B) ·(B ➔ A).

data or (A : ★) (B : ★) : ★ =
  | or_introl : A ➔ or
  | or_intror : B ➔ or.

or_iff_compat_l : ∀ A : ★ . ∀ B : ★ . ∀ C : ★ . iff ·B ·C ➔ iff ·(or ·A ·B) ·(or ·A ·C) = Λ A : ★ . Λ B : ★ . Λ C : ★ . λ H : iff ·B ·C . σ H @(λ _ : and ·(B ➔ C) ·(C ➔ B) . iff ·(or ·A ·B) ·(or ·A ·C)) {
  | conj Hl Hr ➔ conj ·(or ·A ·B ➔ or ·A ·C) ·(or ·A ·C ➔ or ·A ·B) (λ H' : or ·A ·B . σ H' @(λ _ : or ·A ·B . or ·A ·C) {
  | or_introl H' ➔ or_introl ·A ·C H' 
  | or_intror H' ➔ or_intror ·A ·C (Hl H') 
 }) (λ H' : or ·A ·C . σ H' @(λ _ : or ·A ·C . or ·A ·B) {
  | or_introl H' ➔ or_introl ·A ·B H' 
  | or_intror H' ➔ or_intror ·A ·B (Hr H') 
 }) 
 }.



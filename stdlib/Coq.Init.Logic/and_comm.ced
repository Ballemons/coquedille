module test.
data and (A : ★) (B : ★) : ★ =
  | conj : A ➔ B ➔ and.

iff : Π A : ★ . Π B : ★ . ★ = λ A : ★ . λ B : ★ . and ·(A ➔ B) ·(B ➔ A).

and_comm : ∀ A : ★ . ∀ B : ★ . iff ·(and ·A ·B) ·(and ·B ·A) = Λ A : ★ . Λ B : ★ . conj ·(and ·A ·B ➔ and ·B ·A) ·(and ·B ·A ➔ and ·A ·B) (λ H : and ·A ·B . σ H @(λ _ : and ·A ·B . and ·B ·A) {
  | conj H' H0 ➔ conj ·B ·A H0 H' 
 }) (λ H : and ·B ·A . σ H @(λ _ : and ·B ·A . and ·A ·B) {
  | conj H' H0 ➔ conj ·A ·B H0 H' 
 }).



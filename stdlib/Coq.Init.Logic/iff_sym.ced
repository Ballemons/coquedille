module test.
data and (A : ★) (B : ★) : ★ =
  | conj : A ➔ B ➔ and.

iff : Π A : ★ . Π B : ★ . ★ = λ A : ★ . λ B : ★ . and ·(A ➔ B) ·(B ➔ A).

iff_sym : ∀ A : ★ . ∀ B : ★ . iff ·A ·B ➔ iff ·B ·A = Λ A : ★ . Λ B : ★ . λ H : iff ·A ·B . σ H @(λ _ : and ·(A ➔ B) ·(B ➔ A) . iff ·B ·A) {
  | conj H1 H2 ➔ conj ·(B ➔ A) ·(A ➔ B) H2 H1 
 }.



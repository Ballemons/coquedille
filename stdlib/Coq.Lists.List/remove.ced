module test.
data sumbool (A : ★) (B : ★) : ★ =
  | left : A ➔ sumbool
  | right : B ➔ sumbool.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

False : ★ = ∀ X : ★ . X.

not : Π A : ★ . ★ = λ A : ★ . A ➔ False.

data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

remove : ∀ A : ★ . Π eq_dec : Π x : A . Π y : A . sumbool ·(eq ·A x y) ·(not ·(eq ·A x y)) . Π x : A . Π l : list ·A . list ·A = Λ A : ★ . λ eq_dec : Π x : A . Π y : A . sumbool ·(eq ·A x y) ·(not ·(eq ·A x y)) . λ x : A . λ l : list ·A . μ remove. l @(λ l : list ·A . Π x : A . list ·A) {
  | nil ➔ λ _ . nil ·A 
  | cons y tl ➔ λ _ . σ eq_dec x y @(λ _ : sumbool ·(eq ·A x y) ·(not ·(eq ·A x y)) . list ·A) {
  | left XX ➔ remove tl x 
  | right XX ➔ cons ·A y (remove tl x) 
 } 
 } x.



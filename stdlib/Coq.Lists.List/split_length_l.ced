module test.
data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

data prod (A : ★) (B : ★) : ★ =
  | pair : A ➔ B ➔ prod.

list_ind : ∀ A : ★ . ∀ P : Π l : list ·A . ★ . Π f : P (nil ·A) . Π f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . Π l : list ·A . P l = Λ A : ★ . Λ P : Π l : list ·A . ★ . λ f : P (nil ·A) . λ f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . λ l : list ·A . μ F. l @(λ l : list ·A . P l) {
  | nil ➔ f 
  | cons y l' ➔ f' y (to/list -isType/F l') (F l') 
 }.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

length : ∀ A : ★ . list ·A ➔ nat = Λ A : ★ . λ l : list ·A . μ length. l @(λ l : list ·A . nat) {
  | nil ➔ O 
  | cons a l' ➔ S (length l') 
 }.

fst : ∀ A : ★ . ∀ B : ★ . Π p : prod ·A ·B . A = Λ A : ★ . Λ B : ★ . λ p : prod ·A ·B . σ p @(λ p' : prod ·A ·B . A) {
  | pair x y ➔ x 
 }.

split : ∀ A : ★ . ∀ B : ★ . Π l : list ·(prod ·A ·B) . prod ·(list ·A) ·(list ·B) = Λ A : ★ . Λ B : ★ . λ l : list ·(prod ·A ·B) . μ split. l @(λ l : list ·(prod ·A ·B) . prod ·(list ·A) ·(list ·B)) {
  | nil ➔ pair ·(list ·A) ·(list ·B) (nil ·A) (nil ·B) 
  | cons p tl ➔ σ p @(λ p' : prod ·A ·B . prod ·(list ·A) ·(list ·B)) {
  | pair x y ➔ σ split tl @(λ p' : prod ·(list ·A) ·(list ·B) . prod ·(list ·A) ·(list ·B)) {
  | pair left right ➔ pair ·(list ·A) ·(list ·B) (cons ·A x left) (cons ·B y right) 
 } 
 } 
 }.

f_equal : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π x : A . Π y : A . eq ·A x y ➔ eq ·B (f x) (f y) = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·B (f x) (f y')) {
  | eq_refl ➔ eq_refl ·B (f x) 
 }.

f_equal_nat : ∀ B : ★ . Π f : nat ➔ B . Π x : nat . Π y : nat . eq ·nat x y ➔ eq ·B (f x) (f y) = f_equal ·nat.

split_length_l : ∀ A : ★ . ∀ B : ★ . Π l : list ·(prod ·A ·B) . eq ·nat (length ·A (fst ·(list ·A) ·(list ·B) (split ·A ·B l))) (length ·(prod ·A ·B) l) = Λ A : ★ . Λ B : ★ . λ l : list ·(prod ·A ·B) . list_ind ·(prod ·A ·B) ·(λ l' : list ·(prod ·A ·B) . eq ·nat (length ·A (fst ·(list ·A) ·(list ·B) (split ·A ·B l'))) (length ·(prod ·A ·B) l')) (eq_refl ·nat O) (λ a : prod ·A ·B . λ l' : list ·(prod ·A ·B) . λ IHl : eq ·nat (length ·A (fst ·(list ·A) ·(list ·B) (split ·A ·B l'))) (length ·(prod ·A ·B) l') . σ a @(λ p : prod ·A ·B . eq ·nat (length ·A (fst ·(list ·A) ·(list ·B) σ p @(λ p' : prod ·A ·B . prod ·(list ·A) ·(list ·B)) {
  | pair x y ➔ σ split ·A ·B l' @(λ p' : prod ·(list ·A) ·(list ·B) . prod ·(list ·A) ·(list ·B)) {
  | pair left right ➔ pair ·(list ·A) ·(list ·B) (cons ·A x left) (cons ·B y right) 
 } 
 })) (S (length ·(prod ·A ·B) l'))) {
  | pair a' b ➔ σ split ·A ·B l' @(λ p : prod ·(list ·A) ·(list ·B) . Π IHl' : eq ·nat (length ·A (fst ·(list ·A) ·(list ·B) p)) (length ·(prod ·A ·B) l') . eq ·nat (length ·A (fst ·(list ·A) ·(list ·B) σ p @(λ p' : prod ·(list ·A) ·(list ·B) . prod ·(list ·A) ·(list ·B)) {
  | pair left right ➔ pair ·(list ·A) ·(list ·B) (cons ·A a' left) (cons ·B b right) 
 })) (S (length ·(prod ·A ·B) l'))) {
  | pair l0 l1 ➔ λ IHl' : eq ·nat (length ·A (fst ·(list ·A) ·(list ·B) (pair ·(list ·A) ·(list ·B) l0 l1))) (length ·(prod ·A ·B) l') . f_equal_nat ·nat S (length ·A l0) (length ·(prod ·A ·B) l') IHl' 
 } IHl 
 }) l.



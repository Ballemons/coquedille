module test.
data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

app : ∀ A : ★ . list ·A ➔ list ·A ➔ list ·A = Λ A : ★ . λ l : list ·A . λ m : list ·A . μ app. l @(λ l : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ _ . m 
  | cons a l1 ➔ λ _ . cons ·A a (app l1 m) 
 } m.

concat : ∀ A : ★ . Π l : list ·(list ·A) . list ·A = Λ A : ★ . λ l : list ·(list ·A) . μ concat. l @(λ l : list ·(list ·A) . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ app ·A x (concat l') 
 }.

concat_cons : ∀ A : ★ . Π x : list ·A . Π l : list ·(list ·A) . eq ·(list ·A) (app ·A x (concat ·A l)) (app ·A x (concat ·A l)) = Λ A : ★ . λ x : list ·A . λ l : list ·(list ·A) . eq_refl ·(list ·A) (app ·A x (concat ·A l)).



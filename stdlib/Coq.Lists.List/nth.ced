module test.
data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

nth : ∀ A : ★ . Π n : nat . Π l : list ·A . Π default : A . A = Λ A : ★ . λ n : nat . λ l : list ·A . λ default : A . σ n @(λ n' : nat . A) {
  | O ➔ μ nth. l @(λ l : list ·A . Π n : nat . Π default : A . A) {
  | nil ➔ λ _ . λ _ . default 
  | cons x l' ➔ λ _ . λ _ . x 
 } n default 
  | S m ➔ μ nth. l @(λ l : list ·A . Π n : nat . Π default : A . A) {
  | nil ➔ λ _ . λ _ . default 
  | cons x t ➔ λ _ . λ _ . nth t m default 
 } n default 
 }.



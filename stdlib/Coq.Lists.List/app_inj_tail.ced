module test.
data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

list_ind : ∀ A : ★ . ∀ P : Π l : list ·A . ★ . Π f : P (nil ·A) . Π f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . Π l : list ·A . P l = Λ A : ★ . Λ P : Π l : list ·A . ★ . λ f : P (nil ·A) . λ f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . λ l : list ·A . μ F. l @(λ l : list ·A . P l) {
  | nil ➔ f 
  | cons y l' ➔ f' y (to/list -isType/F l') (F l') 
 }.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

app : ∀ A : ★ . list ·A ➔ list ·A ➔ list ·A = Λ A : ★ . λ l : list ·A . λ m : list ·A . μ app. l @(λ l : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m.

data and (A : ★) (B : ★) : ★ =
  | conj : A ➔ B ➔ and.

f_equal : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π x : A . Π y : A . eq ·A x y ➔ eq ·B (f x) (f y) = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·B (f x) (f y')) {
  | eq_refl ➔ eq_refl ·B (f x) 
 }.

False : ★ = ∀ X : ★ . X.

eq_ind : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . Π f : P x . Π y : A . Π e : eq ·A x y . P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ f : P x . λ y : A . λ e : eq ·A x y . σ e @(λ y' : A . λ _ : eq ·A x y' . P y') {
  | eq_refl ➔ f 
 }.

data True : ★ =
  | I : True.

False_ind : ∀ P : ★ . False ➔ P = Λ P : ★ . λ f : False . f ·P.

not : Π A : ★ . ★ = λ A : ★ . A ➔ False.

app_cons_not_nil : ∀ A : ★ . Π x : list ·A . Π y : list ·A . Π a : A . not ·(eq ·(list ·A) (nil ·A) (app ·A x (cons ·A a y))) = Λ A : ★ . λ x : list ·A . σ x @(λ l : list ·A . Π y : list ·A . Π a : A . eq ·(list ·A) (nil ·A) (app ·A l (cons ·A a y)) ➔ False) {
  | nil ➔ λ y : list ·A . λ a : A . λ H : eq ·(list ·A) (nil ·A) (cons ·A a y) . δ - ( σ H @(λ x : list ·A . λ _ : eq ·(list ·A) (nil ·A) x . { nil ·A ≃ x }) {
  | eq_refl ➔ β 
 }) 
  | cons a l ➔ λ y : list ·A . λ a0 : A . λ H : eq ·(list ·A) (nil ·A) (cons ·A a (app ·A l (cons ·A a0 y))) . δ - ( σ H @(λ x : list ·A . λ _ : eq ·(list ·A) (nil ·A) x . { nil ·A ≃ x }) {
  | eq_refl ➔ β 
 }) 
 }.

eq_sym : ∀ A : ★ . Π x : A . Π y : A . eq ·A x y ➔ eq ·A y x = Λ A : ★ . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·A y' x) {
  | eq_refl ➔ eq_refl ·A x 
 }.

app_inj_tail : ∀ A : ★ . Π x : list ·A . Π y : list ·A . Π a : A . Π b : A . eq ·(list ·A) (app ·A x (cons ·A a (nil ·A))) (app ·A y (cons ·A b (nil ·A))) ➔ and ·(eq ·(list ·A) x y) ·(eq ·A a b) = Λ A : ★ . λ x : list ·A . list_ind ·A (λ x' : list ·A . tprodT?) (λ y : list ·A . σ y @(λ l : list ·A . Π a : A . Π b : A . eq ·(list ·A) (app ·A (nil ·A) (cons ·A a (nil ·A))) (app ·A l (cons ·A b (nil ·A))) ➔ and ·(eq ·(list ·A) (nil ·A) l) ·(eq ·A a b)) {
  | nil ➔ λ a : A . λ b : A . λ H : eq ·(list ·A) (cons ·A a (nil ·A)) (cons ·A b (nil ·A)) . conj ·(eq ·(list ·A) (nil ·A) (nil ·A)) ·(eq ·A a b) (eq_refl ·(list ·A) (nil ·A)) (f_equal ·(list ·A) ·A (λ e : list ·A . σ e @(λ l : list ·A . A) {
  | nil ➔ a 
  | cons a' l ➔ a' 
 }) (cons ·A a (nil ·A)) (cons ·A b (nil ·A)) H) 
  | cons a l ➔ λ a0 : A . λ b : A . λ H : eq ·(list ·A) (cons ·A a0 (nil ·A)) (cons ·A a (app ·A l (cons ·A b (nil ·A)))) . σ app_cons_not_nil ·A l (nil ·A) b (f_equal ·(list ·A) ·(list ·A) (λ e : list ·A . σ e @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a' l' ➔ l' 
 }) (cons ·A a0 (nil ·A)) (cons ·A a (app ·A l (cons ·A b (nil ·A)))) H) @(λ _ : False . and ·(eq ·(list ·A) (nil ·A) (cons ·A a l)) ·(eq ·A a0 b)) {

 } 
 }) (λ x' : A . λ l : list ·A . λ IHl : Π y : list ·A . Π a : A . Π b : A . eq ·(list ·A) (app ·A l (cons ·A a (nil ·A))) (app ·A y (cons ·A b (nil ·A))) ➔ and ·(eq ·(list ·A) l y) ·(eq ·A a b) . λ y : list ·A . σ y @(λ l' : list ·A . Π a : A . Π b : A . eq ·(list ·A) (app ·A (cons ·A x' l) (cons ·A a (nil ·A))) (app ·A l' (cons ·A b (nil ·A))) ➔ and ·(eq ·(list ·A) (cons ·A x' l) l') ·(eq ·A a b)) {
  | nil ➔ λ a : A . λ b : A . λ H : eq ·(list ·A) (cons ·A x' (app ·A l (cons ·A a (nil ·A)))) (cons ·A b (nil ·A)) . σ app_cons_not_nil ·A l (nil ·A) a (eq_sym ·(list ·A) (app ·A l (cons ·A a (nil ·A))) (nil ·A) (f_equal ·(list ·A) ·(list ·A) (λ e : list ·A . σ e @(λ l' : list ·A . list ·A) {
  | nil ➔ (λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a' l1 ➔ λ m . cons ·A a' (app l1 m) 
 } m) l (cons ·A a (nil ·A)) 
  | cons a' l' ➔ l' 
 }) (cons ·A x' (app ·A l (cons ·A a (nil ·A)))) (cons ·A b (nil ·A)) H)) @(λ _ : False . and ·(eq ·(list ·A) (cons ·A x' l) (nil ·A)) ·(eq ·A a b)) {

 } 
  | cons a l0 ➔ λ a0 : A . λ b : A . λ H : eq ·(list ·A) (cons ·A x' (app ·A l (cons ·A a0 (nil ·A)))) (cons ·A a (app ·A l0 (cons ·A b (nil ·A)))) . eq_ind ·A x' (λ a' : A . tprodT?) (λ H' : eq ·(list ·A) (cons ·A x' (app ·A l (cons ·A a0 (nil ·A)))) (cons ·A x' (app ·A l0 (cons ·A b (nil ·A)))) . λ H0 : eq ·(list ·A) (app ·A l (cons ·A a0 (nil ·A))) (app ·A l0 (cons ·A b (nil ·A))) . σ IHl l0 a0 b H0 @(λ _ : and ·(eq ·(list ·A) l l0) ·(eq ·A a0 b) . and ·(eq ·(list ·A) (cons ·A x' l) (cons ·A x' l0)) ·(eq ·A a0 b)) {
  | conj H' ➔ eq_ind ·(list ·A) l (λ l0' : list ·A . tprodT?) (λ H0' : eq ·(list ·A) (app ·A l (cons ·A a0 (nil ·A))) (app ·A l (cons ·A b (nil ·A))) . λ H' : eq ·A a0 b . eq_ind ·A a0 (λ b' : A . tprodT?) (λ H0' : eq ·(list ·A) (app ·A l (cons ·A a0 (nil ·A))) (app ·A l (cons ·A a0 (nil ·A))) . conj ·(eq ·(list ·A) (cons ·A x' l) (cons ·A x' l)) ·(eq ·A a0 a0) (eq_refl ·(list ·A) (cons ·A x' l)) (eq_refl ·A a0)) b H' H0') l0 H' H0 
 }) a (f_equal ·(list ·A) ·A (λ e : list ·A . σ e @(λ l' : list ·A . A) {
  | nil ➔ x' 
  | cons a' l' ➔ a' 
 }) (cons ·A x' (app ·A l (cons ·A a0 (nil ·A)))) (cons ·A a (app ·A l0 (cons ·A b (nil ·A)))) H) H (f_equal ·(list ·A) ·(list ·A) (λ e : list ·A . σ e @(λ l' : list ·A . list ·A) {
  | nil ➔ (λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a' l1 ➔ λ m . cons ·A a' (app l1 m) 
 } m) l (cons ·A a0 (nil ·A)) 
  | cons a' l' ➔ l' 
 }) (cons ·A x' (app ·A l (cons ·A a0 (nil ·A)))) (cons ·A a (app ·A l0 (cons ·A b (nil ·A)))) H) 
 }) x.



module test.
data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

app : ∀ A : ★ . list ·A ➔ list ·A ➔ list ·A = Λ A : ★ . λ l : list ·A . λ m : list ·A . μ app. l @(λ l : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ _ . m 
  | cons a l1 ➔ λ _ . cons ·A a (app l1 m) 
 } m.

flat_map : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ list ·B . Π l : list ·A . list ·B = Λ A : ★ . Λ B : ★ . λ f : A ➔ list ·B . λ l : list ·A . μ flat_map. l @(λ l : list ·A . list ·B) {
  | nil ➔ nil ·B 
  | cons x t ➔ app ·B (f x) (flat_map t) 
 }.



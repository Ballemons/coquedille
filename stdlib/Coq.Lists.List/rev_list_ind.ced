module test.
data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

app : ∀ A : ★ . list ·A ➔ list ·A ➔ list ·A = Λ A : ★ . λ l : list ·A . λ m : list ·A . μ app. l @(λ l : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ _ . m 
  | cons a l1 ➔ λ _ . cons ·A a (app l1 m) 
 } m.

rev : ∀ A : ★ . Π l : list ·A . list ·A = Λ A : ★ . λ l : list ·A . μ rev. l @(λ l : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ app ·A (rev l') (cons ·A x (nil ·A)) 
 }.

list_ind : ∀ A : ★ . ∀ P : Π l : list ·A . ★ . Π f : P (nil ·A) . Π f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . Π l : list ·A . P l = Λ A : ★ . Λ P : Π l : list ·A . ★ . λ f : P (nil ·A) . λ f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . λ l : list ·A . μ F. l @(λ l : list ·A . P l) {
  | nil ➔ f 
  | cons y l' ➔ f' y (to/list -isType/F l') (F l') 
 }.

rev_list_ind : ∀ A : ★ . ∀ P : list ·A ➔ ★ . Π H : P (nil ·A) . Π H0 : Π a : A . Π l : list ·A . P (rev ·A l) ➔ P (rev ·A (cons ·A a l)) . Π l : list ·A . P (rev ·A l) = Λ A : ★ . Λ P : list ·A ➔ ★ . λ H : P (nil ·A) . λ H0 : Π a : A . Π l : list ·A . P (rev ·A l) ➔ P (rev ·A (cons ·A a l)) . λ l : list ·A . list_ind ·A ·(λ l' : list ·A . P (rev ·A l')) H (λ a : A . λ l' : list ·A . λ IHl : P (rev ·A l') . H0 a l' IHl) l.



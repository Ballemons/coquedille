module test.
data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

data le (n : nat) : nat ➔ ★ =
  | le_n : le n
  | le_S : Π m : nat . le m ➔ le (S m).

length : ∀ A : ★ . list ·A ➔ nat = Λ A : ★ . λ l : list ·A . μ length. l @(λ l : list ·A . nat) {
  | nil ➔ O 
  | cons a l' ➔ S (length l') 
 }.

lel : Π A : ★ . Π l : list ·A . Π m : list ·A . ★ = λ A : ★ . λ l : list ·A . λ m : list ·A . le (length ·A l) (length ·A m).

lel_cons : ∀ A : ★ . Π b : A . Π l : list ·A . Π m : list ·A . lel ·A l m ➔ lel ·A l (cons ·A b m) = Λ A : ★ . λ b : A . λ l : list ·A . λ m : list ·A . λ H : le (length ·A l) (length ·A m) . le_S (length ·A l) (length ·A m) H.



module test.
data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

list_ind : ∀ A : ★ . ∀ P : Π l : list ·A . ★ . Π f : P (nil ·A) . Π f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . Π l : list ·A . P l = Λ A : ★ . Λ P : Π l : list ·A . ★ . λ f : P (nil ·A) . λ f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . λ l : list ·A . μ F. l @(λ l : list ·A . P l) {
  | nil ➔ f 
  | cons y l' ➔ f' y (to/list -isType/F l') (F l') 
 }.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

app : ∀ A : ★ . list ·A ➔ list ·A ➔ list ·A = Λ A : ★ . λ l : list ·A . λ m : list ·A . μ app. l @(λ l : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m.

f_equal : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π x : A . Π y : A . eq ·A x y ➔ eq ·B (f x) (f y) = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·B (f x) (f y')) {
  | eq_refl ➔ eq_refl ·B (f x) 
 }.

app_inv_head : ∀ A : ★ . Π l : list ·A . Π l1 : list ·A . Π l2 : list ·A . eq ·(list ·A) (app ·A l l1) (app ·A l l2) ➔ eq ·(list ·A) l1 l2 = Λ A : ★ . λ l : list ·A . list_ind ·A (λ l' : list ·A . tprodT?) (λ l1 : list ·A . λ l2 : list ·A . λ H : eq ·(list ·A) l1 l2 . H) (λ a : A . λ l' : list ·A . λ IHl : Π l1 : list ·A . Π l2 : list ·A . eq ·(list ·A) (app ·A l' l1) (app ·A l' l2) ➔ eq ·(list ·A) l1 l2 . λ l1 : list ·A . λ l2 : list ·A . λ H : eq ·(list ·A) (cons ·A a (app ·A l' l1)) (cons ·A a (app ·A l' l2)) . IHl l1 l2 (f_equal ·(list ·A) ·(list ·A) (λ e : list ·A . σ e @(λ l' : list ·A . list ·A) {
  | nil ➔ (λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a' l1' ➔ λ m . cons ·A a' (app l1' m) 
 } m) l' l1 
  | cons a' l' ➔ l' 
 }) (cons ·A a (app ·A l' l1)) (cons ·A a (app ·A l' l2)) H)) l.



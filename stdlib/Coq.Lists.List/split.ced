module test.
data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

data prod (A : ★) (B : ★) : ★ =
  | pair : A ➔ B ➔ prod.

split : ∀ A : ★ . ∀ B : ★ . Π l : list ·(prod ·A ·B) . prod ·(list ·A) ·(list ·B) = Λ A : ★ . Λ B : ★ . λ l : list ·(prod ·A ·B) . μ split. l @(λ l : list ·(prod ·A ·B) . prod ·(list ·A) ·(list ·B)) {
  | nil ➔ pair ·(list ·A) ·(list ·B) (nil ·A) (nil ·B) 
  | cons p tl ➔ σ p @(λ p' : prod ·A ·B . prod ·(list ·A) ·(list ·B)) {
  | pair x y ➔ σ split tl @(λ p' : prod ·(list ·A) ·(list ·B) . prod ·(list ·A) ·(list ·B)) {
  | pair left right ➔ pair ·(list ·A) ·(list ·B) (cons ·A x left) (cons ·B y right) 
 } 
 } 
 }.



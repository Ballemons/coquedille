module test.
data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

list_ind : ∀ A : ★ . ∀ P : Π l : list ·A . ★ . Π f : P (nil ·A) . Π f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . Π l : list ·A . P l = Λ A : ★ . Λ P : Π l : list ·A . ★ . λ f : P (nil ·A) . λ f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . λ l : list ·A . μ F. l @(λ l : list ·A . P l) {
  | nil ➔ f 
  | cons y l' ➔ f' y (to/list -isType/F l') (F l') 
 }.

map : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π l : list ·A . list ·B = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ l : list ·A . μ map. l @(λ l : list ·A . list ·B) {
  | nil ➔ nil ·B 
  | cons a t ➔ cons ·B (f a) (map t) 
 }.

app : ∀ A : ★ . list ·A ➔ list ·A ➔ list ·A = Λ A : ★ . λ l : list ·A . λ m : list ·A . μ app. l @(λ l : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m.

eq_ind : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . Π f : P x . Π y : A . Π e : eq ·A x y . P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ f : P x . λ y : A . λ e : eq ·A x y . σ e @(λ y' : A . λ _ : eq ·A x y' . P y') {
  | eq_refl ➔ f 
 }.

eq_sym : ∀ A : ★ . Π x : A . Π y : A . eq ·A x y ➔ eq ·A y x = Λ A : ★ . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·A y' x) {
  | eq_refl ➔ eq_refl ·A x 
 }.

eq_ind_r : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . P x ➔ Π y : A . eq ·A y x ➔ P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ H : P x . λ y : A . λ H0 : eq ·A y x . eq_ind ·A x ·(λ y' : A . P y') H y (eq_sym ·A y x H0).

map_app : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π l : list ·A . Π l' : list ·A . eq ·(list ·B) (map ·A ·B f (app ·A l l')) (app ·B (map ·A ·B f l) (map ·A ·B f l')) = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ l : list ·A . list_ind ·A (λ l' : list ·A . tprodT?) (λ l' : list ·A . eq_refl ·(list ·B) (map ·A ·B f l')) (λ a : A . λ l' : list ·A . λ IHl : Π l'' : list ·A . eq ·(list ·B) (map ·A ·B f (app ·A l' l'')) (app ·B (map ·A ·B f l') (map ·A ·B f l'')) . λ l'' : list ·A . eq_ind_r ·(list ·B) (app ·B (map ·A ·B f l') (map ·A ·B f l'')) ·(λ l' : list ·B . eq ·(list ·B) (cons ·B (f a) l') (cons ·B (f a) (app ·B (map ·A ·B f l') (map ·A ·B f l'')))) (eq_refl ·(list ·B) (cons ·B (f a) (app ·B (map ·A ·B f l') (map ·A ·B f l'')))) (map ·A ·B f (app ·A l' l'')) (IHl l'')) l.

concat_map : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π l : list ·(list ·A) . eq ·(list ·B) ((λ l' : list ·A . μ map. l' @(λ l' : list ·A . list ·B) {
  | nil ➔ nil ·B 
  | cons a t ➔ cons ·B (f a) (map t) 
 }) ((λ l' : list ·(list ·A) . μ concat. l' @(λ l' : list ·(list ·A) . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ (λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) x (concat l') 
 }) l)) ((λ l' : list ·(list ·B) . μ concat. l' @(λ l' : list ·(list ·B) . list ·B) {
  | nil ➔ nil ·B 
  | cons x l' ➔ (λ l' : list ·B . λ m : list ·B . μ app. l' @(λ l' : list ·B . Π m : list ·B . list ·B) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·B a (app l1 m) 
 } m) x (concat l') 
 }) ((λ l' : list ·(list ·A) . μ map. l' @(λ l' : list ·(list ·A) . list ·(list ·B)) {
  | nil ➔ nil ·(list ·B) 
  | cons a t ➔ cons ·(list ·B) ((λ l' : list ·A . μ map. l' @(λ l' : list ·A . list ·B) {
  | nil ➔ nil ·B 
  | cons a' t' ➔ cons ·B (f a') (map t') 
 }) a) (map t) 
 }) l)) = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ l : list ·(list ·A) . (λ l' : list ·(list ·A) . μ F. l' @(λ l' : list ·(list ·A) . eq ·(list ·B) ((λ l' : list ·A . μ map. l' @(λ l' : list ·A . list ·B) {
  | nil ➔ nil ·B 
  | cons a t ➔ cons ·B (f a) (map t) 
 }) ((λ l' : list ·(list ·A) . μ concat. l' @(λ l' : list ·(list ·A) . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ (λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) x (concat l') 
 }) l')) ((λ l' : list ·(list ·B) . μ concat. l' @(λ l' : list ·(list ·B) . list ·B) {
  | nil ➔ nil ·B 
  | cons x l' ➔ (λ l' : list ·B . λ m : list ·B . μ app. l' @(λ l' : list ·B . Π m : list ·B . list ·B) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·B a (app l1 m) 
 } m) x (concat l') 
 }) ((λ l' : list ·(list ·A) . μ map. l' @(λ l' : list ·(list ·A) . list ·(list ·B)) {
  | nil ➔ nil ·(list ·B) 
  | cons a t ➔ cons ·(list ·B) ((λ l' : list ·A . μ map. l' @(λ l' : list ·A . list ·B) {
  | nil ➔ nil ·B 
  | cons a' t' ➔ cons ·B (f a') (map t') 
 }) a) (map t) 
 }) l'))) {
  | nil ➔ eq_refl ·(list ·B) (nil ·B) 
  | cons y l' ➔ σ σ map_app ·A ·B f y ((λ l' : list ·(list ·A) . μ concat. l' @(λ l' : list ·(list ·A) . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ (λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) x (concat l') 
 }) l') @(λ y' : list ·B . λ _ : eq ·(list ·B) ((λ l' : list ·A . μ map. l' @(λ l' : list ·A . list ·B) {
  | nil ➔ nil ·B 
  | cons a t ➔ cons ·B (f a) (map t) 
 }) ((λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) y ((λ l' : list ·(list ·A) . μ concat. l' @(λ l' : list ·(list ·A) . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ (λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) x (concat l') 
 }) l'))) y' . eq ·(list ·B) y' ((λ l' : list ·A . μ map. l' @(λ l' : list ·A . list ·B) {
  | nil ➔ nil ·B 
  | cons a t ➔ cons ·B (f a) (map t) 
 }) ((λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) y ((λ l' : list ·(list ·A) . μ concat. l' @(λ l' : list ·(list ·A) . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ (λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) x (concat l') 
 }) l')))) {
  | eq_refl ➔ eq_refl ·(list ·B) ((λ l' : list ·A . μ map. l' @(λ l' : list ·A . list ·B) {
  | nil ➔ nil ·B 
  | cons a t ➔ cons ·B (f a) (map t) 
 }) ((λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) y ((λ l' : list ·(list ·A) . μ concat. l' @(λ l' : list ·(list ·A) . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ (λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) x (concat l') 
 }) l'))) 
 } @(λ y' : list ·B . λ _ : eq ·(list ·B) ((λ l' : list ·B . λ m : list ·B . μ app. l' @(λ l' : list ·B . Π m : list ·B . list ·B) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·B a (app l1 m) 
 } m) ((λ l' : list ·A . μ map. l' @(λ l' : list ·A . list ·B) {
  | nil ➔ nil ·B 
  | cons a t ➔ cons ·B (f a) (map t) 
 }) y) ((λ l' : list ·A . μ map. l' @(λ l' : list ·A . list ·B) {
  | nil ➔ nil ·B 
  | cons a t ➔ cons ·B (f a) (map t) 
 }) ((λ l' : list ·(list ·A) . μ concat. l' @(λ l' : list ·(list ·A) . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ (λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) x (concat l') 
 }) l'))) y' . eq ·(list ·B) y' ((λ l' : list ·B . λ m : list ·B . μ app. l' @(λ l' : list ·B . Π m : list ·B . list ·B) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·B a (app l1 m) 
 } m) ((λ l' : list ·A . μ map. l' @(λ l' : list ·A . list ·B) {
  | nil ➔ nil ·B 
  | cons a t ➔ cons ·B (f a) (map t) 
 }) y) ((λ l' : list ·(list ·B) . μ concat. l' @(λ l' : list ·(list ·B) . list ·B) {
  | nil ➔ nil ·B 
  | cons x l' ➔ (λ l' : list ·B . λ m : list ·B . μ app. l' @(λ l' : list ·B . Π m : list ·B . list ·B) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·B a (app l1 m) 
 } m) x (concat l') 
 }) ((λ l' : list ·(list ·A) . μ map. l' @(λ l' : list ·(list ·A) . list ·(list ·B)) {
  | nil ➔ nil ·(list ·B) 
  | cons a t ➔ cons ·(list ·B) ((λ l' : list ·A . μ map. l' @(λ l' : list ·A . list ·B) {
  | nil ➔ nil ·B 
  | cons a' t' ➔ cons ·B (f a') (map t') 
 }) a) (map t) 
 }) l')))) {
  | eq_refl ➔ σ σ F l' @(λ y' : list ·B . λ _ : eq ·(list ·B) ((λ l' : list ·A . μ map. l' @(λ l' : list ·A . list ·B) {
  | nil ➔ nil ·B 
  | cons a t ➔ cons ·B (f a) (map t) 
 }) ((λ l' : list ·(list ·A) . μ concat. l' @(λ l' : list ·(list ·A) . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ (λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) x (concat l') 
 }) l')) y' . eq ·(list ·B) y' ((λ l' : list ·A . μ map. l' @(λ l' : list ·A . list ·B) {
  | nil ➔ nil ·B 
  | cons a t ➔ cons ·B (f a) (map t) 
 }) ((λ l' : list ·(list ·A) . μ concat. l' @(λ l' : list ·(list ·A) . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ (λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) x (concat l') 
 }) l'))) {
  | eq_refl ➔ eq_refl ·(list ·B) ((λ l' : list ·A . μ map. l' @(λ l' : list ·A . list ·B) {
  | nil ➔ nil ·B 
  | cons a t ➔ cons ·B (f a) (map t) 
 }) ((λ l' : list ·(list ·A) . μ concat. l' @(λ l' : list ·(list ·A) . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ (λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) x (concat l') 
 }) l')) 
 } @(λ y' : list ·B . λ _ : eq ·(list ·B) ((λ l' : list ·(list ·B) . μ concat. l' @(λ l' : list ·(list ·B) . list ·B) {
  | nil ➔ nil ·B 
  | cons x l' ➔ (λ l' : list ·B . λ m : list ·B . μ app. l' @(λ l' : list ·B . Π m : list ·B . list ·B) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·B a (app l1 m) 
 } m) x (concat l') 
 }) ((λ l' : list ·(list ·A) . μ map. l' @(λ l' : list ·(list ·A) . list ·(list ·B)) {
  | nil ➔ nil ·(list ·B) 
  | cons a t ➔ cons ·(list ·B) ((λ l' : list ·A . μ map. l' @(λ l' : list ·A . list ·B) {
  | nil ➔ nil ·B 
  | cons a' t' ➔ cons ·B (f a') (map t') 
 }) a) (map t) 
 }) l')) y' . eq ·(list ·B) ((λ l' : list ·B . λ m : list ·B . μ app. l' @(λ l' : list ·B . Π m : list ·B . list ·B) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·B a (app l1 m) 
 } m) ((λ l' : list ·A . μ map. l' @(λ l' : list ·A . list ·B) {
  | nil ➔ nil ·B 
  | cons a t ➔ cons ·B (f a) (map t) 
 }) y) y') ((λ l' : list ·B . λ m : list ·B . μ app. l' @(λ l' : list ·B . Π m : list ·B . list ·B) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·B a (app l1 m) 
 } m) ((λ l' : list ·A . μ map. l' @(λ l' : list ·A . list ·B) {
  | nil ➔ nil ·B 
  | cons a t ➔ cons ·B (f a) (map t) 
 }) y) ((λ l' : list ·(list ·B) . μ concat. l' @(λ l' : list ·(list ·B) . list ·B) {
  | nil ➔ nil ·B 
  | cons x l' ➔ (λ l' : list ·B . λ m : list ·B . μ app. l' @(λ l' : list ·B . Π m : list ·B . list ·B) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·B a (app l1 m) 
 } m) x (concat l') 
 }) ((λ l' : list ·(list ·A) . μ map. l' @(λ l' : list ·(list ·A) . list ·(list ·B)) {
  | nil ➔ nil ·(list ·B) 
  | cons a t ➔ cons ·(list ·B) ((λ l' : list ·A . μ map. l' @(λ l' : list ·A . list ·B) {
  | nil ➔ nil ·B 
  | cons a' t' ➔ cons ·B (f a') (map t') 
 }) a) (map t) 
 }) l')))) {
  | eq_refl ➔ eq_refl ·(list ·B) ((λ l' : list ·B . λ m : list ·B . μ app. l' @(λ l' : list ·B . Π m : list ·B . list ·B) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·B a (app l1 m) 
 } m) ((λ l' : list ·A . μ map. l' @(λ l' : list ·A . list ·B) {
  | nil ➔ nil ·B 
  | cons a t ➔ cons ·B (f a) (map t) 
 }) y) ((λ l' : list ·(list ·B) . μ concat. l' @(λ l' : list ·(list ·B) . list ·B) {
  | nil ➔ nil ·B 
  | cons x l' ➔ (λ l' : list ·B . λ m : list ·B . μ app. l' @(λ l' : list ·B . Π m : list ·B . list ·B) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·B a (app l1 m) 
 } m) x (concat l') 
 }) ((λ l' : list ·(list ·A) . μ map. l' @(λ l' : list ·(list ·A) . list ·(list ·B)) {
  | nil ➔ nil ·(list ·B) 
  | cons a t ➔ cons ·(list ·B) ((λ l' : list ·A . μ map. l' @(λ l' : list ·A . list ·B) {
  | nil ➔ nil ·B 
  | cons a' t' ➔ cons ·B (f a') (map t') 
 }) a) (map t) 
 }) l'))) 
 } 
 } 
 }) l.



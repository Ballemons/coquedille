module test.
data bool : ★ =
  | true : bool
  | false : bool.

data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

filter_app : ∀ A : ★ . Π f : A ➔ bool . Π l : list ·A . Π l' : list ·A . eq ·(list ·A) ((λ l' : list ·A . μ filter. l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ σ f x @(λ _ : bool . list ·A) {
  | true ➔ cons ·A x (filter l') 
  | false ➔ filter l' 
 } 
 }) ((λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) l l')) ((λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) ((λ l' : list ·A . μ filter. l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ σ f x @(λ _ : bool . list ·A) {
  | true ➔ cons ·A x (filter l') 
  | false ➔ filter l' 
 } 
 }) l) ((λ l' : list ·A . μ filter. l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ σ f x @(λ _ : bool . list ·A) {
  | true ➔ cons ·A x (filter l') 
  | false ➔ filter l' 
 } 
 }) l')) = Λ A : ★ . λ f : A ➔ bool . λ l : list ·A . λ l' : list ·A . (λ l' : list ·A . μ F. l' @(λ l' : list ·A . eq ·(list ·A) ((λ l' : list ·A . μ filter. l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ σ f x @(λ _ : bool . list ·A) {
  | true ➔ cons ·A x (filter l') 
  | false ➔ filter l' 
 } 
 }) ((λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) l' l')) ((λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) ((λ l' : list ·A . μ filter. l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ σ f x @(λ _ : bool . list ·A) {
  | true ➔ cons ·A x (filter l') 
  | false ➔ filter l' 
 } 
 }) l') ((λ l' : list ·A . μ filter. l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ σ f x @(λ _ : bool . list ·A) {
  | true ➔ cons ·A x (filter l') 
  | false ➔ filter l' 
 } 
 }) l'))) {
  | nil ➔ eq_refl ·(list ·A) ((λ l' : list ·A . μ filter. l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ σ f x @(λ _ : bool . list ·A) {
  | true ➔ cons ·A x (filter l') 
  | false ➔ filter l' 
 } 
 }) l') 
  | cons y l' ➔ σ f y @(λ b : bool . eq ·(list ·A) σ b @(λ _ : bool . list ·A) {
  | true ➔ cons ·A y ((λ l' : list ·A . μ filter. l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ σ f x @(λ _ : bool . list ·A) {
  | true ➔ cons ·A x (filter l') 
  | false ➔ filter l' 
 } 
 }) ((λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) l' l')) 
  | false ➔ (λ l' : list ·A . μ filter. l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ σ f x @(λ _ : bool . list ·A) {
  | true ➔ cons ·A x (filter l') 
  | false ➔ filter l' 
 } 
 }) ((λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) l' l') 
 } ((λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) σ b @(λ _ : bool . list ·A) {
  | true ➔ cons ·A y ((λ l' : list ·A . μ filter. l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ σ f x @(λ _ : bool . list ·A) {
  | true ➔ cons ·A x (filter l') 
  | false ➔ filter l' 
 } 
 }) l') 
  | false ➔ (λ l' : list ·A . μ filter. l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ σ f x @(λ _ : bool . list ·A) {
  | true ➔ cons ·A x (filter l') 
  | false ➔ filter l' 
 } 
 }) l' 
 } ((λ l' : list ·A . μ filter. l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ σ f x @(λ _ : bool . list ·A) {
  | true ➔ cons ·A x (filter l') 
  | false ➔ filter l' 
 } 
 }) l'))) {
  | true ➔ σ σ F l' @(λ y' : list ·A . λ _ : eq ·(list ·A) ((λ l' : list ·A . μ filter. l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ σ f x @(λ _ : bool . list ·A) {
  | true ➔ cons ·A x (filter l') 
  | false ➔ filter l' 
 } 
 }) ((λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) l' l')) y' . eq ·(list ·A) y' ((λ l' : list ·A . μ filter. l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ σ f x @(λ _ : bool . list ·A) {
  | true ➔ cons ·A x (filter l') 
  | false ➔ filter l' 
 } 
 }) ((λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) l' l'))) {
  | eq_refl ➔ eq_refl ·(list ·A) ((λ l' : list ·A . μ filter. l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ σ f x @(λ _ : bool . list ·A) {
  | true ➔ cons ·A x (filter l') 
  | false ➔ filter l' 
 } 
 }) ((λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) l' l')) 
 } @(λ y' : list ·A . λ _ : eq ·(list ·A) ((λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) ((λ l' : list ·A . μ filter. l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ σ f x @(λ _ : bool . list ·A) {
  | true ➔ cons ·A x (filter l') 
  | false ➔ filter l' 
 } 
 }) l') ((λ l' : list ·A . μ filter. l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ σ f x @(λ _ : bool . list ·A) {
  | true ➔ cons ·A x (filter l') 
  | false ➔ filter l' 
 } 
 }) l')) y' . eq ·(list ·A) (cons ·A y y') (cons ·A y ((λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) ((λ l' : list ·A . μ filter. l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ σ f x @(λ _ : bool . list ·A) {
  | true ➔ cons ·A x (filter l') 
  | false ➔ filter l' 
 } 
 }) l') ((λ l' : list ·A . μ filter. l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ σ f x @(λ _ : bool . list ·A) {
  | true ➔ cons ·A x (filter l') 
  | false ➔ filter l' 
 } 
 }) l')))) {
  | eq_refl ➔ eq_refl ·(list ·A) (cons ·A y ((λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) ((λ l' : list ·A . μ filter. l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ σ f x @(λ _ : bool . list ·A) {
  | true ➔ cons ·A x (filter l') 
  | false ➔ filter l' 
 } 
 }) l') ((λ l' : list ·A . μ filter. l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ σ f x @(λ _ : bool . list ·A) {
  | true ➔ cons ·A x (filter l') 
  | false ➔ filter l' 
 } 
 }) l'))) 
 } 
  | false ➔ σ σ F l' @(λ y' : list ·A . λ _ : eq ·(list ·A) ((λ l' : list ·A . μ filter. l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ σ f x @(λ _ : bool . list ·A) {
  | true ➔ cons ·A x (filter l') 
  | false ➔ filter l' 
 } 
 }) ((λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) l' l')) y' . eq ·(list ·A) y' ((λ l' : list ·A . μ filter. l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ σ f x @(λ _ : bool . list ·A) {
  | true ➔ cons ·A x (filter l') 
  | false ➔ filter l' 
 } 
 }) ((λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) l' l'))) {
  | eq_refl ➔ eq_refl ·(list ·A) ((λ l' : list ·A . μ filter. l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ σ f x @(λ _ : bool . list ·A) {
  | true ➔ cons ·A x (filter l') 
  | false ➔ filter l' 
 } 
 }) ((λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) l' l')) 
 } @(λ y' : list ·A . λ _ : eq ·(list ·A) ((λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) ((λ l' : list ·A . μ filter. l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ σ f x @(λ _ : bool . list ·A) {
  | true ➔ cons ·A x (filter l') 
  | false ➔ filter l' 
 } 
 }) l') ((λ l' : list ·A . μ filter. l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ σ f x @(λ _ : bool . list ·A) {
  | true ➔ cons ·A x (filter l') 
  | false ➔ filter l' 
 } 
 }) l')) y' . eq ·(list ·A) y' ((λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) ((λ l' : list ·A . μ filter. l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ σ f x @(λ _ : bool . list ·A) {
  | true ➔ cons ·A x (filter l') 
  | false ➔ filter l' 
 } 
 }) l') ((λ l' : list ·A . μ filter. l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ σ f x @(λ _ : bool . list ·A) {
  | true ➔ cons ·A x (filter l') 
  | false ➔ filter l' 
 } 
 }) l'))) {
  | eq_refl ➔ eq_refl ·(list ·A) ((λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m) ((λ l' : list ·A . μ filter. l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ σ f x @(λ _ : bool . list ·A) {
  | true ➔ cons ·A x (filter l') 
  | false ➔ filter l' 
 } 
 }) l') ((λ l' : list ·A . μ filter. l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ σ f x @(λ _ : bool . list ·A) {
  | true ➔ cons ·A x (filter l') 
  | false ➔ filter l' 
 } 
 }) l')) 
 } 
 } 
 }) l.



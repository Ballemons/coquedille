module test.
data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

data Add (A : ★) (a : A) : list ·A ➔ list ·A ➔ ★ =
  | Add_head : Π l : list ·A . Add l (cons ·A a l)
  | Add_cons : Π x : A . Π l : list ·A . Π l' : list ·A . Add l l' ➔ Add (cons ·A x l) (cons ·A x l').

Add_ind : ∀ A : ★ . Π a : A . ∀ P : list ·A ➔ list ·A ➔ ★ . Π f : Π l : list ·A . P l (cons ·A a l) . Π f' : Π x : A . Π l : list ·A . Π l' : list ·A . Add ·A a l l' ➔ P l l' ➔ P (cons ·A x l) (cons ·A x l') . Π l : list ·A . Π l' : list ·A . Π a' : Add ·A a l l' . P l l' = Λ A : ★ . λ a : A . Λ P : list ·A ➔ list ·A ➔ ★ . λ f : Π l : list ·A . P l (cons ·A a l) . λ f' : Π x : A . Π l : list ·A . Π l' : list ·A . Add ·A a l l' ➔ P l l' ➔ P (cons ·A x l) (cons ·A x l') . λ l : list ·A . λ l' : list ·A . λ a' : Add ·A a l l' . μ F. a' @(λ l : list ·A . λ l' : list ·A . λ a' : Add ·A a l l' . P l l') {
  | Add_head l' ➔ f l' 
  | Add_cons x l' l'' a' ➔ f' x l' l'' a' (F -l' -l'' a') 
 }.



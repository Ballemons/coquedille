module test.
data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

skipn_app : ∀ A : ★ . Π n : nat . Π l1 : list ·A . Π l2 : list ·A . eq ·(list ·A) ((λ n' : nat . λ l : list ·A . μ skipn. n' @(λ n' : nat . Π l : list ·A . list ·A) {
  | O ➔ λ l . l 
  | S n' ➔ λ l . σ l @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a l' ➔ skipn n' l' 
 } 
 } l) n ((λ l : list ·A . λ m : list ·A . μ app. l @(λ l : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1' ➔ λ m . cons ·A a (app l1' m) 
 } m) l1 l2)) ((λ l : list ·A . λ m : list ·A . μ app. l @(λ l : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1' ➔ λ m . cons ·A a (app l1' m) 
 } m) ((λ n' : nat . λ l : list ·A . μ skipn. n' @(λ n' : nat . Π l : list ·A . list ·A) {
  | O ➔ λ l . l 
  | S n' ➔ λ l . σ l @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a l' ➔ skipn n' l' 
 } 
 } l) n l1) ((λ n' : nat . λ l : list ·A . μ skipn. n' @(λ n' : nat . Π l : list ·A . list ·A) {
  | O ➔ λ l . l 
  | S n' ➔ λ l . σ l @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a l' ➔ skipn n' l' 
 } 
 } l) ((λ n' : nat . λ m : nat . μ sub. n' @(λ n' : nat . Π m : nat . nat) {
  | O ➔ λ m . n' 
  | S k ➔ λ m . σ m @(λ m' : nat . nat) {
  | O ➔ n' 
  | S l ➔ sub k l 
 } 
 } m) n ((λ l : list ·A . μ length. l @(λ l : list ·A . nat) {
  | nil ➔ O 
  | cons a l' ➔ S (length l') 
 }) l1)) l2)) = Λ A : ★ . λ n : nat . (λ n' : nat . μ F. n' @(λ n' : nat . Π l1 : list ·A . Π l2 : list ·A . eq ·(list ·A) ((λ n' : nat . λ l : list ·A . μ skipn. n' @(λ n' : nat . Π l : list ·A . list ·A) {
  | O ➔ λ l . l 
  | S n' ➔ λ l . σ l @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a l' ➔ skipn n' l' 
 } 
 } l) n' ((λ l : list ·A . λ m : list ·A . μ app. l @(λ l : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1' ➔ λ m . cons ·A a (app l1' m) 
 } m) l1 l2)) ((λ l : list ·A . λ m : list ·A . μ app. l @(λ l : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1' ➔ λ m . cons ·A a (app l1' m) 
 } m) ((λ n' : nat . λ l : list ·A . μ skipn. n' @(λ n' : nat . Π l : list ·A . list ·A) {
  | O ➔ λ l . l 
  | S n' ➔ λ l . σ l @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a l' ➔ skipn n' l' 
 } 
 } l) n' l1) ((λ n' : nat . λ l : list ·A . μ skipn. n' @(λ n' : nat . Π l : list ·A . list ·A) {
  | O ➔ λ l . l 
  | S n' ➔ λ l . σ l @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a l' ➔ skipn n' l' 
 } 
 } l) ((λ n' : nat . λ m : nat . μ sub. n' @(λ n' : nat . Π m : nat . nat) {
  | O ➔ λ m . n' 
  | S k ➔ λ m . σ m @(λ m' : nat . nat) {
  | O ➔ n' 
  | S l ➔ sub k l 
 } 
 } m) n' ((λ l : list ·A . μ length. l @(λ l : list ·A . nat) {
  | nil ➔ O 
  | cons a l' ➔ S (length l') 
 }) l1)) l2))) {
  | O ➔ λ l1 . λ l2 . λ l1 : list ·A . λ l2 : list ·A . eq_refl ·(list ·A) ((λ l : list ·A . λ m : list ·A . μ app. l @(λ l : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1' ➔ λ m . cons ·A a (app l1' m) 
 } m) l1 l2) 
  | S n' ➔ λ l1 . λ l2 . λ l1 : list ·A . σ l1 @(λ l : list ·A . Π l2 : list ·A . eq ·(list ·A) σ (λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1' ➔ λ m . cons ·A a (app l1' m) 
 } m) l l2 @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a l' ➔ (λ n' : nat . λ l' : list ·A . μ skipn. n' @(λ n' : nat . Π l' : list ·A . list ·A) {
  | O ➔ λ l' . l' 
  | S n' ➔ λ l' . σ l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a' l' ➔ skipn n' l' 
 } 
 } l') n' l' 
 } ((λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1' ➔ λ m . cons ·A a (app l1' m) 
 } m) σ l @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a l' ➔ (λ n' : nat . λ l' : list ·A . μ skipn. n' @(λ n' : nat . Π l' : list ·A . list ·A) {
  | O ➔ λ l' . l' 
  | S n' ➔ λ l' . σ l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a' l' ➔ skipn n' l' 
 } 
 } l') n' l' 
 } ((λ n' : nat . λ l' : list ·A . μ skipn. n' @(λ n' : nat . Π l' : list ·A . list ·A) {
  | O ➔ λ l' . l' 
  | S n' ➔ λ l' . σ l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a l' ➔ skipn n' l' 
 } 
 } l') σ (λ l' : list ·A . μ length. l' @(λ l' : list ·A . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) l @(λ m : nat . nat) {
  | O ➔ S n' 
  | S l' ➔ (λ n' : nat . λ m : nat . μ sub. n' @(λ n' : nat . Π m : nat . nat) {
  | O ➔ λ m . n' 
  | S k ➔ λ m . σ m @(λ m' : nat . nat) {
  | O ➔ n' 
  | S l' ➔ sub k l' 
 } 
 } m) n' l' 
 } l2))) {
  | nil ➔ λ l2 : list ·A . eq_refl ·(list ·A) σ l2 @(λ l : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a l ➔ (λ n' : nat . λ l' : list ·A . μ skipn. n' @(λ n' : nat . Π l' : list ·A . list ·A) {
  | O ➔ λ l' . l' 
  | S n' ➔ λ l' . σ l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a' l' ➔ skipn n' l' 
 } 
 } l') n' l 
 } 
  | cons a l ➔ λ l2 : list ·A . F n' l l2 
 } 
 } l1 l2) n.



module test.
data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

data Forall (A : ★) (P : A ➔ ★) : list ·A ➔ ★ =
  | Forall_nil : Forall (nil ·A)
  | Forall_cons : Π x : A . Π l : list ·A . P x ➔ Forall l ➔ Forall (cons ·A x l).

data ForallOrdPairs (A : ★) (R : A ➔ A ➔ ★) : list ·A ➔ ★ =
  | FOP_nil : ForallOrdPairs (nil ·A)
  | FOP_cons : Π a : A . Π l : list ·A . Forall ·A ·(R a) l ➔ ForallOrdPairs l ➔ ForallOrdPairs (cons ·A a l).

ForallOrdPairs_ind : ∀ A : ★ . ∀ R : A ➔ A ➔ ★ . ∀ P : list ·A ➔ ★ . Π f : P (nil ·A) . Π f' : Π a : A . Π l : list ·A . Forall ·A ·(R a) l ➔ ForallOrdPairs ·A ·R l ➔ P l ➔ P (cons ·A a l) . Π l : list ·A . Π f' : ForallOrdPairs ·A ·R l . P l = Λ A : ★ . Λ R : A ➔ A ➔ ★ . Λ P : list ·A ➔ ★ . λ f : P (nil ·A) . λ f' : Π a : A . Π l : list ·A . Forall ·A ·(R a) l ➔ ForallOrdPairs ·A ·R l ➔ P l ➔ P (cons ·A a l) . λ l : list ·A . λ f' : ForallOrdPairs ·A ·R l . μ F. f' @(λ l : list ·A . λ f' : ForallOrdPairs ·A ·R l . P l) {
  | FOP_nil ➔ f 
  | FOP_cons a l' f' f' ➔ f' a l' f' f' (F -l' f') 
 }.



module test.
data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

data prod (A : ★) (B : ★) : ★ =
  | pair : A ➔ B ➔ prod.

list_ind : ∀ A : ★ . ∀ P : Π l : list ·A . ★ . Π f : P (nil ·A) . Π f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . Π l : list ·A . P l = Λ A : ★ . Λ P : Π l : list ·A . ★ . λ f : P (nil ·A) . λ f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . λ l : list ·A . μ F. l @(λ l : list ·A . P l) {
  | nil ➔ f 
  | cons y l' ➔ f' y (to/list -isType/F l') (F l') 
 }.

length : ∀ A : ★ . list ·A ➔ nat = Λ A : ★ . λ l : list ·A . μ length. l @(λ l : list ·A . nat) {
  | nil ➔ O 
  | cons a l' ➔ S (length l') 
 }.

app : ∀ A : ★ . list ·A ➔ list ·A ➔ list ·A = Λ A : ★ . λ l : list ·A . λ m : list ·A . μ app. l @(λ l : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m.

add : Π n : nat . Π m : nat . nat = λ n : nat . λ m : nat . μ add. n @(λ n : nat . Π m : nat . nat) {
  | O ➔ λ m . m 
  | S p ➔ λ m . S (add p m) 
 } m.

f_equal : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π x : A . Π y : A . eq ·A x y ➔ eq ·B (f x) (f y) = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·B (f x) (f y')) {
  | eq_refl ➔ eq_refl ·B (f x) 
 }.

f_equal_nat : ∀ B : ★ . Π f : nat ➔ B . Π x : nat . Π y : nat . eq ·nat x y ➔ eq ·B (f x) (f y) = f_equal ·nat.

app_length : ∀ A : ★ . Π l : list ·A . Π l' : list ·A . eq ·nat (length ·A (app ·A l l')) (add (length ·A l) (length ·A l')) = Λ A : ★ . λ l : list ·A . list_ind ·A (λ l' : list ·A . tprodT?) (λ l' : list ·A . eq_refl ·nat (length ·A l')) (λ a : A . λ l' : list ·A . λ IHl : Π l'' : list ·A . eq ·nat (length ·A (app ·A l' l'')) (add (length ·A l') (length ·A l'')) . λ l'' : list ·A . f_equal_nat ·nat S (length ·A (app ·A l' l'')) (add (length ·A l') (length ·A l'')) (IHl l'')) l.

map : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π l : list ·A . list ·B = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ l : list ·A . μ map. l @(λ l : list ·A . list ·B) {
  | nil ➔ nil ·B 
  | cons a t ➔ cons ·B (f a) (map t) 
 }.

map_length : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π l : list ·A . eq ·nat (length ·B (map ·A ·B f l)) (length ·A l) = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ l : list ·A . list_ind ·A ·(λ l' : list ·A . eq ·nat (length ·B (map ·A ·B f l')) (length ·A l')) (eq_refl ·nat O) (λ a : A . λ l' : list ·A . λ IHl : eq ·nat (length ·B (map ·A ·B f l')) (length ·A l') . f_equal_nat ·nat S (length ·B (map ·A ·B f l')) (length ·A l') IHl) l.

prod_length : ∀ A : ★ . ∀ B : ★ . Π l : list ·A . Π l' : list ·B . eq ·nat ((λ l' : list ·(prod ·A ·B) . μ length. l' @(λ l' : list ·(prod ·A ·B) . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) ((λ l' : list ·A . λ l'' : list ·B . μ list_prod. l' @(λ l' : list ·A . Π l'' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ λ l'' . nil ·(prod ·A ·B) 
  | cons x t ➔ λ l'' . (λ l' : list ·(prod ·A ·B) . λ m : list ·(prod ·A ·B) . μ app. l' @(λ l' : list ·(prod ·A ·B) . Π m : list ·(prod ·A ·B) . list ·(prod ·A ·B)) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·(prod ·A ·B) a (app l1 m) 
 } m) ((λ l' : list ·B . μ map. l' @(λ l' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ nil ·(prod ·A ·B) 
  | cons a t' ➔ cons ·(prod ·A ·B) (pair ·A ·B x a) (map t') 
 }) l'') (list_prod t l'') 
 } l'') l l')) ((λ n : nat . λ m : nat . μ mul. n @(λ n : nat . Π m : nat . nat) {
  | O ➔ λ m . O 
  | S p ➔ λ m . (λ n' : nat . λ m' : nat . μ add. n' @(λ n' : nat . Π m' : nat . nat) {
  | O ➔ λ m' . m' 
  | S p' ➔ λ m' . S (add p' m') 
 } m') m (mul p m) 
 } m) ((λ l' : list ·A . μ length. l' @(λ l' : list ·A . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) l) ((λ l' : list ·B . μ length. l' @(λ l' : list ·B . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) l')) = Λ A : ★ . Λ B : ★ . λ l : list ·A . (λ l' : list ·A . μ F. l' @(λ l' : list ·A . Π l'' : list ·B . eq ·nat ((λ l' : list ·(prod ·A ·B) . μ length. l' @(λ l' : list ·(prod ·A ·B) . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) ((λ l' : list ·A . λ l'' : list ·B . μ list_prod. l' @(λ l' : list ·A . Π l'' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ λ l'' . nil ·(prod ·A ·B) 
  | cons x t ➔ λ l'' . (λ l' : list ·(prod ·A ·B) . λ m : list ·(prod ·A ·B) . μ app. l' @(λ l' : list ·(prod ·A ·B) . Π m : list ·(prod ·A ·B) . list ·(prod ·A ·B)) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·(prod ·A ·B) a (app l1 m) 
 } m) ((λ l' : list ·B . μ map. l' @(λ l' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ nil ·(prod ·A ·B) 
  | cons a t' ➔ cons ·(prod ·A ·B) (pair ·A ·B x a) (map t') 
 }) l'') (list_prod t l'') 
 } l'') l' l'')) ((λ n : nat . λ m : nat . μ mul. n @(λ n : nat . Π m : nat . nat) {
  | O ➔ λ m . O 
  | S p ➔ λ m . (λ n' : nat . λ m' : nat . μ add. n' @(λ n' : nat . Π m' : nat . nat) {
  | O ➔ λ m' . m' 
  | S p' ➔ λ m' . S (add p' m') 
 } m') m (mul p m) 
 } m) ((λ l' : list ·A . μ length. l' @(λ l' : list ·A . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) l') ((λ l' : list ·B . μ length. l' @(λ l' : list ·B . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) l''))) {
  | nil ➔ λ l'' . λ l'' : list ·B . eq_refl ·nat O 
  | cons y l' ➔ λ l'' . λ l'' : list ·B . σ σ app_length ·(prod ·A ·B) ((λ l' : list ·B . μ map. l' @(λ l' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ nil ·(prod ·A ·B) 
  | cons a t ➔ cons ·(prod ·A ·B) (pair ·A ·B y a) (map t) 
 }) l'') ((λ l' : list ·A . λ l'' : list ·B . μ list_prod. l' @(λ l' : list ·A . Π l'' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ λ l'' . nil ·(prod ·A ·B) 
  | cons x t ➔ λ l'' . (λ l' : list ·(prod ·A ·B) . λ m : list ·(prod ·A ·B) . μ app. l' @(λ l' : list ·(prod ·A ·B) . Π m : list ·(prod ·A ·B) . list ·(prod ·A ·B)) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·(prod ·A ·B) a (app l1 m) 
 } m) ((λ l' : list ·B . μ map. l' @(λ l' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ nil ·(prod ·A ·B) 
  | cons a t' ➔ cons ·(prod ·A ·B) (pair ·A ·B x a) (map t') 
 }) l'') (list_prod t l'') 
 } l'') l' l'') @(λ y' : nat . λ _ : eq ·nat ((λ l' : list ·(prod ·A ·B) . μ length. l' @(λ l' : list ·(prod ·A ·B) . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) ((λ l' : list ·(prod ·A ·B) . λ m : list ·(prod ·A ·B) . μ app. l' @(λ l' : list ·(prod ·A ·B) . Π m : list ·(prod ·A ·B) . list ·(prod ·A ·B)) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·(prod ·A ·B) a (app l1 m) 
 } m) ((λ l' : list ·B . μ map. l' @(λ l' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ nil ·(prod ·A ·B) 
  | cons a t ➔ cons ·(prod ·A ·B) (pair ·A ·B y a) (map t) 
 }) l'') ((λ l' : list ·A . λ l'' : list ·B . μ list_prod. l' @(λ l' : list ·A . Π l'' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ λ l'' . nil ·(prod ·A ·B) 
  | cons x t ➔ λ l'' . (λ l' : list ·(prod ·A ·B) . λ m : list ·(prod ·A ·B) . μ app. l' @(λ l' : list ·(prod ·A ·B) . Π m : list ·(prod ·A ·B) . list ·(prod ·A ·B)) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·(prod ·A ·B) a (app l1 m) 
 } m) ((λ l' : list ·B . μ map. l' @(λ l' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ nil ·(prod ·A ·B) 
  | cons a t' ➔ cons ·(prod ·A ·B) (pair ·A ·B x a) (map t') 
 }) l'') (list_prod t l'') 
 } l'') l' l''))) y' . eq ·nat y' ((λ l' : list ·(prod ·A ·B) . μ length. l' @(λ l' : list ·(prod ·A ·B) . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) ((λ l' : list ·(prod ·A ·B) . λ m : list ·(prod ·A ·B) . μ app. l' @(λ l' : list ·(prod ·A ·B) . Π m : list ·(prod ·A ·B) . list ·(prod ·A ·B)) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·(prod ·A ·B) a (app l1 m) 
 } m) ((λ l' : list ·B . μ map. l' @(λ l' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ nil ·(prod ·A ·B) 
  | cons a t ➔ cons ·(prod ·A ·B) (pair ·A ·B y a) (map t) 
 }) l'') ((λ l' : list ·A . λ l'' : list ·B . μ list_prod. l' @(λ l' : list ·A . Π l'' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ λ l'' . nil ·(prod ·A ·B) 
  | cons x t ➔ λ l'' . (λ l' : list ·(prod ·A ·B) . λ m : list ·(prod ·A ·B) . μ app. l' @(λ l' : list ·(prod ·A ·B) . Π m : list ·(prod ·A ·B) . list ·(prod ·A ·B)) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·(prod ·A ·B) a (app l1 m) 
 } m) ((λ l' : list ·B . μ map. l' @(λ l' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ nil ·(prod ·A ·B) 
  | cons a t' ➔ cons ·(prod ·A ·B) (pair ·A ·B x a) (map t') 
 }) l'') (list_prod t l'') 
 } l'') l' l'')))) {
  | eq_refl ➔ eq_refl ·nat ((λ l' : list ·(prod ·A ·B) . μ length. l' @(λ l' : list ·(prod ·A ·B) . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) ((λ l' : list ·(prod ·A ·B) . λ m : list ·(prod ·A ·B) . μ app. l' @(λ l' : list ·(prod ·A ·B) . Π m : list ·(prod ·A ·B) . list ·(prod ·A ·B)) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·(prod ·A ·B) a (app l1 m) 
 } m) ((λ l' : list ·B . μ map. l' @(λ l' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ nil ·(prod ·A ·B) 
  | cons a t ➔ cons ·(prod ·A ·B) (pair ·A ·B y a) (map t) 
 }) l'') ((λ l' : list ·A . λ l'' : list ·B . μ list_prod. l' @(λ l' : list ·A . Π l'' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ λ l'' . nil ·(prod ·A ·B) 
  | cons x t ➔ λ l'' . (λ l' : list ·(prod ·A ·B) . λ m : list ·(prod ·A ·B) . μ app. l' @(λ l' : list ·(prod ·A ·B) . Π m : list ·(prod ·A ·B) . list ·(prod ·A ·B)) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·(prod ·A ·B) a (app l1 m) 
 } m) ((λ l' : list ·B . μ map. l' @(λ l' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ nil ·(prod ·A ·B) 
  | cons a t' ➔ cons ·(prod ·A ·B) (pair ·A ·B x a) (map t') 
 }) l'') (list_prod t l'') 
 } l'') l' l''))) 
 } @(λ y' : nat . λ _ : eq ·nat ((λ n : nat . λ m : nat . μ add. n @(λ n : nat . Π m : nat . nat) {
  | O ➔ λ m . m 
  | S p ➔ λ m . S (add p m) 
 } m) ((λ l' : list ·(prod ·A ·B) . μ length. l' @(λ l' : list ·(prod ·A ·B) . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) ((λ l' : list ·B . μ map. l' @(λ l' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ nil ·(prod ·A ·B) 
  | cons a t ➔ cons ·(prod ·A ·B) (pair ·A ·B y a) (map t) 
 }) l'')) ((λ l' : list ·(prod ·A ·B) . μ length. l' @(λ l' : list ·(prod ·A ·B) . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) ((λ l' : list ·A . λ l'' : list ·B . μ list_prod. l' @(λ l' : list ·A . Π l'' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ λ l'' . nil ·(prod ·A ·B) 
  | cons x t ➔ λ l'' . (λ l' : list ·(prod ·A ·B) . λ m : list ·(prod ·A ·B) . μ app. l' @(λ l' : list ·(prod ·A ·B) . Π m : list ·(prod ·A ·B) . list ·(prod ·A ·B)) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·(prod ·A ·B) a (app l1 m) 
 } m) ((λ l' : list ·B . μ map. l' @(λ l' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ nil ·(prod ·A ·B) 
  | cons a t' ➔ cons ·(prod ·A ·B) (pair ·A ·B x a) (map t') 
 }) l'') (list_prod t l'') 
 } l'') l' l''))) y' . eq ·nat y' ((λ n : nat . λ m : nat . μ add. n @(λ n : nat . Π m : nat . nat) {
  | O ➔ λ m . m 
  | S p ➔ λ m . S (add p m) 
 } m) ((λ l' : list ·B . μ length. l' @(λ l' : list ·B . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) l'') ((λ n : nat . λ m : nat . μ mul. n @(λ n : nat . Π m : nat . nat) {
  | O ➔ λ m . O 
  | S p ➔ λ m . (λ n' : nat . λ m' : nat . μ add. n' @(λ n' : nat . Π m' : nat . nat) {
  | O ➔ λ m' . m' 
  | S p' ➔ λ m' . S (add p' m') 
 } m') m (mul p m) 
 } m) ((λ l' : list ·A . μ length. l' @(λ l' : list ·A . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) l') ((λ l' : list ·B . μ length. l' @(λ l' : list ·B . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) l'')))) {
  | eq_refl ➔ σ σ map_length ·B ·(prod ·A ·B) (λ y' : B . pair ·A ·B y y') l'' @(λ y' : nat . λ _ : eq ·nat ((λ l' : list ·(prod ·A ·B) . μ length. l' @(λ l' : list ·(prod ·A ·B) . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) ((λ l' : list ·B . μ map. l' @(λ l' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ nil ·(prod ·A ·B) 
  | cons a t ➔ cons ·(prod ·A ·B) (pair ·A ·B y a) (map t) 
 }) l'')) y' . eq ·nat y' ((λ l' : list ·(prod ·A ·B) . μ length. l' @(λ l' : list ·(prod ·A ·B) . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) ((λ l' : list ·B . μ map. l' @(λ l' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ nil ·(prod ·A ·B) 
  | cons a t ➔ cons ·(prod ·A ·B) (pair ·A ·B y a) (map t) 
 }) l''))) {
  | eq_refl ➔ eq_refl ·nat ((λ l' : list ·(prod ·A ·B) . μ length. l' @(λ l' : list ·(prod ·A ·B) . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) ((λ l' : list ·B . μ map. l' @(λ l' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ nil ·(prod ·A ·B) 
  | cons a t ➔ cons ·(prod ·A ·B) (pair ·A ·B y a) (map t) 
 }) l'')) 
 } @(λ y' : nat . λ _ : eq ·nat ((λ l' : list ·B . μ length. l' @(λ l' : list ·B . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) l'') y' . eq ·nat ((λ n : nat . λ m : nat . μ add. n @(λ n : nat . Π m : nat . nat) {
  | O ➔ λ m . m 
  | S p ➔ λ m . S (add p m) 
 } m) y' ((λ l' : list ·(prod ·A ·B) . μ length. l' @(λ l' : list ·(prod ·A ·B) . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) ((λ l' : list ·A . λ l'' : list ·B . μ list_prod. l' @(λ l' : list ·A . Π l'' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ λ l'' . nil ·(prod ·A ·B) 
  | cons x t ➔ λ l'' . (λ l' : list ·(prod ·A ·B) . λ m : list ·(prod ·A ·B) . μ app. l' @(λ l' : list ·(prod ·A ·B) . Π m : list ·(prod ·A ·B) . list ·(prod ·A ·B)) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·(prod ·A ·B) a (app l1 m) 
 } m) ((λ l' : list ·B . μ map. l' @(λ l' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ nil ·(prod ·A ·B) 
  | cons a t' ➔ cons ·(prod ·A ·B) (pair ·A ·B x a) (map t') 
 }) l'') (list_prod t l'') 
 } l'') l' l''))) ((λ n : nat . λ m : nat . μ add. n @(λ n : nat . Π m : nat . nat) {
  | O ➔ λ m . m 
  | S p ➔ λ m . S (add p m) 
 } m) ((λ l' : list ·B . μ length. l' @(λ l' : list ·B . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) l'') ((λ n : nat . λ m : nat . μ mul. n @(λ n : nat . Π m : nat . nat) {
  | O ➔ λ m . O 
  | S p ➔ λ m . (λ n' : nat . λ m' : nat . μ add. n' @(λ n' : nat . Π m' : nat . nat) {
  | O ➔ λ m' . m' 
  | S p' ➔ λ m' . S (add p' m') 
 } m') m (mul p m) 
 } m) ((λ l' : list ·A . μ length. l' @(λ l' : list ·A . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) l') ((λ l' : list ·B . μ length. l' @(λ l' : list ·B . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) l'')))) {
  | eq_refl ➔ σ F l' l'' @(λ y' : nat . λ _ : eq ·nat ((λ l' : list ·(prod ·A ·B) . μ length. l' @(λ l' : list ·(prod ·A ·B) . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) ((λ l' : list ·A . λ l'' : list ·B . μ list_prod. l' @(λ l' : list ·A . Π l'' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ λ l'' . nil ·(prod ·A ·B) 
  | cons x t ➔ λ l'' . (λ l' : list ·(prod ·A ·B) . λ m : list ·(prod ·A ·B) . μ app. l' @(λ l' : list ·(prod ·A ·B) . Π m : list ·(prod ·A ·B) . list ·(prod ·A ·B)) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·(prod ·A ·B) a (app l1 m) 
 } m) ((λ l' : list ·B . μ map. l' @(λ l' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ nil ·(prod ·A ·B) 
  | cons a t' ➔ cons ·(prod ·A ·B) (pair ·A ·B x a) (map t') 
 }) l'') (list_prod t l'') 
 } l'') l' l'')) y' . eq ·nat ((λ n : nat . λ m : nat . μ add. n @(λ n : nat . Π m : nat . nat) {
  | O ➔ λ m . m 
  | S p ➔ λ m . S (add p m) 
 } m) ((λ l' : list ·B . μ length. l' @(λ l' : list ·B . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) l'') ((λ l' : list ·(prod ·A ·B) . μ length. l' @(λ l' : list ·(prod ·A ·B) . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) ((λ l' : list ·A . λ l'' : list ·B . μ list_prod. l' @(λ l' : list ·A . Π l'' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ λ l'' . nil ·(prod ·A ·B) 
  | cons x t ➔ λ l'' . (λ l' : list ·(prod ·A ·B) . λ m : list ·(prod ·A ·B) . μ app. l' @(λ l' : list ·(prod ·A ·B) . Π m : list ·(prod ·A ·B) . list ·(prod ·A ·B)) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·(prod ·A ·B) a (app l1 m) 
 } m) ((λ l' : list ·B . μ map. l' @(λ l' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ nil ·(prod ·A ·B) 
  | cons a t' ➔ cons ·(prod ·A ·B) (pair ·A ·B x a) (map t') 
 }) l'') (list_prod t l'') 
 } l'') l' l''))) ((λ n : nat . λ m : nat . μ add. n @(λ n : nat . Π m : nat . nat) {
  | O ➔ λ m . m 
  | S p ➔ λ m . S (add p m) 
 } m) ((λ l' : list ·B . μ length. l' @(λ l' : list ·B . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) l'') y')) {
  | eq_refl ➔ eq_refl ·nat ((λ n : nat . λ m : nat . μ add. n @(λ n : nat . Π m : nat . nat) {
  | O ➔ λ m . m 
  | S p ➔ λ m . S (add p m) 
 } m) ((λ l' : list ·B . μ length. l' @(λ l' : list ·B . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) l'') ((λ l' : list ·(prod ·A ·B) . μ length. l' @(λ l' : list ·(prod ·A ·B) . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) ((λ l' : list ·A . λ l'' : list ·B . μ list_prod. l' @(λ l' : list ·A . Π l'' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ λ l'' . nil ·(prod ·A ·B) 
  | cons x t ➔ λ l'' . (λ l' : list ·(prod ·A ·B) . λ m : list ·(prod ·A ·B) . μ app. l' @(λ l' : list ·(prod ·A ·B) . Π m : list ·(prod ·A ·B) . list ·(prod ·A ·B)) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·(prod ·A ·B) a (app l1 m) 
 } m) ((λ l' : list ·B . μ map. l' @(λ l' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ nil ·(prod ·A ·B) 
  | cons a t' ➔ cons ·(prod ·A ·B) (pair ·A ·B x a) (map t') 
 }) l'') (list_prod t l'') 
 } l'') l' l''))) 
 } 
 } 
 } 
 } l'') l.



module test.
data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

firstn : ∀ A : ★ . Π n : nat . Π l : list ·A . list ·A = Λ A : ★ . λ n : nat . λ l : list ·A . μ firstn. n @(λ n : nat . Π l : list ·A . list ·A) {
  | O ➔ λ _ . nil ·A 
  | S n' ➔ λ _ . σ l @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a l' ➔ cons ·A a (firstn n' l') 
 } 
 } l.

firstn_cons : ∀ A : ★ . Π n : nat . Π a : A . Π l : list ·A . eq ·(list ·A) (firstn ·A (S n) (cons ·A a l)) (cons ·A a (firstn ·A n l)) = Λ A : ★ . λ n : nat . λ a : A . λ l : list ·A . eq_refl ·(list ·A) (cons ·A a (firstn ·A n l)).



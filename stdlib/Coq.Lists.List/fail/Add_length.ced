module test.
data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

data Add (A : ★) (a : A) : list ·A ➔ list ·A ➔ ★ =
  | Add_head : Π l : list ·A . Add l (cons ·A a l)
  | Add_cons : Π x : A . Π l : list ·A . Π l' : list ·A . Add l l' ➔ Add (cons ·A x l) (cons ·A x l').

Add_ind : ∀ A : ★ . Π a : A . ∀ P : list ·A ➔ list ·A ➔ ★ . Π f : Π l : list ·A . P l (cons ·A a l) . Π f' : Π x : A . Π l : list ·A . Π l' : list ·A . Add ·A a l l' ➔ P l l' ➔ P (cons ·A x l) (cons ·A x l') . Π l : list ·A . Π l' : list ·A . Π a' : Add ·A a l l' . P l l' = Λ A : ★ . λ a : A . Λ P : list ·A ➔ list ·A ➔ ★ . λ f : Π l : list ·A . P l (cons ·A a l) . λ f' : Π x : A . Π l : list ·A . Π l' : list ·A . Add ·A a l l' ➔ P l l' ➔ P (cons ·A x l) (cons ·A x l') . λ l : list ·A . λ l' : list ·A . λ a' : Add ·A a l l' . μ F. a' @(λ l : list ·A . λ l' : list ·A . λ a' : Add ·A a l l' . P l l') {
  | Add_head l' ➔ f l' 
  | Add_cons x l' l'' a' ➔ f' x l' l'' a' (F -l' -l'' a') 
 }.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

length : ∀ A : ★ . list ·A ➔ nat = Λ A : ★ . λ l : list ·A . μ length. l @(λ l : list ·A . nat) {
  | nil ➔ O 
  | cons a l' ➔ S (length l') 
 }.

f_equal : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π x : A . Π y : A . eq ·A x y ➔ eq ·B (f x) (f y) = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·B (f x) (f y')) {
  | eq_refl ➔ eq_refl ·B (f x) 
 }.

f_equal_nat : ∀ B : ★ . Π f : nat ➔ B . Π x : nat . Π y : nat . eq ·nat x y ➔ eq ·B (f x) (f y) = f_equal ·nat.

Add_length : ∀ A : ★ . Π a : A . Π l : list ·A . Π l' : list ·A . Π H : Add ·A a l l' . eq ·nat (length ·A l') (S (length ·A l)) = Λ A : ★ . λ a : A . λ l : list ·A . λ l' : list ·A . λ H : Add ·A a l l' . Add_ind ·A a ·(λ l' : list ·A . λ l'' : list ·A . eq ·nat (length ·A l'') (S (length ·A l'))) (λ l' : list ·A . eq_refl ·nat (S (length ·A l'))) (λ x : A . λ l' : list ·A . λ l'' : list ·A . λ H' : Add ·A a l' l'' . λ IHAdd : eq ·nat (length ·A l'') (S (length ·A l')) . f_equal_nat ·nat S (length ·A l'') (S (length ·A l')) IHAdd) l l' H.



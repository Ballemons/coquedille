module test.
data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

list_ind : ∀ A : ★ . ∀ P : Π l : list ·A . ★ . Π f : P (nil ·A) . Π f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . Π l : list ·A . P l = Λ A : ★ . Λ P : Π l : list ·A . ★ . λ f : P (nil ·A) . λ f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . λ l : list ·A . μ F. l @(λ l : list ·A . P l) {
  | nil ➔ f 
  | cons y l' ➔ f' y (to/list -isType/F l') (F l') 
 }.

data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

length : ∀ A : ★ . list ·A ➔ nat = Λ A : ★ . λ l : list ·A . μ length. l @(λ l : list ·A . nat) {
  | nil ➔ O 
  | cons a l' ➔ S (length l') 
 }.

data prod (A : ★) (B : ★) : ★ =
  | pair : A ➔ B ➔ prod.

nth : ∀ A : ★ . Π n : nat . Π l : list ·A . Π default : A . A = Λ A : ★ . λ n : nat . λ l : list ·A . λ default : A . σ n @(λ n' : nat . A) {
  | O ➔ μ nth. l @(λ l : list ·A . Π n : nat . Π default : A . A) {
  | nil ➔ λ _ . λ _ . default 
  | cons x l' ➔ λ _ . λ _ . x 
 } n default 
  | S m ➔ μ nth. l @(λ l : list ·A . Π n : nat . Π default : A . A) {
  | nil ➔ λ _ . λ _ . default 
  | cons x t ➔ λ _ . λ _ . nth t m default 
 } n default 
 }.

combine : ∀ A : ★ . ∀ B : ★ . Π l : list ·A . Π l' : list ·B . list ·(prod ·A ·B) = Λ A : ★ . Λ B : ★ . λ l : list ·A . λ l' : list ·B . μ combine. l @(λ l : list ·A . Π l' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ λ _ . nil ·(prod ·A ·B) 
  | cons x tl ➔ λ _ . σ l' @(λ l'' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ nil ·(prod ·A ·B) 
  | cons y tl' ➔ cons ·(prod ·A ·B) (pair ·A ·B x y) (combine tl tl') 
 } 
 } l'.

False : ★ = ∀ X : ★ . X.

False_ind : ∀ P : ★ . False ➔ P = Λ P : ★ . λ f : False . f ·P.

eq_ind : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . Π f : P x . Π y : A . Π e : eq ·A x y . P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ f : P x . λ y : A . λ e : eq ·A x y . σ e @(λ y' : A . λ _ : eq ·A x y' . P y') {
  | eq_refl ➔ f 
 }.

data True : ★ =
  | I : True.

f_equal : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π x : A . Π y : A . eq ·A x y ➔ eq ·B (f x) (f y) = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·B (f x) (f y')) {
  | eq_refl ➔ eq_refl ·B (f x) 
 }.

pred : Π n : nat . nat = λ n : nat . σ n @(λ n' : nat . nat) {
  | O ➔ n 
  | S u ➔ u 
 }.

eq_add_S : Π n : nat . Π m : nat . Π H : eq ·nat (S n) (S m) . eq ·nat n m = λ n : nat . λ m : nat . λ H : eq ·nat (S n) (S m) . f_equal ·nat ·nat pred (S n) (S m) H.

combine_nth : ∀ A : ★ . ∀ B : ★ . Π l : list ·A . Π l' : list ·B . Π n : nat . Π x : A . Π y : B . eq ·nat (length ·A l) (length ·B l') ➔ eq ·(prod ·A ·B) (nth ·(prod ·A ·B) n (combine ·A ·B l l') (pair ·A ·B x y)) (pair ·A ·B (nth ·A n l x) (nth ·B n l' y)) = Λ A : ★ . Λ B : ★ . λ l : list ·A . list_ind ·A (λ l' : list ·A . tprodT?) (λ l' : list ·B . σ l' @(λ l' : list ·B . Π n : nat . Π x : A . Π y : B . eq ·nat (length ·A (nil ·A)) (length ·B l') ➔ eq ·(prod ·A ·B) (nth ·(prod ·A ·B) n (combine ·A ·B (nil ·A) l') (pair ·A ·B x y)) (pair ·A ·B (nth ·A n (nil ·A) x) (nth ·B n l' y))) {
  | nil ➔ λ n : nat . λ x : A . λ y : B . λ H : eq ·nat (length ·A (nil ·A)) (length ·B (nil ·B)) . σ n @(λ n' : nat . eq ·(prod ·A ·B) (nth ·(prod ·A ·B) n' (combine ·A ·B (nil ·A) (nil ·B)) (pair ·A ·B x y)) (pair ·A ·B (nth ·A n' (nil ·A) x) (nth ·B n' (nil ·B) y))) {
  | O ➔ eq_refl ·(prod ·A ·B) (pair ·A ·B x y) 
  | S n' ➔ eq_refl ·(prod ·A ·B) (pair ·A ·B x y) 
 } 
  | cons b l'' ➔ λ n : nat . λ x : A . λ y : B . λ H : eq ·nat (length ·A (nil ·A)) (length ·B (cons ·B b l'')) . False_ind ·(eq ·(prod ·A ·B) (nth ·(prod ·A ·B) n (combine ·A ·B (nil ·A) (cons ·B b l'')) (pair ·A ·B x y)) (pair ·A ·B (nth ·A n (nil ·A) x) (nth ·B n (cons ·B b l'') y))) (eq_ind ·nat (length ·A (nil ·A)) (λ e : nat . σ e @(λ n' : nat . xx) {
  | O ➔ True 
  | S XX ➔ False 
 }) I (length ·B (cons ·B b l'')) H) 
 }) (λ a : A . λ l' : list ·A . λ IHl : Π l'' : list ·B . Π n : nat . Π x : A . Π y : B . eq ·nat (length ·A l') (length ·B l'') ➔ eq ·(prod ·A ·B) (nth ·(prod ·A ·B) n (combine ·A ·B l' l'') (pair ·A ·B x y)) (pair ·A ·B (nth ·A n l' x) (nth ·B n l'' y)) . λ l'' : list ·B . σ l'' @(λ l' : list ·B . Π n : nat . Π x : A . Π y : B . eq ·nat (length ·A (cons ·A a l')) (length ·B l') ➔ eq ·(prod ·A ·B) (nth ·(prod ·A ·B) n (combine ·A ·B (cons ·A a l') l') (pair ·A ·B x y)) (pair ·A ·B (nth ·A n (cons ·A a l') x) (nth ·B n l' y))) {
  | nil ➔ λ n : nat . λ x : A . λ y : B . λ H : eq ·nat (length ·A (cons ·A a l')) (length ·B (nil ·B)) . False_ind ·(eq ·(prod ·A ·B) (nth ·(prod ·A ·B) n (combine ·A ·B (cons ·A a l') (nil ·B)) (pair ·A ·B x y)) (pair ·A ·B (nth ·A n (cons ·A a l') x) (nth ·B n (nil ·B) y))) (eq_ind ·nat (length ·A (cons ·A a l')) (λ e : nat . σ e @(λ n' : nat . xx) {
  | O ➔ False 
  | S XX ➔ True 
 }) I (length ·B (nil ·B)) H) 
  | cons b l'' ➔ λ n : nat . λ x : A . λ y : B . λ H : eq ·nat (length ·A (cons ·A a l')) (length ·B (cons ·B b l'')) . σ n @(λ n' : nat . eq ·(prod ·A ·B) (nth ·(prod ·A ·B) n' (combine ·A ·B (cons ·A a l') (cons ·B b l'')) (pair ·A ·B x y)) (pair ·A ·B (nth ·A n' (cons ·A a l') x) (nth ·B n' (cons ·B b l'') y))) {
  | O ➔ eq_refl ·(prod ·A ·B) (pair ·A ·B a b) 
  | S n' ➔ IHl l'' n' x y (eq_add_S (length ·A l') (length ·B l'') H) 
 } 
 }) l.



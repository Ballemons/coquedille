module test.
data sumbool (A : ★) (B : ★) : ★ =
  | left : A ➔ sumbool
  | right : B ➔ sumbool.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

False : ★ = ∀ X : ★ . X.

not : Π A : ★ . ★ = λ A : ★ . A ➔ False.

data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

list_ind : ∀ A : ★ . ∀ P : Π l : list ·A . ★ . Π f : P (nil ·A) . Π f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . Π l : list ·A . P l = Λ A : ★ . Λ P : Π l : list ·A . ★ . λ f : P (nil ·A) . λ f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . λ l : list ·A . μ F. l @(λ l : list ·A . P l) {
  | nil ➔ f 
  | cons y l' ➔ f' y (to/list -isType/F l') (F l') 
 }.

data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

count_occ : ∀ A : ★ . Π eq_dec : Π x : A . Π y : A . sumbool ·(eq ·A x y) ·(not ·(eq ·A x y)) . Π l : list ·A . Π x : A . nat = Λ A : ★ . λ eq_dec : Π x : A . Π y : A . sumbool ·(eq ·A x y) ·(not ·(eq ·A x y)) . λ l : list ·A . λ x : A . μ count_occ. l @(λ l : list ·A . Π x : A . nat) {
  | nil ➔ λ _ . O 
  | cons y tl ➔ λ _ . ([ n : nat = count_occ tl x ] - σ eq_dec y x @(λ _ : sumbool ·(eq ·A y x) ·(not ·(eq ·A y x)) . nat) {
  | left XX ➔ S n 
  | right XX ➔ n 
 }) 
 } x.

map : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π l : list ·A . list ·B = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ l : list ·A . μ map. l @(λ l : list ·A . list ·B) {
  | nil ➔ nil ·B 
  | cons a t ➔ cons ·B (f a) (map t) 
 }.

eq_ind : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . Π f : P x . Π y : A . Π e : eq ·A x y . P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ f : P x . λ y : A . λ e : eq ·A x y . σ e @(λ y' : A . λ _ : eq ·A x y' . P y') {
  | eq_refl ➔ f 
 }.

eq_sym : ∀ A : ★ . Π x : A . Π y : A . eq ·A x y ➔ eq ·A y x = Λ A : ★ . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·A y' x) {
  | eq_refl ➔ eq_refl ·A x 
 }.

eq_ind_r : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . P x ➔ Π y : A . eq ·A y x ➔ P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ H : P x . λ y : A . λ H0 : eq ·A y x . eq_ind ·A x ·(λ y' : A . P y') H y (eq_sym ·A y x H0).

False_ind : ∀ P : ★ . False ➔ P = Λ P : ★ . λ f : False . f ·P.

count_occ_map : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π decA : Π x1 : A . Π x2 : A . sumbool ·(eq ·A x1 x2) ·(not ·(eq ·A x1 x2)) . Π decB : Π y1 : B . Π y2 : B . sumbool ·(eq ·B y1 y2) ·(not ·(eq ·B y1 y2)) . Π Hfinjective : Π x1 : A . Π x2 : A . eq ·B (f x1) (f x2) ➔ eq ·A x1 x2 . Π x : A . Π l : list ·A . eq ·nat (count_occ ·A decA l x) (count_occ ·B decB (map ·A ·B f l) (f x)) = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ decA : Π x1 : A . Π x2 : A . sumbool ·(eq ·A x1 x2) ·(not ·(eq ·A x1 x2)) . λ decB : Π y1 : B . Π y2 : B . sumbool ·(eq ·B y1 y2) ·(not ·(eq ·B y1 y2)) . λ Hfinjective : Π x1 : A . Π x2 : A . eq ·B (f x1) (f x2) ➔ eq ·A x1 x2 . λ x : A . λ l : list ·A . list_ind ·A (λ l' : list ·A . tprodT?) (λ x' : A . eq_refl ·nat O) (λ a : A . λ l' : list ·A . λ Hrec : Π x' : A . eq ·nat (count_occ ·A decA l' x') (count_occ ·B decB (map ·A ·B f l') (f x')) . λ x' : A . σ decA a x' @(λ s : sumbool ·(eq ·A a x') ·(not ·(eq ·A a x')) . eq ·nat σ s @(λ _ : sumbool ·(eq ·A a x') ·(not ·(eq ·A a x')) . nat) {
  | left XX ➔ S (count_occ ·A decA l' x') 
  | right XX ➔ count_occ ·A decA l' x' 
 } σ decB (f a) (f x') @(λ _ : sumbool ·(eq ·B (f a) (f x')) ·(not ·(eq ·B (f a) (f x'))) . nat) {
  | left XX ➔ S (count_occ ·B decB (map ·A ·B f l') (f x')) 
  | right XX ➔ count_occ ·B decB (map ·A ·B f l') (f x') 
 }) {
  | left H1 ➔ σ decB (f a) (f x') @(λ s : sumbool ·(eq ·B (f a) (f x')) ·(not ·(eq ·B (f a) (f x'))) . eq ·nat (S (count_occ ·A decA l' x')) σ s @(λ _ : sumbool ·(eq ·B (f a) (f x')) ·(not ·(eq ·B (f a) (f x'))) . nat) {
  | left XX ➔ S (count_occ ·B decB (map ·A ·B f l') (f x')) 
  | right XX ➔ count_occ ·B decB (map ·A ·B f l') (f x') 
 }) {
  | left H2 ➔ eq_ind_r ·nat (count_occ ·B decB (map ·A ·B f l') (f x')) ·(λ n : nat . eq ·nat (S n) (S (count_occ ·B decB (map ·A ·B f l') (f x')))) (eq_refl ·nat (S (count_occ ·B decB (map ·A ·B f l') (f x')))) (count_occ ·A decA l' x') (Hrec x') 
  | right H2 ➔ False_ind ·(eq ·nat (S (count_occ ·A decA l' x')) (count_occ ·B decB (map ·A ·B f l') (f x'))) (H2 (eq_ind_r ·A x' ·(λ a' : A . eq ·B (f a') (f x')) (eq_refl ·B (f x')) a H1)) 
 } 
  | right H1 ➔ σ decB (f a) (f x') @(λ s : sumbool ·(eq ·B (f a) (f x')) ·(not ·(eq ·B (f a) (f x'))) . eq ·nat (count_occ ·A decA l' x') σ s @(λ _ : sumbool ·(eq ·B (f a) (f x')) ·(not ·(eq ·B (f a) (f x'))) . nat) {
  | left XX ➔ S (count_occ ·B decB (map ·A ·B f l') (f x')) 
  | right XX ➔ count_occ ·B decB (map ·A ·B f l') (f x') 
 }) {
  | left H2 ➔ False_ind ·(eq ·nat (count_occ ·A decA l' x') (S (count_occ ·B decB (map ·A ·B f l') (f x')))) (H1 (Hfinjective a x' H2)) 
  | right H2 ➔ Hrec x' 
 } 
 }) l x.



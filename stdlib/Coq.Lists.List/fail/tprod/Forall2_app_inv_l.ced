module test.
data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

list_ind : ∀ A : ★ . ∀ P : Π l : list ·A . ★ . Π f : P (nil ·A) . Π f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . Π l : list ·A . P l = Λ A : ★ . Λ P : Π l : list ·A . ★ . λ f : P (nil ·A) . λ f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . λ l : list ·A . μ F. l @(λ l : list ·A . P l) {
  | nil ➔ f 
  | cons y l' ➔ f' y (to/list -isType/F l') (F l') 
 }.

data Forall2 (A : ★) (B : ★) (R : A ➔ B ➔ ★) : list ·A ➔ list ·B ➔ ★ =
  | Forall2_nil : Forall2 (nil ·A) (nil ·B)
  | Forall2_cons : Π x : A . Π y : B . Π l : list ·A . Π l' : list ·B . R x y ➔ Forall2 l l' ➔ Forall2 (cons ·A x l) (cons ·B y l').

app : ∀ A : ★ . list ·A ➔ list ·A ➔ list ·A = Λ A : ★ . λ l : list ·A . λ m : list ·A . μ app. l @(λ l : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ _ . m 
  | cons a l1 ➔ λ _ . cons ·A a (app l1 m) 
 } m.

data ex (A : ★) (P : A ➔ ★) : ★ =
  | ex_intro : Π x : A . P x ➔ ex.

data and (A : ★) (B : ★) : ★ =
  | conj : A ➔ B ➔ and.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

False : ★ = ∀ X : ★ . X.

False_ind : ∀ P : ★ . False ➔ P = Λ P : ★ . λ f : False . f ·P.

eq_ind : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . Π f : P x . Π y : A . Π e : eq ·A x y . P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ f : P x . λ y : A . λ e : eq ·A x y . σ e @(λ y' : A . λ _ : eq ·A x y' . P y') {
  | eq_refl ➔ f 
 }.

data True : ★ =
  | I : True.

eq_sym : ∀ A : ★ . Π x : A . Π y : A . eq ·A x y ➔ eq ·A y x = Λ A : ★ . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·A y' x) {
  | eq_refl ➔ eq_refl ·A x 
 }.

eq_ind_r : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . P x ➔ Π y : A . eq ·A y x ➔ P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ H : P x . λ y : A . λ H0 : eq ·A y x . eq_ind ·A x ·(λ y' : A . P y') H y (eq_sym ·A y x H0).

f_equal : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π x : A . Π y : A . eq ·A x y ➔ eq ·B (f x) (f y) = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·B (f x) (f y')) {
  | eq_refl ➔ eq_refl ·B (f x) 
 }.

Forall2_app_inv_l : ∀ A : ★ . ∀ B : ★ . ∀ R : A ➔ B ➔ ★ . Π l1 : list ·A . Π l2 : list ·A . Π l' : list ·B . Forall2 ·A ·B ·R (app ·A l1 l2) l' ➔ ex ·(list ·B) ·(λ l1' : list ·B . ex ·(list ·B) ·(λ l2' : list ·B . and ·(Forall2 ·A ·B ·R l1 l1') ·(and ·(Forall2 ·A ·B ·R l2 l2') ·(eq ·(list ·B) l' (app ·B l1' l2'))))) = Λ A : ★ . Λ B : ★ . Λ R : A ➔ B ➔ ★ . λ l1 : list ·A . list_ind ·A (λ l1' : list ·A . tprodT?) (λ l2 : list ·A . λ l' : list ·B . λ H : Forall2 ·A ·B ·R (app ·A (nil ·A) l2) l' . ex_intro ·(list ·B) ·(λ l1' : list ·B . ex ·(list ·B) ·(λ l2' : list ·B . and ·(Forall2 ·A ·B ·R (nil ·A) l1') ·(and ·(Forall2 ·A ·B ·R l2 l2') ·(eq ·(list ·B) l' (app ·B l1' l2'))))) (nil ·B) (ex_intro ·(list ·B) ·(λ l2' : list ·B . and ·(Forall2 ·A ·B ·R (nil ·A) (nil ·B)) ·(and ·(Forall2 ·A ·B ·R l2 l2') ·(eq ·(list ·B) l' (app ·B (nil ·B) l2')))) l' (conj ·(Forall2 ·A ·B ·R (nil ·A) (nil ·B)) ·(and ·(Forall2 ·A ·B ·R l2 l') ·(eq ·(list ·B) l' (app ·B (nil ·B) l'))) (Forall2_nil ·A ·B ·R) (conj ·(Forall2 ·A ·B ·R l2 l') ·(eq ·(list ·B) l' (app ·B (nil ·B) l')) H (eq_refl ·(list ·B) (app ·B (nil ·B) l')))))) (λ a : A . λ l1' : list ·A . λ IHl1 : Π l2 : list ·A . Π l' : list ·B . Forall2 ·A ·B ·R (app ·A l1' l2) l' ➔ ex ·(list ·B) ·(λ l1'' : list ·B . ex ·(list ·B) ·(λ l2' : list ·B . and ·(Forall2 ·A ·B ·R l1' l1'') ·(and ·(Forall2 ·A ·B ·R l2 l2') ·(eq ·(list ·B) l' (app ·B l1'' l2'))))) . λ l2 : list ·A . λ l' : list ·B . λ H : Forall2 ·A ·B ·R (app ·A (cons ·A a l1') l2) l' . σ H @(λ l : list ·A . λ l' : list ·B . λ _ : Forall2 ·A ·B ·R l l' . eq ·(list ·A) l (cons ·A a (app ·A l1' l2)) ➔ eq ·(list ·B) l' l' ➔ ex ·(list ·B) ·(λ l1'' : list ·B . ex ·(list ·B) ·(λ l2' : list ·B . and ·(Forall2 ·A ·B ·R (cons ·A a l1') l1'') ·(and ·(Forall2 ·A ·B ·R l2 l2') ·(eq ·(list ·B) l' (app ·B l1'' l2')))))) {
  | Forall2_nil ➔ λ H0 : eq ·(list ·A) (nil ·A) (cons ·A a (app ·A l1' l2)) . λ H1 : eq ·(list ·B) (nil ·B) l' . False_ind ·(Π H1' : eq ·(list ·B) (nil ·B) l' . ex ·(list ·B) ·(λ l1'' : list ·B . ex ·(list ·B) ·(λ l2' : list ·B . and ·(Forall2 ·A ·B ·R (cons ·A a l1') l1'') ·(and ·(Forall2 ·A ·B ·R l2 l2') ·(eq ·(list ·B) l' (app ·B l1'' l2')))))) (eq_ind ·(list ·A) (nil ·A) (λ e : list ·A . σ e @(λ l : list ·A . xx) {
  | nil ➔ True 
  | cons XX XX ➔ False 
 }) I (cons ·A a (app ·A l1' l2)) H0) H1 
  | Forall2_cons x y l l'0 H0 H1 ➔ λ H2 : eq ·(list ·A) (cons ·A x l) (cons ·A a (app ·A l1' l2)) . λ H3 : eq ·(list ·B) (cons ·B y l'0) l' . eq_ind_r ·A a (λ a' : A . tprodT?) (λ H1' : eq ·(list ·A) l (app ·A l1' l2) . eq_ind_r ·(list ·A) (app ·A l1' l2) (λ l' : list ·A . tprodT?) (λ H3' : eq ·(list ·B) (cons ·B y l'0) l' . eq_ind ·(list ·B) (cons ·B y l'0) (λ l' : list ·B . tprodT?) (λ H2' : R a y . λ H4 : Forall2 ·A ·B ·R (app ·A l1' l2) l'0 . eq_ind ·(list ·B) (cons ·B y l'0) (λ l'' : list ·B . tprodT?) (λ H' : Forall2 ·A ·B ·R (cons ·A a (app ·A l1' l2)) (cons ·B y l'0) . σ IHl1 l2 l'0 H4 @(λ _ : ex ·(list ·B) ·(λ l1'' : list ·B . ex ·(list ·B) ·(λ l2' : list ·B . and ·(Forall2 ·A ·B ·R l1' l1'') ·(and ·(Forall2 ·A ·B ·R l2 l2') ·(eq ·(list ·B) l'0 (app ·B l1'' l2'))))) . ex ·(list ·B) ·(λ l1'' : list ·B . ex ·(list ·B) ·(λ l2' : list ·B . and ·(Forall2 ·A ·B ·R (cons ·A a l1') l1'') ·(and ·(Forall2 ·A ·B ·R l2 l2') ·(eq ·(list ·B) (cons ·B y l'0) (app ·B l1'' l2')))))) {
  | ex_intro l1'' H' ➔ σ H' @(λ _ : ex ·(list ·B) ·(λ l2' : list ·B . and ·(Forall2 ·A ·B ·R l1' l1'') ·(and ·(Forall2 ·A ·B ·R l2 l2') ·(eq ·(list ·B) l'0 (app ·B l1'' l2')))) . ex ·(list ·B) ·(λ l1'' : list ·B . ex ·(list ·B) ·(λ l2' : list ·B . and ·(Forall2 ·A ·B ·R (cons ·A a l1') l1'') ·(and ·(Forall2 ·A ·B ·R l2 l2') ·(eq ·(list ·B) (cons ·B y l'0) (app ·B l1'' l2')))))) {
  | ex_intro l2' H' ➔ σ H' @(λ _ : and ·(Forall2 ·A ·B ·R l1' l1'') ·(and ·(Forall2 ·A ·B ·R l2 l2') ·(eq ·(list ·B) l'0 (app ·B l1'' l2'))) . ex ·(list ·B) ·(λ l1'' : list ·B . ex ·(list ·B) ·(λ l2'' : list ·B . and ·(Forall2 ·A ·B ·R (cons ·A a l1') l1'') ·(and ·(Forall2 ·A ·B ·R l2 l2'') ·(eq ·(list ·B) (cons ·B y l'0) (app ·B l1'' l2'')))))) {
  | conj Hl1 H' ➔ σ H' @(λ _ : and ·(Forall2 ·A ·B ·R l2 l2') ·(eq ·(list ·B) l'0 (app ·B l1'' l2')) . ex ·(list ·B) ·(λ l1'' : list ·B . ex ·(list ·B) ·(λ l2'' : list ·B . and ·(Forall2 ·A ·B ·R (cons ·A a l1') l1'') ·(and ·(Forall2 ·A ·B ·R l2 l2'') ·(eq ·(list ·B) (cons ·B y l'0) (app ·B l1'' l2'')))))) {
  | conj Hl2 H' ➔ eq_ind_r ·(list ·B) (app ·B l1'' l2') ·(λ l'0' : list ·B . ex ·(list ·B) ·(λ l1'' : list ·B . ex ·(list ·B) ·(λ l2'' : list ·B . and ·(Forall2 ·A ·B ·R (cons ·A a l1') l1'') ·(and ·(Forall2 ·A ·B ·R l2 l2'') ·(eq ·(list ·B) (cons ·B y l'0') (app ·B l1'' l2'')))))) (ex_intro ·(list ·B) ·(λ l1'' : list ·B . ex ·(list ·B) ·(λ l2'' : list ·B . and ·(Forall2 ·A ·B ·R (cons ·A a l1') l1'') ·(and ·(Forall2 ·A ·B ·R l2 l2'') ·(eq ·(list ·B) (cons ·B y (app ·B l1'' l2')) (app ·B l1'' l2''))))) (cons ·B y l1'') (ex_intro ·(list ·B) ·(λ l2'' : list ·B . and ·(Forall2 ·A ·B ·R (cons ·A a l1') (cons ·B y l1'')) ·(and ·(Forall2 ·A ·B ·R l2 l2'') ·(eq ·(list ·B) (cons ·B y (app ·B l1'' l2')) (app ·B (cons ·B y l1'') l2'')))) l2' (conj ·(Forall2 ·A ·B ·R (cons ·A a l1') (cons ·B y l1'')) ·(and ·(Forall2 ·A ·B ·R l2 l2') ·(eq ·(list ·B) (cons ·B y (app ·B l1'' l2')) (cons ·B y (app ·B l1'' l2')))) (Forall2_cons ·A ·B ·R a y l1' l1'' H2' Hl1) (conj ·(Forall2 ·A ·B ·R l2 l2') ·(eq ·(list ·B) (cons ·B y (app ·B l1'' l2')) (cons ·B y (app ·B l1'' l2'))) Hl2 (eq_refl ·(list ·B) (cons ·B y (app ·B l1'' l2'))))))) l'0 H' 
 } 
 } 
 } 
 }) l' H3' H) l' H3') l H1') x (f_equal ·(list ·A) ·A (λ e : list ·A . σ e @(λ l' : list ·A . A) {
  | nil ➔ x 
  | cons a' l' ➔ a' 
 }) (cons ·A x l) (cons ·A a (app ·A l1' l2)) H2) (f_equal ·(list ·A) ·(list ·A) (λ e : list ·A . σ e @(λ l' : list ·A . list ·A) {
  | nil ➔ l 
  | cons a' l' ➔ l' 
 }) (cons ·A x l) (cons ·A a (app ·A l1' l2)) H2) H3 H0 H1 
 } (eq_refl ·(list ·A) (cons ·A a (app ·A l1' l2))) (eq_refl ·(list ·B) l')) l1.



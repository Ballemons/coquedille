module test.
data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

nat_ind : ∀ P : Π n : nat . ★ . Π f : P O . Π f' : Π n : nat . P n ➔ P (S n) . Π n : nat . P n = Λ P : Π n : nat . ★ . λ f : P O . λ f' : Π n : nat . P n ➔ P (S n) . λ n : nat . μ F. n @(λ n : nat . P n) {
  | O ➔ f 
  | S n' ➔ f' (to/nat -isType/F n') (F n') 
 }.

data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

firstn : ∀ A : ★ . Π n : nat . Π l : list ·A . list ·A = Λ A : ★ . λ n : nat . λ l : list ·A . μ firstn. n @(λ n : nat . Π l : list ·A . list ·A) {
  | O ➔ λ _ . nil ·A 
  | S n' ➔ λ _ . σ l @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a l' ➔ cons ·A a (firstn n' l') 
 } 
 } l.

app : ∀ A : ★ . list ·A ➔ list ·A ➔ list ·A = Λ A : ★ . λ l : list ·A . λ m : list ·A . μ app. l @(λ l : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ _ . m 
  | cons a l1 ➔ λ _ . cons ·A a (app l1 m) 
 } m.

sub : Π n : nat . Π m : nat . nat = λ n : nat . λ m : nat . μ sub. n @(λ n : nat . Π m : nat . nat) {
  | O ➔ λ _ . n 
  | S k ➔ λ _ . σ m @(λ m' : nat . nat) {
  | O ➔ n 
  | S l ➔ sub k l 
 } 
 } m.

length : ∀ A : ★ . list ·A ➔ nat = Λ A : ★ . λ l : list ·A . μ length. l @(λ l : list ·A . nat) {
  | nil ➔ O 
  | cons a l' ➔ S (length l') 
 }.

eq_ind : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . Π f : P x . Π y : A . Π e : eq ·A x y . P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ f : P x . λ y : A . λ e : eq ·A x y . σ e @(λ y' : A . λ _ : eq ·A x y' . P y') {
  | eq_refl ➔ f 
 }.

eq_sym : ∀ A : ★ . Π x : A . Π y : A . eq ·A x y ➔ eq ·A y x = Λ A : ★ . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·A y' x) {
  | eq_refl ➔ eq_refl ·A x 
 }.

eq_ind_r : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . P x ➔ Π y : A . eq ·A y x ➔ P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ H : P x . λ y : A . λ H0 : eq ·A y x . eq_ind ·A x ·(λ y' : A . P y') H y (eq_sym ·A y x H0).

sub_0_r : Π n : nat . eq ·nat (sub n O) n = λ n : nat . σ n @(λ n' : nat . eq ·nat (sub n' O) n') {
  | O ➔ eq_refl ·nat O 
  | S n' ➔ eq_refl ·nat (S n') 
 }.

minus_n_O : Π n : nat . eq ·nat n (sub n O) = λ n : nat . eq_sym ·nat (sub n O) n (sub_0_r n).

app_nil_l : ∀ A : ★ . Π l : list ·A . eq ·(list ·A) (app ·A (nil ·A) l) l = Λ A : ★ . λ l : list ·A . eq_refl ·(list ·A) l.

eq_trans : ∀ A : ★ . Π x : A . Π y : A . Π z : A . eq ·A x y ➔ eq ·A y z ➔ eq ·A x z = Λ A : ★ . λ x : A . λ y : A . λ z : A . λ H : eq ·A x y . λ H0 : eq ·A y z . σ H0 @(λ y' : A . λ _ : eq ·A y y' . eq ·A x y') {
  | eq_refl ➔ H 
 }.

f_equal : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π x : A . Π y : A . eq ·A x y ➔ eq ·B (f x) (f y) = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·B (f x) (f y')) {
  | eq_refl ➔ eq_refl ·B (f x) 
 }.

app_comm_cons : ∀ A : ★ . Π x : list ·A . Π y : list ·A . Π a : A . eq ·(list ·A) (cons ·A a (app ·A x y)) (app ·A (cons ·A a x) y) = Λ A : ★ . λ x : list ·A . λ y : list ·A . λ a : A . eq_refl ·(list ·A) (app ·A (cons ·A a x) y).

firstn_app : ∀ A : ★ . Π n : nat . Π l1 : list ·A . Π l2 : list ·A . eq ·(list ·A) (firstn ·A n (app ·A l1 l2)) (app ·A (firstn ·A n l1) (firstn ·A (sub n (length ·A l1)) l2)) = Λ A : ★ . λ n : nat . nat_ind (λ n' : nat . tprodT?) (λ l1 : list ·A . λ l2 : list ·A . eq_refl ·(list ·A) (nil ·A)) (λ k : nat . λ iHk : Π l1 : list ·A . Π l2 : list ·A . eq ·(list ·A) (firstn ·A k (app ·A l1 l2)) (app ·A (firstn ·A k l1) (firstn ·A (sub k (length ·A l1)) l2)) . λ l1 : list ·A . λ l2 : list ·A . σ l1 @(λ l : list ·A . eq ·(list ·A) (firstn ·A (S k) (app ·A l l2)) (app ·A (firstn ·A (S k) l) (firstn ·A (sub (S k) (length ·A l)) l2))) {
  | nil ➔ eq_ind_r ·(list ·A) l2 ·(λ l : list ·A . eq ·(list ·A) (firstn ·A (S k) l) (app ·A (nil ·A) (firstn ·A (sub (S k) O) l2))) (eq_ind_r ·(list ·A) (firstn ·A (sub (S k) O) l2) ·(λ l : list ·A . eq ·(list ·A) (firstn ·A (S k) l2) l) (eq_ind ·nat (S k) ·(λ n' : nat . eq ·(list ·A) (firstn ·A (S k) l2) (firstn ·A n' l2)) (eq_refl ·(list ·A) (firstn ·A (S k) l2)) (sub (S k) O) (minus_n_O (S k))) (app ·A (nil ·A) (firstn ·A (sub (S k) O) l2)) (app_nil_l ·A (firstn ·A (sub (S k) O) l2))) (app ·A (nil ·A) l2) (app_nil_l ·A l2) 
  | cons x xs ➔ eq_ind ·(list ·A) (cons ·A x (app ·A xs l2)) ·(λ l : list ·A . eq ·(list ·A) (firstn ·A (S k) l) (app ·A (firstn ·A (S k) (cons ·A x xs)) (firstn ·A (sub (S k) (length ·A (cons ·A x xs))) l2))) (eq_trans ·(list ·A) (cons ·A x (firstn ·A k (app ·A xs l2))) (cons ·A x (firstn ·A k (app ·A xs l2))) (cons ·A x (app ·A (firstn ·A k xs) (firstn ·A (sub k (length ·A xs)) l2))) (f_equal ·(Π l : list ·A . list ·A) ·(list ·A) (λ f : Π l : list ·A . list ·A . f (firstn ·A k (app ·A xs l2))) (cons ·A x) (cons ·A x) (eq_refl ·(Π l : list ·A . list ·A) (cons ·A x))) (f_equal ·(list ·A) ·(list ·A) (cons ·A x) (firstn ·A k (app ·A xs l2)) (app ·A (firstn ·A k xs) (firstn ·A (sub k (length ·A xs)) l2)) (iHk xs l2))) (app ·A (cons ·A x xs) l2) (app_comm_cons ·A xs l2 x) 
 }) n.



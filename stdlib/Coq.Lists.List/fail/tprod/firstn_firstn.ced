module test.
data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

list_ind : ∀ A : ★ . ∀ P : Π l : list ·A . ★ . Π f : P (nil ·A) . Π f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . Π l : list ·A . P l = Λ A : ★ . Λ P : Π l : list ·A . ★ . λ f : P (nil ·A) . λ f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . λ l : list ·A . μ F. l @(λ l : list ·A . P l) {
  | nil ➔ f 
  | cons y l' ➔ f' y (to/list -isType/F l') (F l') 
 }.

data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

firstn : ∀ A : ★ . Π n : nat . Π l : list ·A . list ·A = Λ A : ★ . λ n : nat . λ l : list ·A . μ firstn. n @(λ n : nat . Π l : list ·A . list ·A) {
  | O ➔ λ _ . nil ·A 
  | S n' ➔ λ _ . σ l @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a l' ➔ cons ·A a (firstn n' l') 
 } 
 } l.

min : Π n : nat . Π m : nat . nat = λ n : nat . λ m : nat . μ min. n @(λ n : nat . Π m : nat . nat) {
  | O ➔ λ _ . O 
  | S n' ➔ λ _ . σ m @(λ m' : nat . nat) {
  | O ➔ O 
  | S m' ➔ S (min n' m') 
 } 
 } m.

eq_ind : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . Π f : P x . Π y : A . Π e : eq ·A x y . P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ f : P x . λ y : A . λ e : eq ·A x y . σ e @(λ y' : A . λ _ : eq ·A x y' . P y') {
  | eq_refl ➔ f 
 }.

eq_sym : ∀ A : ★ . Π x : A . Π y : A . eq ·A x y ➔ eq ·A y x = Λ A : ★ . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·A y' x) {
  | eq_refl ➔ eq_refl ·A x 
 }.

eq_ind_r : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . P x ➔ Π y : A . eq ·A y x ➔ P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ H : P x . λ y : A . λ H0 : eq ·A y x . eq_ind ·A x ·(λ y' : A . P y') H y (eq_sym ·A y x H0).

nat_ind : ∀ P : Π n : nat . ★ . Π f : P O . Π f' : Π n : nat . P n ➔ P (S n) . Π n : nat . P n = Λ P : Π n : nat . ★ . λ f : P O . λ f' : Π n : nat . P n ➔ P (S n) . λ n : nat . μ F. n @(λ n : nat . P n) {
  | O ➔ f 
  | S n' ➔ f' (to/nat -isType/F n') (F n') 
 }.

firstn_nil : ∀ A : ★ . Π n : nat . eq ·(list ·A) (firstn ·A n (nil ·A)) (nil ·A) = Λ A : ★ . λ n : nat . nat_ind ·(λ n' : nat . eq ·(list ·A) (firstn ·A n' (nil ·A)) (nil ·A)) (eq_refl ·(list ·A) (nil ·A)) (λ n' : nat . λ IHn : eq ·(list ·A) (firstn ·A n' (nil ·A)) (nil ·A) . eq_refl ·(list ·A) (nil ·A)) n.

eq_trans : ∀ A : ★ . Π x : A . Π y : A . Π z : A . eq ·A x y ➔ eq ·A y z ➔ eq ·A x z = Λ A : ★ . λ x : A . λ y : A . λ z : A . λ H : eq ·A x y . λ H0 : eq ·A y z . σ H0 @(λ y' : A . λ _ : eq ·A y y' . eq ·A x y') {
  | eq_refl ➔ H 
 }.

f_equal : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π x : A . Π y : A . eq ·A x y ➔ eq ·B (f x) (f y) = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·B (f x) (f y')) {
  | eq_refl ➔ eq_refl ·B (f x) 
 }.

firstn_firstn : ∀ A : ★ . Π l : list ·A . Π i : nat . Π j : nat . eq ·(list ·A) (firstn ·A i (firstn ·A j l)) (firstn ·A (min i j) l) = Λ A : ★ . λ l : list ·A . list_ind ·A (λ l' : list ·A . tprodT?) (λ i : nat . λ j : nat . eq_ind_r ·(list ·A) (nil ·A) ·(λ l' : list ·A . eq ·(list ·A) (firstn ·A i l') (firstn ·A (min i j) (nil ·A))) (eq_ind_r ·(list ·A) (nil ·A) ·(λ l' : list ·A . eq ·(list ·A) l' (firstn ·A (min i j) (nil ·A))) (eq_ind_r ·(list ·A) (nil ·A) ·(λ l' : list ·A . eq ·(list ·A) (nil ·A) l') (eq_refl ·(list ·A) (nil ·A)) (firstn ·A (min i j) (nil ·A)) (firstn_nil ·A (min i j))) (firstn ·A i (nil ·A)) (firstn_nil ·A i)) (firstn ·A j (nil ·A)) (firstn_nil ·A j)) (λ x : A . λ xs : list ·A . λ Hl : Π i : nat . Π j : nat . eq ·(list ·A) (firstn ·A i (firstn ·A j xs)) (firstn ·A (min i j) xs) . λ i : nat . σ i @(λ n : nat . Π j : nat . eq ·(list ·A) (firstn ·A n (firstn ·A j (cons ·A x xs))) (firstn ·A (min n j) (cons ·A x xs))) {
  | O ➔ λ j : nat . eq_refl ·(list ·A) (nil ·A) 
  | S i' ➔ λ j : nat . σ j @(λ n : nat . eq ·(list ·A) (firstn ·A (S i') (firstn ·A n (cons ·A x xs))) (firstn ·A (min (S i') n) (cons ·A x xs))) {
  | O ➔ eq_refl ·(list ·A) (nil ·A) 
  | S j' ➔ eq_trans ·(list ·A) (cons ·A x (firstn ·A i' (firstn ·A j' xs))) (cons ·A x (firstn ·A i' (firstn ·A j' xs))) (cons ·A x (firstn ·A (min i' j') xs)) (f_equal ·(Π l' : list ·A . list ·A) ·(list ·A) (λ f : Π l' : list ·A . list ·A . f (firstn ·A i' (firstn ·A j' xs))) (cons ·A x) (cons ·A x) (eq_refl ·(Π l' : list ·A . list ·A) (cons ·A x))) (f_equal ·(list ·A) ·(list ·A) (cons ·A x) (firstn ·A i' (firstn ·A j' xs)) (firstn ·A (min i' j') xs) (Hl i' j')) 
 } 
 }) l.



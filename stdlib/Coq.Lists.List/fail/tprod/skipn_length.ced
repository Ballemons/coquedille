module test.
data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

nat_ind : ∀ P : Π n : nat . ★ . Π f : P O . Π f' : Π n : nat . P n ➔ P (S n) . Π n : nat . P n = Λ P : Π n : nat . ★ . λ f : P O . λ f' : Π n : nat . P n ➔ P (S n) . λ n : nat . μ F. n @(λ n : nat . P n) {
  | O ➔ f 
  | S n' ➔ f' (to/nat -isType/F n') (F n') 
 }.

data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

length : ∀ A : ★ . list ·A ➔ nat = Λ A : ★ . λ l : list ·A . μ length. l @(λ l : list ·A . nat) {
  | nil ➔ O 
  | cons a l' ➔ S (length l') 
 }.

skipn : ∀ A : ★ . Π n : nat . Π l : list ·A . list ·A = Λ A : ★ . λ n : nat . λ l : list ·A . μ skipn. n @(λ n : nat . Π l : list ·A . list ·A) {
  | O ➔ λ _ . l 
  | S n' ➔ λ _ . σ l @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a l' ➔ skipn n' l' 
 } 
 } l.

sub : Π n : nat . Π m : nat . nat = λ n : nat . λ m : nat . μ sub. n @(λ n : nat . Π m : nat . nat) {
  | O ➔ λ _ . n 
  | S k ➔ λ _ . σ m @(λ m' : nat . nat) {
  | O ➔ n 
  | S l ➔ sub k l 
 } 
 } m.

eq_ind : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . Π f : P x . Π y : A . Π e : eq ·A x y . P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ f : P x . λ y : A . λ e : eq ·A x y . σ e @(λ y' : A . λ _ : eq ·A x y' . P y') {
  | eq_refl ➔ f 
 }.

eq_sym : ∀ A : ★ . Π x : A . Π y : A . eq ·A x y ➔ eq ·A y x = Λ A : ★ . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·A y' x) {
  | eq_refl ➔ eq_refl ·A x 
 }.

eq_ind_r : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . P x ➔ Π y : A . eq ·A y x ➔ P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ H : P x . λ y : A . λ H0 : eq ·A y x . eq_ind ·A x ·(λ y' : A . P y') H y (eq_sym ·A y x H0).

sub_0_r : Π n : nat . eq ·nat (sub n O) n = λ n : nat . σ n @(λ n' : nat . eq ·nat (sub n' O) n') {
  | O ➔ eq_refl ·nat O 
  | S n' ➔ eq_refl ·nat (S n') 
 }.

skipn_length : ∀ A : ★ . Π n : nat . Π l : list ·A . eq ·nat (length ·A (skipn ·A n l)) (sub (length ·A l) n) = Λ A : ★ . λ n : nat . nat_ind (λ n' : nat . tprodT?) (λ l : list ·A . eq_ind_r ·nat (length ·A l) ·(λ n' : nat . eq ·nat (length ·A l) n') (eq_refl ·nat (length ·A l)) (sub (length ·A l) O) (sub_0_r (length ·A l))) (λ n' : nat . λ IHn : Π l : list ·A . eq ·nat (length ·A (skipn ·A n' l)) (sub (length ·A l) n') . λ l : list ·A . σ l @(λ l' : list ·A . eq ·nat (length ·A (skipn ·A (S n') l')) (sub (length ·A l') (S n'))) {
  | nil ➔ eq_refl ·nat O 
  | cons a l' ➔ IHn l' 
 }) n.



module test.
data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

list_ind : ∀ A : ★ . ∀ P : Π l : list ·A . ★ . Π f : P (nil ·A) . Π f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . Π l : list ·A . P l = Λ A : ★ . Λ P : Π l : list ·A . ★ . λ f : P (nil ·A) . λ f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . λ l : list ·A . μ F. l @(λ l : list ·A . P l) {
  | nil ➔ f 
  | cons y l' ➔ f' y (to/list -isType/F l') (F l') 
 }.

fold_left : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B ➔ A . Π l : list ·B . Π a0 : A . A = Λ A : ★ . Λ B : ★ . λ f : A ➔ B ➔ A . λ l : list ·B . λ a0 : A . μ fold_left. l @(λ l : list ·B . Π a0 : A . A) {
  | nil ➔ λ _ . a0 
  | cons b t ➔ λ _ . fold_left t (f a0 b) 
 } a0.

fold_right : ∀ A : ★ . ∀ B : ★ . Π f : B ➔ A ➔ A . Π a0 : A . Π l : list ·B . A = Λ A : ★ . Λ B : ★ . λ f : B ➔ A ➔ A . λ a0 : A . λ l : list ·B . μ fold_right. l @(λ l : list ·B . A) {
  | nil ➔ a0 
  | cons b t ➔ f b (fold_right t) 
 }.

eq_ind : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . Π f : P x . Π y : A . Π e : eq ·A x y . P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ f : P x . λ y : A . λ e : eq ·A x y . σ e @(λ y' : A . λ _ : eq ·A x y' . P y') {
  | eq_refl ➔ f 
 }.

eq_sym : ∀ A : ★ . Π x : A . Π y : A . eq ·A x y ➔ eq ·A y x = Λ A : ★ . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·A y' x) {
  | eq_refl ➔ eq_refl ·A x 
 }.

eq_ind_r : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . P x ➔ Π y : A . eq ·A y x ➔ P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ H : P x . λ y : A . λ H0 : eq ·A y x . eq_ind ·A x ·(λ y' : A . P y') H y (eq_sym ·A y x H0).

fold_symmetric : ∀ A : ★ . Π f : A ➔ A ➔ A . Π assoc : Π x : A . Π y : A . Π z : A . eq ·A (f x (f y z)) (f (f x y) z) . Π a0 : A . Π comma0 : Π y : A . eq ·A (f a0 y) (f y a0) . Π l : list ·A . eq ·A (fold_left ·A ·A f l a0) (fold_right ·A ·A f a0 l) = Λ A : ★ . λ f : A ➔ A ➔ A . λ assoc : Π x : A . Π y : A . Π z : A . eq ·A (f x (f y z)) (f (f x y) z) . λ a0 : A . λ comma0 : Π y : A . eq ·A (f a0 y) (f y a0) . λ l : list ·A . list_ind ·A ·(λ l' : list ·A . eq ·A (fold_left ·A ·A f l' a0) (fold_right ·A ·A f a0 l')) (eq_refl ·A a0) (λ a1 : A . λ l' : list ·A . λ IHl : eq ·A (fold_left ·A ·A f l' a0) (fold_right ·A ·A f a0 l') . eq_ind ·A (fold_left ·A ·A f l' a0) ·(λ a : A . eq ·A (fold_left ·A ·A f l' (f a0 a1)) (f a1 a)) (list_ind ·A (λ l' : list ·A . tprodT?) comma0 (λ a : A . λ l' : list ·A . λ IHl' : Π a1' : A . eq ·A (fold_left ·A ·A f l' (f a0 a1')) (f a1' (fold_left ·A ·A f l' a0)) . λ a1' : A . eq_ind ·A (f a0 (f a1' a)) ·(λ a' : A . eq ·A (fold_left ·A ·A f l' a') (f a1' (fold_left ·A ·A f l' (f a0 a)))) (eq_ind_r ·A (f (f a1' a) (fold_left ·A ·A f l' a0)) ·(λ a' : A . eq ·A a' (f a1' (fold_left ·A ·A f l' (f a0 a)))) (eq_ind_r ·A (f a (fold_left ·A ·A f l' a0)) ·(λ a' : A . eq ·A (f (f a1' a) (fold_left ·A ·A f l' a0)) (f a1' a')) (eq_sym ·A (f a1' (f a (fold_left ·A ·A f l' a0))) (f (f a1' a) (fold_left ·A ·A f l' a0)) (assoc a1' a (fold_left ·A ·A f l' a0))) (fold_left ·A ·A f l' (f a0 a)) (IHl' a)) (fold_left ·A ·A f l' (f a0 (f a1' a))) (IHl' (f a1' a))) (f (f a0 a1') a) (assoc a0 a1' a)) l' a1) (fold_right ·A ·A f a0 l') IHl) l.



module test.
data sumbool (A : ★) (B : ★) : ★ =
  | left : A ➔ sumbool
  | right : B ➔ sumbool.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

False : ★ = ∀ X : ★ . X.

not : Π A : ★ . ★ = λ A : ★ . A ➔ False.

data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

data and (A : ★) (B : ★) : ★ =
  | conj : A ➔ B ➔ and.

data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

count_occ : ∀ A : ★ . Π eq_dec : Π x : A . Π y : A . sumbool ·(eq ·A x y) ·(not ·(eq ·A x y)) . Π l : list ·A . Π x : A . nat = Λ A : ★ . λ eq_dec : Π x : A . Π y : A . sumbool ·(eq ·A x y) ·(not ·(eq ·A x y)) . λ l : list ·A . λ x : A . μ count_occ. l @(λ l : list ·A . Π x : A . nat) {
  | nil ➔ λ _ . O 
  | cons y tl ➔ λ _ . ([ n : nat = count_occ tl x ] - σ eq_dec y x @(λ _ : sumbool ·(eq ·A y x) ·(not ·(eq ·A y x)) . nat) {
  | left XX ➔ S n 
  | right XX ➔ n 
 }) 
 } x.

list_ind : ∀ A : ★ . ∀ P : Π l : list ·A . ★ . Π f : P (nil ·A) . Π f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . Π l : list ·A . P l = Λ A : ★ . Λ P : Π l : list ·A . ★ . λ f : P (nil ·A) . λ f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . λ l : list ·A . μ F. l @(λ l : list ·A . P l) {
  | nil ➔ f 
  | cons y l' ➔ f' y (to/list -isType/F l') (F l') 
 }.

False_ind : ∀ P : ★ . False ➔ P = Λ P : ★ . λ f : False . f ·P.

eq_ind : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . Π f : P x . Π y : A . Π e : eq ·A x y . P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ f : P x . λ y : A . λ e : eq ·A x y . σ e @(λ y' : A . λ _ : eq ·A x y' . P y') {
  | eq_refl ➔ f 
 }.

data True : ★ =
  | I : True.

eq_sym : ∀ A : ★ . Π x : A . Π y : A . eq ·A x y ➔ eq ·A y x = Λ A : ★ . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·A y' x) {
  | eq_refl ➔ eq_refl ·A x 
 }.

eq_ind_r : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . P x ➔ Π y : A . eq ·A y x ➔ P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ H : P x . λ y : A . λ H0 : eq ·A y x . eq_ind ·A x ·(λ y' : A . P y') H y (eq_sym ·A y x H0).

count_occ_inv_nil : ∀ A : ★ . Π eq_dec : Π x : A . Π y : A . sumbool ·(eq ·A x y) ·(not ·(eq ·A x y)) . Π l : list ·A . and ·((Π x : A . eq ·nat (count_occ ·A eq_dec l x) O) ➔ eq ·(list ·A) l (nil ·A)) ·(eq ·(list ·A) l (nil ·A) ➔ Π x : A . eq ·nat (count_occ ·A eq_dec l x) O) = Λ A : ★ . λ eq_dec : Π x : A . Π y : A . sumbool ·(eq ·A x y) ·(not ·(eq ·A x y)) . λ l : list ·A . conj ·((Π x : A . eq ·nat (count_occ ·A eq_dec l x) O) ➔ eq ·(list ·A) l (nil ·A)) ·(eq ·(list ·A) l (nil ·A) ➔ Π x : A . eq ·nat (count_occ ·A eq_dec l x) O) (list_ind ·A (λ l' : list ·A . tprodT?) (λ H : Π x : A . eq ·nat (count_occ ·A eq_dec (nil ·A) x) O . eq_refl ·(list ·A) (nil ·A)) (λ x : A . λ l' : list ·A . λ IHl : (Π x' : A . eq ·nat (count_occ ·A eq_dec l' x') O) ➔ eq ·(list ·A) l' (nil ·A) . λ H : Π x' : A . eq ·nat (count_occ ·A eq_dec (cons ·A x l') x') O . σ eq_dec x x @(λ s : sumbool ·(eq ·A x x) ·(not ·(eq ·A x x)) . Π H' : eq ·nat σ s @(λ _ : sumbool ·(eq ·A x x) ·(not ·(eq ·A x x)) . nat) {
  | left XX ➔ S (count_occ ·A eq_dec l' x) 
  | right XX ➔ count_occ ·A eq_dec l' x 
 } O . eq ·(list ·A) (cons ·A x l') (nil ·A)) {
  | left _tmp ➔ λ H' : eq ·nat (S (count_occ ·A eq_dec l' x)) O . False_ind ·(eq ·(list ·A) (cons ·A x l') (nil ·A)) (eq_ind ·nat (S (count_occ ·A eq_dec l' x)) (λ e : nat . σ e @(λ n : nat . xx) {
  | O ➔ False 
  | S XX ➔ True 
 }) I O H') 
  | right NEQ ➔ λ H' : eq ·nat (count_occ ·A eq_dec l' x) O . False_ind ·(eq ·(list ·A) (cons ·A x l') (nil ·A)) (NEQ (eq_refl ·A x)) 
 } (H x)) l) (λ H : eq ·(list ·A) l (nil ·A) . eq_ind_r ·(list ·A) (nil ·A) (λ l' : list ·A . tprodT?) (λ x : A . eq_refl ·nat O) l H).



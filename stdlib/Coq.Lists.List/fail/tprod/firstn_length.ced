module test.
data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

nat_ind : ∀ P : Π n : nat . ★ . Π f : P O . Π f' : Π n : nat . P n ➔ P (S n) . Π n : nat . P n = Λ P : Π n : nat . ★ . λ f : P O . λ f' : Π n : nat . P n ➔ P (S n) . λ n : nat . μ F. n @(λ n : nat . P n) {
  | O ➔ f 
  | S n' ➔ f' (to/nat -isType/F n') (F n') 
 }.

data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

length : ∀ A : ★ . list ·A ➔ nat = Λ A : ★ . λ l : list ·A . μ length. l @(λ l : list ·A . nat) {
  | nil ➔ O 
  | cons a l' ➔ S (length l') 
 }.

firstn : ∀ A : ★ . Π n : nat . Π l : list ·A . list ·A = Λ A : ★ . λ n : nat . λ l : list ·A . μ firstn. n @(λ n : nat . Π l : list ·A . list ·A) {
  | O ➔ λ _ . nil ·A 
  | S n' ➔ λ _ . σ l @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a l' ➔ cons ·A a (firstn n' l') 
 } 
 } l.

min : Π n : nat . Π m : nat . nat = λ n : nat . λ m : nat . μ min. n @(λ n : nat . Π m : nat . nat) {
  | O ➔ λ _ . O 
  | S n' ➔ λ _ . σ m @(λ m' : nat . nat) {
  | O ➔ O 
  | S m' ➔ S (min n' m') 
 } 
 } m.

f_equal : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π x : A . Π y : A . eq ·A x y ➔ eq ·B (f x) (f y) = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·B (f x) (f y')) {
  | eq_refl ➔ eq_refl ·B (f x) 
 }.

f_equal_nat : ∀ B : ★ . Π f : nat ➔ B . Π x : nat . Π y : nat . eq ·nat x y ➔ eq ·B (f x) (f y) = f_equal ·nat.

firstn_length : ∀ A : ★ . Π n : nat . Π l : list ·A . eq ·nat (length ·A (firstn ·A n l)) (min n (length ·A l)) = Λ A : ★ . λ n : nat . nat_ind (λ n' : nat . tprodT?) (λ l : list ·A . σ l @(λ l' : list ·A . eq ·nat (length ·A (firstn ·A O l')) (min O (length ·A l'))) {
  | nil ➔ eq_refl ·nat O 
  | cons a l' ➔ eq_refl ·nat O 
 }) (λ n' : nat . λ IHn : Π l : list ·A . eq ·nat (length ·A (firstn ·A n' l)) (min n' (length ·A l)) . λ l : list ·A . σ l @(λ l' : list ·A . eq ·nat (length ·A (firstn ·A (S n') l')) (min (S n') (length ·A l'))) {
  | nil ➔ eq_refl ·nat O 
  | cons a l' ➔ f_equal_nat ·nat S (length ·A (firstn ·A n' l')) (min n' (length ·A l')) (IHn l') 
 }) n.



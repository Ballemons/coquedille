module test.
data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

list_ind : ∀ A : ★ . ∀ P : Π l : list ·A . ★ . Π f : P (nil ·A) . Π f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . Π l : list ·A . P l = Λ A : ★ . Λ P : Π l : list ·A . ★ . λ f : P (nil ·A) . λ f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . λ l : list ·A . μ F. l @(λ l : list ·A . P l) {
  | nil ➔ f 
  | cons y l' ➔ f' y (to/list -isType/F l') (F l') 
 }.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

length : ∀ A : ★ . list ·A ➔ nat = Λ A : ★ . λ l : list ·A . μ length. l @(λ l : list ·A . nat) {
  | nil ➔ O 
  | cons a l' ➔ S (length l') 
 }.

data prod (A : ★) (B : ★) : ★ =
  | pair : A ➔ B ➔ prod.

split : ∀ A : ★ . ∀ B : ★ . Π l : list ·(prod ·A ·B) . prod ·(list ·A) ·(list ·B) = Λ A : ★ . Λ B : ★ . λ l : list ·(prod ·A ·B) . μ split. l @(λ l : list ·(prod ·A ·B) . prod ·(list ·A) ·(list ·B)) {
  | nil ➔ pair ·(list ·A) ·(list ·B) (nil ·A) (nil ·B) 
  | cons p tl ➔ σ p @(λ p' : prod ·A ·B . prod ·(list ·A) ·(list ·B)) {
  | pair x y ➔ σ split tl @(λ p' : prod ·(list ·A) ·(list ·B) . prod ·(list ·A) ·(list ·B)) {
  | pair left right ➔ pair ·(list ·A) ·(list ·B) (cons ·A x left) (cons ·B y right) 
 } 
 } 
 }.

combine : ∀ A : ★ . ∀ B : ★ . Π l : list ·A . Π l' : list ·B . list ·(prod ·A ·B) = Λ A : ★ . Λ B : ★ . λ l : list ·A . λ l' : list ·B . μ combine. l @(λ l : list ·A . Π l' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ λ _ . nil ·(prod ·A ·B) 
  | cons x tl ➔ λ _ . σ l' @(λ l'' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ nil ·(prod ·A ·B) 
  | cons y tl' ➔ cons ·(prod ·A ·B) (pair ·A ·B x y) (combine tl tl') 
 } 
 } l'.

False : ★ = ∀ X : ★ . X.

False_ind : ∀ P : ★ . False ➔ P = Λ P : ★ . λ f : False . f ·P.

eq_ind : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . Π f : P x . Π y : A . Π e : eq ·A x y . P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ f : P x . λ y : A . λ e : eq ·A x y . σ e @(λ y' : A . λ _ : eq ·A x y' . P y') {
  | eq_refl ➔ f 
 }.

data True : ★ =
  | I : True.

eq_sym : ∀ A : ★ . Π x : A . Π y : A . eq ·A x y ➔ eq ·A y x = Λ A : ★ . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·A y' x) {
  | eq_refl ➔ eq_refl ·A x 
 }.

eq_ind_r : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . P x ➔ Π y : A . eq ·A y x ➔ P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ H : P x . λ y : A . λ H0 : eq ·A y x . eq_ind ·A x ·(λ y' : A . P y') H y (eq_sym ·A y x H0).

f_equal : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π x : A . Π y : A . eq ·A x y ➔ eq ·B (f x) (f y) = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·B (f x) (f y')) {
  | eq_refl ➔ eq_refl ·B (f x) 
 }.

combine_split : ∀ A : ★ . ∀ B : ★ . Π l : list ·A . Π l' : list ·B . eq ·nat (length ·A l) (length ·B l') ➔ eq ·(prod ·(list ·A) ·(list ·B)) (split ·A ·B (combine ·A ·B l l')) (pair ·(list ·A) ·(list ·B) l l') = Λ A : ★ . Λ B : ★ . λ l : list ·A . list_ind ·A (λ l' : list ·A . tprodT?) (λ l' : list ·B . σ l' @(λ l' : list ·B . eq ·nat (length ·A (nil ·A)) (length ·B l') ➔ eq ·(prod ·(list ·A) ·(list ·B)) (split ·A ·B (combine ·A ·B (nil ·A) l')) (pair ·(list ·A) ·(list ·B) (nil ·A) l')) {
  | nil ➔ λ H : eq ·nat O O . eq_refl ·(prod ·(list ·A) ·(list ·B)) (pair ·(list ·A) ·(list ·B) (nil ·A) (nil ·B)) 
  | cons b l'' ➔ λ H : eq ·nat O (S (length ·B l'')) . False_ind ·(eq ·(prod ·(list ·A) ·(list ·B)) (pair ·(list ·A) ·(list ·B) (nil ·A) (nil ·B)) (pair ·(list ·A) ·(list ·B) (nil ·A) (cons ·B b l''))) (eq_ind ·nat O (λ e : nat . σ e @(λ n : nat . xx) {
  | O ➔ True 
  | S XX ➔ False 
 }) I (S (length ·B l'')) H) 
 }) (λ a : A . λ l' : list ·A . λ IHl : Π l'' : list ·B . eq ·nat (length ·A l') (length ·B l'') ➔ eq ·(prod ·(list ·A) ·(list ·B)) (split ·A ·B (combine ·A ·B l' l'')) (pair ·(list ·A) ·(list ·B) l' l'') . λ l'' : list ·B . σ l'' @(λ l' : list ·B . eq ·nat (length ·A (cons ·A a l')) (length ·B l') ➔ eq ·(prod ·(list ·A) ·(list ·B)) (split ·A ·B (combine ·A ·B (cons ·A a l') l')) (pair ·(list ·A) ·(list ·B) (cons ·A a l') l')) {
  | nil ➔ λ H : eq ·nat (S (length ·A l')) O . False_ind ·(eq ·(prod ·(list ·A) ·(list ·B)) (pair ·(list ·A) ·(list ·B) (nil ·A) (nil ·B)) (pair ·(list ·A) ·(list ·B) (cons ·A a l') (nil ·B))) (eq_ind ·nat (S (length ·A l')) (λ e : nat . σ e @(λ n : nat . xx) {
  | O ➔ False 
  | S XX ➔ True 
 }) I O H) 
  | cons b l'' ➔ λ H : eq ·nat (S (length ·A l')) (S (length ·B l'')) . eq_ind_r ·(prod ·(list ·A) ·(list ·B)) (pair ·(list ·A) ·(list ·B) l' l'') ·(λ p : prod ·(list ·A) ·(list ·B) . eq ·(prod ·(list ·A) ·(list ·B)) σ p @(λ p' : prod ·(list ·A) ·(list ·B) . prod ·(list ·A) ·(list ·B)) {
  | pair left right ➔ pair ·(list ·A) ·(list ·B) (cons ·A a left) (cons ·B b right) 
 } (pair ·(list ·A) ·(list ·B) (cons ·A a l') (cons ·B b l''))) (eq_refl ·(prod ·(list ·A) ·(list ·B)) (pair ·(list ·A) ·(list ·B) (cons ·A a l') (cons ·B b l''))) (split ·A ·B (combine ·A ·B l' l'')) (IHl l'' (f_equal ·nat ·nat (λ e : nat . σ e @(λ n : nat . nat) {
  | O ➔ (λ l' : list ·A . μ length. l' @(λ l' : list ·A . nat) {
  | nil ➔ O 
  | cons a' l'' ➔ S (length l'') 
 }) l' 
  | S n ➔ n 
 }) (S (length ·A l')) (S (length ·B l'')) H)) 
 }) l.



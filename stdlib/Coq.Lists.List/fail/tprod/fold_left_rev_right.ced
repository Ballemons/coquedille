module test.
data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

list_ind : ∀ A : ★ . ∀ P : Π l : list ·A . ★ . Π f : P (nil ·A) . Π f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . Π l : list ·A . P l = Λ A : ★ . Λ P : Π l : list ·A . ★ . λ f : P (nil ·A) . λ f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . λ l : list ·A . μ F. l @(λ l : list ·A . P l) {
  | nil ➔ f 
  | cons y l' ➔ f' y (to/list -isType/F l') (F l') 
 }.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

fold_right : ∀ A : ★ . ∀ B : ★ . Π f : B ➔ A ➔ A . Π a0 : A . Π l : list ·B . A = Λ A : ★ . Λ B : ★ . λ f : B ➔ A ➔ A . λ a0 : A . λ l : list ·B . μ fold_right. l @(λ l : list ·B . A) {
  | nil ➔ a0 
  | cons b t ➔ f b (fold_right t) 
 }.

app : ∀ A : ★ . list ·A ➔ list ·A ➔ list ·A = Λ A : ★ . λ l : list ·A . λ m : list ·A . μ app. l @(λ l : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ _ . m 
  | cons a l1 ➔ λ _ . cons ·A a (app l1 m) 
 } m.

rev : ∀ A : ★ . Π l : list ·A . list ·A = Λ A : ★ . λ l : list ·A . μ rev. l @(λ l : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons x l' ➔ app ·A (rev l') (cons ·A x (nil ·A)) 
 }.

fold_left : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B ➔ A . Π l : list ·B . Π a0 : A . A = Λ A : ★ . Λ B : ★ . λ f : A ➔ B ➔ A . λ l : list ·B . λ a0 : A . μ fold_left. l @(λ l : list ·B . Π a0 : A . A) {
  | nil ➔ λ _ . a0 
  | cons b t ➔ λ _ . fold_left t (f a0 b) 
 } a0.

eq_ind : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . Π f : P x . Π y : A . Π e : eq ·A x y . P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ f : P x . λ y : A . λ e : eq ·A x y . σ e @(λ y' : A . λ _ : eq ·A x y' . P y') {
  | eq_refl ➔ f 
 }.

eq_sym : ∀ A : ★ . Π x : A . Π y : A . eq ·A x y ➔ eq ·A y x = Λ A : ★ . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·A y' x) {
  | eq_refl ➔ eq_refl ·A x 
 }.

eq_ind_r : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . P x ➔ Π y : A . eq ·A y x ➔ P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ H : P x . λ y : A . λ H0 : eq ·A y x . eq_ind ·A x ·(λ y' : A . P y') H y (eq_sym ·A y x H0).

eq_trans : ∀ A : ★ . Π x : A . Π y : A . Π z : A . eq ·A x y ➔ eq ·A y z ➔ eq ·A x z = Λ A : ★ . λ x : A . λ y : A . λ z : A . λ H : eq ·A x y . λ H0 : eq ·A y z . σ H0 @(λ y' : A . λ _ : eq ·A y y' . eq ·A x y') {
  | eq_refl ➔ H 
 }.

f_equal : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π x : A . Π y : A . eq ·A x y ➔ eq ·B (f x) (f y) = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·B (f x) (f y')) {
  | eq_refl ➔ eq_refl ·B (f x) 
 }.

fold_right_app : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B ➔ B . Π l : list ·A . Π l' : list ·A . Π i : B . eq ·B (fold_right ·B ·A f i (app ·A l l')) (fold_right ·B ·A f (fold_right ·B ·A f i l') l) = Λ A : ★ . Λ B : ★ . λ f : A ➔ B ➔ B . λ l : list ·A . list_ind ·A (λ l' : list ·A . tprodT?) (λ l' : list ·A . λ i : B . eq_refl ·B (fold_right ·B ·A f i l')) (λ a : A . λ l' : list ·A . λ IHl : Π l'' : list ·A . Π i : B . eq ·B (fold_right ·B ·A f i (app ·A l' l'')) (fold_right ·B ·A f (fold_right ·B ·A f i l'') l') . λ l'' : list ·A . λ i : B . ([ H : eq ·B (fold_right ·B ·A f i (app ·A l' l'')) (fold_right ·B ·A f (fold_right ·B ·A f i l'') l') = IHl l'' i ] - ([ H' : eq ·A a a = eq_refl ·A a ] - (λ H' : eq ·A a a . λ H0 : eq ·B (fold_right ·B ·A f i (app ·A l' l'')) (fold_right ·B ·A f (fold_right ·B ·A f i l'') l') . eq_trans ·B (f a (fold_right ·B ·A f i (app ·A l' l''))) (f a (fold_right ·B ·A f i (app ·A l' l''))) (f a (fold_right ·B ·A f (fold_right ·B ·A f i l'') l')) (f_equal ·(B ➔ B) ·B (λ f0 : B ➔ B . f0 (fold_right ·B ·A f i (app ·A l' l''))) (f a) (f a) (eq_refl ·(B ➔ B) (f a))) (f_equal ·B ·B (f a) (fold_right ·B ·A f i (app ·A l' l'')) (fold_right ·B ·A f (fold_right ·B ·A f i l'') l') H0)) H') H)) l.

fold_left_rev_right : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B ➔ B . Π l : list ·A . Π i : B . eq ·B (fold_right ·B ·A f i (rev ·A l)) (fold_left ·B ·A (λ x : B . λ y : A . f y x) l i) = Λ A : ★ . Λ B : ★ . λ f : A ➔ B ➔ B . λ l : list ·A . list_ind ·A (λ l' : list ·A . tprodT?) (λ i : B . eq_refl ·B i) (λ a : A . λ l' : list ·A . λ IHl : Π i : B . eq ·B (fold_right ·B ·A f i (rev ·A l')) (fold_left ·B ·A (λ x : B . λ y : A . f y x) l' i) . λ i : B . eq_ind_r ·B (fold_right ·B ·A f (fold_right ·B ·A f i (cons ·A a (nil ·A))) (rev ·A l')) ·(λ b : B . eq ·B b (fold_left ·B ·A (λ x : B . λ y : A . f y x) l' (f a i))) (IHl (f a i)) (fold_right ·B ·A f i (app ·A (rev ·A l') (cons ·A a (nil ·A)))) (fold_right_app ·A ·B f (rev ·A l') (cons ·A a (nil ·A)) i)) l.



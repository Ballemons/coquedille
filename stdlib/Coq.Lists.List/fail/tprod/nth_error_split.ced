module test.
data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

nat_ind : ∀ P : Π n : nat . ★ . Π f : P O . Π f' : Π n : nat . P n ➔ P (S n) . Π n : nat . P n = Λ P : Π n : nat . ★ . λ f : P O . λ f' : Π n : nat . P n ➔ P (S n) . λ n : nat . μ F. n @(λ n : nat . P n) {
  | O ➔ f 
  | S n' ➔ f' (to/nat -isType/F n') (F n') 
 }.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

data option (A : ★) : ★ =
  | Some : A ➔ option
  | None : option.

nth_error : ∀ A : ★ . Π l : list ·A . Π n : nat . option ·A = Λ A : ★ . λ l : list ·A . λ n : nat . μ nth_error. n @(λ n : nat . Π l : list ·A . option ·A) {
  | O ➔ λ _ . σ l @(λ l' : list ·A . option ·A) {
  | nil ➔ None ·A 
  | cons x l0 ➔ Some ·A x 
 } 
  | S n' ➔ λ _ . σ l @(λ l' : list ·A . option ·A) {
  | nil ➔ None ·A 
  | cons a l' ➔ nth_error n' l' 
 } 
 } l.

data ex (A : ★) (P : A ➔ ★) : ★ =
  | ex_intro : Π x : A . P x ➔ ex.

data and (A : ★) (B : ★) : ★ =
  | conj : A ➔ B ➔ and.

app : ∀ A : ★ . list ·A ➔ list ·A ➔ list ·A = Λ A : ★ . λ l : list ·A . λ m : list ·A . μ app. l @(λ l : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ _ . m 
  | cons a l1 ➔ λ _ . cons ·A a (app l1 m) 
 } m.

length : ∀ A : ★ . list ·A ➔ nat = Λ A : ★ . λ l : list ·A . μ length. l @(λ l : list ·A . nat) {
  | nil ➔ O 
  | cons a l' ➔ S (length l') 
 }.

False : ★ = ∀ X : ★ . X.

False_ind : ∀ P : ★ . False ➔ P = Λ P : ★ . λ f : False . f ·P.

eq_ind : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . Π f : P x . Π y : A . Π e : eq ·A x y . P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ f : P x . λ y : A . λ e : eq ·A x y . σ e @(λ y' : A . λ _ : eq ·A x y' . P y') {
  | eq_refl ➔ f 
 }.

data True : ★ =
  | I : True.

eq_sym : ∀ A : ★ . Π x : A . Π y : A . eq ·A x y ➔ eq ·A y x = Λ A : ★ . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·A y' x) {
  | eq_refl ➔ eq_refl ·A x 
 }.

eq_ind_r : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . P x ➔ Π y : A . eq ·A y x ➔ P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ H : P x . λ y : A . λ H0 : eq ·A y x . eq_ind ·A x ·(λ y' : A . P y') H y (eq_sym ·A y x H0).

f_equal : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π x : A . Π y : A . eq ·A x y ➔ eq ·B (f x) (f y) = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·B (f x) (f y')) {
  | eq_refl ➔ eq_refl ·B (f x) 
 }.

eq_trans : ∀ A : ★ . Π x : A . Π y : A . Π z : A . eq ·A x y ➔ eq ·A y z ➔ eq ·A x z = Λ A : ★ . λ x : A . λ y : A . λ z : A . λ H : eq ·A x y . λ H0 : eq ·A y z . σ H0 @(λ y' : A . λ _ : eq ·A y y' . eq ·A x y') {
  | eq_refl ➔ H 
 }.

nth_error_split : ∀ A : ★ . Π l : list ·A . Π n : nat . Π a : A . eq ·(option ·A) (nth_error ·A l n) (Some ·A a) ➔ ex ·(list ·A) ·(λ l1 : list ·A . ex ·(list ·A) ·(λ l2 : list ·A . and ·(eq ·(list ·A) l (app ·A l1 (cons ·A a l2))) ·(eq ·nat (length ·A l1) n))) = Λ A : ★ . λ l : list ·A . λ n : nat . λ a : A . nat_ind (λ n' : nat . tprodT?) (λ l0 : list ·A . σ l0 @(λ l' : list ·A . eq ·(option ·A) (nth_error ·A l' O) (Some ·A a) ➔ ex ·(list ·A) ·(λ l1 : list ·A . ex ·(list ·A) ·(λ l2 : list ·A . and ·(eq ·(list ·A) l' (app ·A l1 (cons ·A a l2))) ·(eq ·nat (length ·A l1) O)))) {
  | nil ➔ λ H : eq ·(option ·A) (nth_error ·A (nil ·A) O) (Some ·A a) . σ H @(λ y : option ·A . λ _ : eq ·(option ·A) (None ·A) y . eq ·(option ·A) y (Some ·A a) ➔ ex ·(list ·A) ·(λ l1 : list ·A . ex ·(list ·A) ·(λ l2 : list ·A . and ·(eq ·(list ·A) (nil ·A) (app ·A l1 (cons ·A a l2))) ·(eq ·nat (length ·A l1) O)))) {
  | eq_refl ➔ λ H0 : eq ·(option ·A) (None ·A) (Some ·A a) . False_ind ·(ex ·(list ·A) ·(λ l1 : list ·A . ex ·(list ·A) ·(λ l2 : list ·A . and ·(eq ·(list ·A) (nil ·A) (app ·A l1 (cons ·A a l2))) ·(eq ·nat (length ·A l1) O)))) (eq_ind ·(option ·A) (None ·A) (λ e : option ·A . σ e @(λ o : option ·A . xx) {
  | Some XX ➔ False 
  | None ➔ True 
 }) I (Some ·A a) H0) 
 } (eq_refl ·(option ·A) (Some ·A a)) 
  | cons x l' ➔ λ H : eq ·(option ·A) (nth_error ·A (cons ·A x l') O) (Some ·A a) . ex_intro ·(list ·A) ·(λ l1 : list ·A . ex ·(list ·A) ·(λ l2 : list ·A . and ·(eq ·(list ·A) (cons ·A x l') (app ·A l1 (cons ·A a l2))) ·(eq ·nat (length ·A l1) O))) (nil ·A) (ex_intro ·(list ·A) ·(λ l2 : list ·A . and ·(eq ·(list ·A) (cons ·A x l') (app ·A (nil ·A) (cons ·A a l2))) ·(eq ·nat (length ·A (nil ·A)) O)) l' (eq_ind_r ·A a ·(λ x' : A . and ·(eq ·(list ·A) (cons ·A x' l') (app ·A (nil ·A) (cons ·A a l'))) ·(eq ·nat (length ·A (nil ·A)) O)) (conj ·(eq ·(list ·A) (cons ·A a l') (app ·A (nil ·A) (cons ·A a l'))) ·(eq ·nat (length ·A (nil ·A)) O) (eq_refl ·(list ·A) (app ·A (nil ·A) (cons ·A a l'))) (eq_refl ·nat O)) x (f_equal ·(option ·A) ·A (λ e : option ·A . σ e @(λ o : option ·A . A) {
  | Some a' ➔ a' 
  | None ➔ x 
 }) (Some ·A x) (Some ·A a) H))) 
 }) (λ n' : nat . λ IH : Π l' : list ·A . eq ·(option ·A) (nth_error ·A l' n') (Some ·A a) ➔ ex ·(list ·A) ·(λ l1 : list ·A . ex ·(list ·A) ·(λ l2 : list ·A . and ·(eq ·(list ·A) l' (app ·A l1 (cons ·A a l2))) ·(eq ·nat (length ·A l1) n'))) . λ l0 : list ·A . σ l0 @(λ l' : list ·A . eq ·(option ·A) (nth_error ·A l' (S n')) (Some ·A a) ➔ ex ·(list ·A) ·(λ l1 : list ·A . ex ·(list ·A) ·(λ l2 : list ·A . and ·(eq ·(list ·A) l' (app ·A l1 (cons ·A a l2))) ·(eq ·nat (length ·A l1) (S n'))))) {
  | nil ➔ λ H : eq ·(option ·A) (nth_error ·A (nil ·A) (S n')) (Some ·A a) . σ H @(λ y : option ·A . λ _ : eq ·(option ·A) (None ·A) y . eq ·(option ·A) y (Some ·A a) ➔ ex ·(list ·A) ·(λ l1 : list ·A . ex ·(list ·A) ·(λ l2 : list ·A . and ·(eq ·(list ·A) (nil ·A) (app ·A l1 (cons ·A a l2))) ·(eq ·nat (length ·A l1) (S n'))))) {
  | eq_refl ➔ λ H0 : eq ·(option ·A) (None ·A) (Some ·A a) . False_ind ·(ex ·(list ·A) ·(λ l1 : list ·A . ex ·(list ·A) ·(λ l2 : list ·A . and ·(eq ·(list ·A) (nil ·A) (app ·A l1 (cons ·A a l2))) ·(eq ·nat (length ·A l1) (S n'))))) (eq_ind ·(option ·A) (None ·A) (λ e : option ·A . σ e @(λ o : option ·A . xx) {
  | Some XX ➔ False 
  | None ➔ True 
 }) I (Some ·A a) H0) 
 } (eq_refl ·(option ·A) (Some ·A a)) 
  | cons x l' ➔ λ H : eq ·(option ·A) (nth_error ·A (cons ·A x l') (S n')) (Some ·A a) . σ IH l' H @(λ _ : ex ·(list ·A) ·(λ l1 : list ·A . ex ·(list ·A) ·(λ l2 : list ·A . and ·(eq ·(list ·A) l' (app ·A l1 (cons ·A a l2))) ·(eq ·nat (length ·A l1) n'))) . ex ·(list ·A) ·(λ l1 : list ·A . ex ·(list ·A) ·(λ l2 : list ·A . and ·(eq ·(list ·A) (cons ·A x l') (app ·A l1 (cons ·A a l2))) ·(eq ·nat (length ·A l1) (S n'))))) {
  | ex_intro l1 H0 ➔ σ H0 @(λ _ : ex ·(list ·A) ·(λ l2 : list ·A . and ·(eq ·(list ·A) l' (app ·A l1 (cons ·A a l2))) ·(eq ·nat (length ·A l1) n')) . ex ·(list ·A) ·(λ l1' : list ·A . ex ·(list ·A) ·(λ l2 : list ·A . and ·(eq ·(list ·A) (cons ·A x l') (app ·A l1' (cons ·A a l2))) ·(eq ·nat (length ·A l1') (S n'))))) {
  | ex_intro l2 H0' ➔ σ H0' @(λ _ : and ·(eq ·(list ·A) l' (app ·A l1 (cons ·A a l2))) ·(eq ·nat (length ·A l1) n') . ex ·(list ·A) ·(λ l1' : list ·A . ex ·(list ·A) ·(λ l2' : list ·A . and ·(eq ·(list ·A) (cons ·A x l') (app ·A l1' (cons ·A a l2'))) ·(eq ·nat (length ·A l1') (S n'))))) {
  | conj H1 H2 ➔ ex_intro ·(list ·A) ·(λ l1' : list ·A . ex ·(list ·A) ·(λ l2' : list ·A . and ·(eq ·(list ·A) (cons ·A x l') (app ·A l1' (cons ·A a l2'))) ·(eq ·nat (length ·A l1') (S n')))) (cons ·A x l1) (ex_intro ·(list ·A) ·(λ l2' : list ·A . and ·(eq ·(list ·A) (cons ·A x l') (app ·A (cons ·A x l1) (cons ·A a l2'))) ·(eq ·nat (length ·A (cons ·A x l1)) (S n'))) l2 (conj ·(eq ·(list ·A) (cons ·A x l') (cons ·A x (app ·A l1 (cons ·A a l2)))) ·(eq ·nat (S (length ·A l1)) (S n')) (eq_trans ·(list ·A) (cons ·A x l') (cons ·A x l') (cons ·A x (app ·A l1 (cons ·A a l2))) (f_equal ·(Π l' : list ·A . list ·A) ·(list ·A) (λ f : Π l' : list ·A . list ·A . f l') (cons ·A x) (cons ·A x) (eq_refl ·(Π l' : list ·A . list ·A) (cons ·A x))) (f_equal ·(list ·A) ·(list ·A) (cons ·A x) l' (app ·A l1 (cons ·A a l2)) H1)) (eq_trans ·nat (S (length ·A l1)) (S (length ·A l1)) (S n') (f_equal ·(nat ➔ nat) ·nat (λ f : nat ➔ nat . f (length ·A l1)) S S (eq_refl ·(nat ➔ nat) S)) (f_equal ·nat ·nat S (length ·A l1) n' H2)))) 
 } 
 } 
 } 
 }) n l.



module test.
data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

nat_ind : ∀ P : Π n : nat . ★ . Π f : P O . Π f' : Π n : nat . P n ➔ P (S n) . Π n : nat . P n = Λ P : Π n : nat . ★ . λ f : P O . λ f' : Π n : nat . P n ➔ P (S n) . λ n : nat . μ F. n @(λ n : nat . P n) {
  | O ➔ f 
  | S n' ➔ f' (to/nat -isType/F n') (F n') 
 }.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

map : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π l : list ·A . list ·B = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ l : list ·A . μ map. l @(λ l : list ·A . list ·B) {
  | nil ➔ nil ·B 
  | cons a t ➔ cons ·B (f a) (map t) 
 }.

seq : Π start : nat . Π len : nat . list ·nat = λ start : nat . λ len : nat . μ seq. len @(λ len : nat . Π start : nat . list ·nat) {
  | O ➔ λ _ . nil ·nat 
  | S len' ➔ λ _ . cons ·nat start (seq len' (S start)) 
 } start.

eq_ind : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . Π f : P x . Π y : A . Π e : eq ·A x y . P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ f : P x . λ y : A . λ e : eq ·A x y . σ e @(λ y' : A . λ _ : eq ·A x y' . P y') {
  | eq_refl ➔ f 
 }.

eq_sym : ∀ A : ★ . Π x : A . Π y : A . eq ·A x y ➔ eq ·A y x = Λ A : ★ . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·A y' x) {
  | eq_refl ➔ eq_refl ·A x 
 }.

eq_ind_r : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . P x ➔ Π y : A . eq ·A y x ➔ P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ H : P x . λ y : A . λ H0 : eq ·A y x . eq_ind ·A x ·(λ y' : A . P y') H y (eq_sym ·A y x H0).

seq_shift : Π len : nat . Π start : nat . eq ·(list ·nat) (map ·nat ·nat S (seq start len)) (seq (S start) len) = λ len : nat . nat_ind (λ len' : nat . tprodT?) (λ start : nat . eq_refl ·(list ·nat) (nil ·nat)) (λ len' : nat . λ IHlen : Π start : nat . eq ·(list ·nat) (map ·nat ·nat S (seq start len')) (seq (S start) len') . λ start : nat . eq_ind_r ·(list ·nat) (seq (S (S start)) len') ·(λ l : list ·nat . eq ·(list ·nat) (cons ·nat (S start) l) (cons ·nat (S start) (seq (S (S start)) len'))) (eq_refl ·(list ·nat) (cons ·nat (S start) (seq (S (S start)) len'))) (map ·nat ·nat S (seq (S start) len')) (IHlen (S start))) len.



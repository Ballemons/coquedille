module test.
data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

list_ind : ∀ A : ★ . ∀ P : Π l : list ·A . ★ . Π f : P (nil ·A) . Π f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . Π l : list ·A . P l = Λ A : ★ . Λ P : Π l : list ·A . ★ . λ f : P (nil ·A) . λ f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . λ l : list ·A . μ F. l @(λ l : list ·A . P l) {
  | nil ➔ f 
  | cons y l' ➔ f' y (to/list -isType/F l') (F l') 
 }.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

data prod (A : ★) (B : ★) : ★ =
  | pair : A ➔ B ➔ prod.

combine : ∀ A : ★ . ∀ B : ★ . Π l : list ·A . Π l' : list ·B . list ·(prod ·A ·B) = Λ A : ★ . Λ B : ★ . λ l : list ·A . λ l' : list ·B . μ combine. l @(λ l : list ·A . Π l' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ λ _ . nil ·(prod ·A ·B) 
  | cons x tl ➔ λ _ . σ l' @(λ l'' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ nil ·(prod ·A ·B) 
  | cons y tl' ➔ cons ·(prod ·A ·B) (pair ·A ·B x y) (combine tl tl') 
 } 
 } l'.

data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

firstn : ∀ A : ★ . Π n : nat . Π l : list ·A . list ·A = Λ A : ★ . λ n : nat . λ l : list ·A . μ firstn. n @(λ n : nat . Π l : list ·A . list ·A) {
  | O ➔ λ _ . nil ·A 
  | S n' ➔ λ _ . σ l @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a l' ➔ cons ·A a (firstn n' l') 
 } 
 } l.

length : ∀ A : ★ . list ·A ➔ nat = Λ A : ★ . λ l : list ·A . μ length. l @(λ l : list ·A . nat) {
  | nil ➔ O 
  | cons a l' ➔ S (length l') 
 }.

eq_ind : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . Π f : P x . Π y : A . Π e : eq ·A x y . P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ f : P x . λ y : A . λ e : eq ·A x y . σ e @(λ y' : A . λ _ : eq ·A x y' . P y') {
  | eq_refl ➔ f 
 }.

combine_firstn_l : ∀ A : ★ . ∀ B : ★ . Π l : list ·A . Π l' : list ·B . eq ·(list ·(prod ·A ·B)) (combine ·A ·B l l') (combine ·A ·B l (firstn ·B (length ·A l) l')) = Λ A : ★ . Λ B : ★ . λ l : list ·A . list_ind ·A (λ l' : list ·A . tprodT?) (λ l' : list ·B . eq_refl ·(list ·(prod ·A ·B)) (combine ·A ·B (nil ·A) (firstn ·B (length ·A (nil ·A)) l'))) (λ x : A . λ l' : list ·A . λ IHl : Π l'' : list ·B . eq ·(list ·(prod ·A ·B)) (combine ·A ·B l' l'') (combine ·A ·B l' (firstn ·B (length ·A l') l'')) . λ l'' : list ·B . σ l'' @(λ l' : list ·B . eq ·(list ·(prod ·A ·B)) (combine ·A ·B (cons ·A x l') l') (combine ·A ·B (cons ·A x l') (firstn ·B (length ·A (cons ·A x l')) l'))) {
  | nil ➔ eq_refl ·(list ·(prod ·A ·B)) (combine ·A ·B (cons ·A x l') (firstn ·B (length ·A (cons ·A x l')) (nil ·B))) 
  | cons x' l'' ➔ eq_ind ·(list ·(prod ·A ·B)) (combine ·A ·B l' l'') ·(λ l' : list ·(prod ·A ·B) . eq ·(list ·(prod ·A ·B)) (cons ·(prod ·A ·B) (pair ·A ·B x x') (combine ·A ·B l' l'')) (cons ·(prod ·A ·B) (pair ·A ·B x x') l')) (eq_refl ·(list ·(prod ·A ·B)) (cons ·(prod ·A ·B) (pair ·A ·B x x') (combine ·A ·B l' l''))) (combine ·A ·B l' (firstn ·B (length ·A l') l'')) (IHl l'') 
 }) l.



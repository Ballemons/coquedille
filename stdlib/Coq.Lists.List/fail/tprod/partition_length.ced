module test.
data bool : ★ =
  | true : bool
  | false : bool.

data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

list_ind : ∀ A : ★ . ∀ P : Π l : list ·A . ★ . Π f : P (nil ·A) . Π f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . Π l : list ·A . P l = Λ A : ★ . Λ P : Π l : list ·A . ★ . λ f : P (nil ·A) . λ f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . λ l : list ·A . μ F. l @(λ l : list ·A . P l) {
  | nil ➔ f 
  | cons y l' ➔ f' y (to/list -isType/F l') (F l') 
 }.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

data prod (A : ★) (B : ★) : ★ =
  | pair : A ➔ B ➔ prod.

partition : ∀ A : ★ . Π f : A ➔ bool . Π l : list ·A . prod ·(list ·A) ·(list ·A) = Λ A : ★ . λ f : A ➔ bool . λ l : list ·A . μ partition. l @(λ l : list ·A . prod ·(list ·A) ·(list ·A)) {
  | nil ➔ pair ·(list ·A) ·(list ·A) (nil ·A) (nil ·A) 
  | cons x tl ➔ σ partition tl @(λ p : prod ·(list ·A) ·(list ·A) . prod ·(list ·A) ·(list ·A)) {
  | pair g d ➔ σ f x @(λ _ : bool . prod ·(list ·A) ·(list ·A)) {
  | true ➔ pair ·(list ·A) ·(list ·A) (cons ·A x g) d 
  | false ➔ pair ·(list ·A) ·(list ·A) g (cons ·A x d) 
 } 
 } 
 }.

data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

length : ∀ A : ★ . list ·A ➔ nat = Λ A : ★ . λ l : list ·A . μ length. l @(λ l : list ·A . nat) {
  | nil ➔ O 
  | cons a l' ➔ S (length l') 
 }.

add : Π n : nat . Π m : nat . nat = λ n : nat . λ m : nat . μ add. n @(λ n : nat . Π m : nat . nat) {
  | O ➔ λ _ . m 
  | S p ➔ λ _ . S (add p m) 
 } m.

eq_ind : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . Π f : P x . Π y : A . Π e : eq ·A x y . P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ f : P x . λ y : A . λ e : eq ·A x y . σ e @(λ y' : A . λ _ : eq ·A x y' . P y') {
  | eq_refl ➔ f 
 }.

f_equal : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π x : A . Π y : A . eq ·A x y ➔ eq ·B (f x) (f y) = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·B (f x) (f y')) {
  | eq_refl ➔ eq_refl ·B (f x) 
 }.

eq_sym : ∀ A : ★ . Π x : A . Π y : A . eq ·A x y ➔ eq ·A y x = Λ A : ★ . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·A y' x) {
  | eq_refl ➔ eq_refl ·A x 
 }.

eq_ind_r : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . P x ➔ Π y : A . eq ·A y x ➔ P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ H : P x . λ y : A . λ H0 : eq ·A y x . eq_ind ·A x ·(λ y' : A . P y') H y (eq_sym ·A y x H0).

nat_ind : ∀ P : Π n : nat . ★ . Π f : P O . Π f' : Π n : nat . P n ➔ P (S n) . Π n : nat . P n = Λ P : Π n : nat . ★ . λ f : P O . λ f' : Π n : nat . P n ➔ P (S n) . λ n : nat . μ F. n @(λ n : nat . P n) {
  | O ➔ f 
  | S n' ➔ f' (to/nat -isType/F n') (F n') 
 }.

f_equal_nat : ∀ B : ★ . Π f : nat ➔ B . Π x : nat . Π y : nat . eq ·nat x y ➔ eq ·B (f x) (f y) = f_equal ·nat.

plus_n_Sm : Π n : nat . Π m : nat . eq ·nat (S (add n m)) (add n (S m)) = λ n : nat . λ m : nat . nat_ind ·(λ n' : nat . eq ·nat (S (add n' m)) (add n' (S m))) (eq_refl ·nat (S m)) (λ n' : nat . λ IHn : eq ·nat (S (add n' m)) (add n' (S m)) . f_equal_nat ·nat S (S (add n' m)) (add n' (S m)) IHn) n.

partition_length : ∀ A : ★ . Π f : A ➔ bool . Π l : list ·A . Π l1 : list ·A . Π l2 : list ·A . eq ·(prod ·(list ·A) ·(list ·A)) (partition ·A f l) (pair ·(list ·A) ·(list ·A) l1 l2) ➔ eq ·nat (length ·A l) (add (length ·A l1) (length ·A l2)) = Λ A : ★ . λ f : A ➔ bool . λ l : list ·A . λ l1 : list ·A . λ l2 : list ·A . list_ind ·A (λ l' : list ·A . tprodT?) (λ l1' : list ·A . λ l2' : list ·A . λ H : eq ·(prod ·(list ·A) ·(list ·A)) (partition ·A f (nil ·A)) (pair ·(list ·A) ·(list ·A) l1' l2') . eq_ind ·(list ·A) (nil ·A) (λ l1' : list ·A . tprodT?) (λ H' : eq ·(prod ·(list ·A) ·(list ·A)) (partition ·A f (nil ·A)) (pair ·(list ·A) ·(list ·A) (nil ·A) l2') . λ H0 : eq ·(list ·A) (nil ·A) l2' . eq_ind ·(list ·A) (nil ·A) (λ l2' : list ·A . tprodT?) (λ H' : eq ·(prod ·(list ·A) ·(list ·A)) (partition ·A f (nil ·A)) (pair ·(list ·A) ·(list ·A) (nil ·A) (nil ·A)) . eq_refl ·nat (add (length ·A (nil ·A)) (length ·A (nil ·A)))) l2' H0 H') l1' (f_equal ·(prod ·(list ·A) ·(list ·A)) ·(list ·A) (λ e : prod ·(list ·A) ·(list ·A) . σ e @(λ p : prod ·(list ·A) ·(list ·A) . list ·A) {
  | pair l' l' ➔ l' 
 }) (partition ·A f (nil ·A)) (pair ·(list ·A) ·(list ·A) l1' l2') H) H (f_equal ·(prod ·(list ·A) ·(list ·A)) ·(list ·A) (λ e : prod ·(list ·A) ·(list ·A) . σ e @(λ p : prod ·(list ·A) ·(list ·A) . list ·A) {
  | pair l' l' ➔ l' 
 }) (partition ·A f (nil ·A)) (pair ·(list ·A) ·(list ·A) l1' l2') H)) (λ a : A . λ l' : list ·A . λ Hrec : Π l1' : list ·A . Π l2' : list ·A . eq ·(prod ·(list ·A) ·(list ·A)) (partition ·A f l') (pair ·(list ·A) ·(list ·A) l1' l2') ➔ eq ·nat (length ·A l') (add (length ·A l1') (length ·A l2')) . λ l1' : list ·A . λ l2' : list ·A . σ f a @(λ b : bool . eq ·(prod ·(list ·A) ·(list ·A)) σ partition ·A f l' @(λ p : prod ·(list ·A) ·(list ·A) . prod ·(list ·A) ·(list ·A)) {
  | pair g d ➔ σ b @(λ _ : bool . prod ·(list ·A) ·(list ·A)) {
  | true ➔ pair ·(list ·A) ·(list ·A) (cons ·A a g) d 
  | false ➔ pair ·(list ·A) ·(list ·A) g (cons ·A a d) 
 } 
 } (pair ·(list ·A) ·(list ·A) l1' l2') ➔ eq ·nat (S (length ·A l')) (add (length ·A l1') (length ·A l2'))) {
  | true ➔ σ partition ·A f l' @(λ p : prod ·(list ·A) ·(list ·A) . Π Hrec' : Π l1' : list ·A . Π l2' : list ·A . eq ·(prod ·(list ·A) ·(list ·A)) p (pair ·(list ·A) ·(list ·A) l1' l2') ➔ eq ·nat (length ·A l') (add (length ·A l1') (length ·A l2')) . eq ·(prod ·(list ·A) ·(list ·A)) σ p @(λ p' : prod ·(list ·A) ·(list ·A) . prod ·(list ·A) ·(list ·A)) {
  | pair g d ➔ pair ·(list ·A) ·(list ·A) (cons ·A a g) d 
 } (pair ·(list ·A) ·(list ·A) l1' l2') ➔ eq ·nat (S (length ·A l')) (add (length ·A l1') (length ·A l2'))) {
  | pair left right ➔ λ Hrec' : Π l1' : list ·A . Π l2' : list ·A . eq ·(prod ·(list ·A) ·(list ·A)) (pair ·(list ·A) ·(list ·A) left right) (pair ·(list ·A) ·(list ·A) l1' l2') ➔ eq ·nat (length ·A l') (add (length ·A l1') (length ·A l2')) . λ H : eq ·(prod ·(list ·A) ·(list ·A)) (pair ·(list ·A) ·(list ·A) (cons ·A a left) right) (pair ·(list ·A) ·(list ·A) l1' l2') . eq_ind ·(list ·A) (cons ·A a left) (λ l1' : list ·A . tprodT?) (λ H' : eq ·(prod ·(list ·A) ·(list ·A)) (pair ·(list ·A) ·(list ·A) (cons ·A a left) right) (pair ·(list ·A) ·(list ·A) (cons ·A a left) l2') . λ H0 : eq ·(list ·A) right l2' . eq_ind ·(list ·A) right (λ l2' : list ·A . tprodT?) (λ H' : eq ·(prod ·(list ·A) ·(list ·A)) (pair ·(list ·A) ·(list ·A) (cons ·A a left) right) (pair ·(list ·A) ·(list ·A) (cons ·A a left) right) . eq_ind_r ·nat (add (length ·A left) (length ·A right)) ·(λ n : nat . eq ·nat (S n) (S (add (length ·A left) (length ·A right)))) (eq_refl ·nat (S (add (length ·A left) (length ·A right)))) (length ·A l') (Hrec' left right (eq_refl ·(prod ·(list ·A) ·(list ·A)) (pair ·(list ·A) ·(list ·A) left right)))) l2' H0 H') l1' (f_equal ·(prod ·(list ·A) ·(list ·A)) ·(list ·A) (λ e : prod ·(list ·A) ·(list ·A) . σ e @(λ p : prod ·(list ·A) ·(list ·A) . list ·A) {
  | pair l' l' ➔ l' 
 }) (pair ·(list ·A) ·(list ·A) (cons ·A a left) right) (pair ·(list ·A) ·(list ·A) l1' l2') H) H (f_equal ·(prod ·(list ·A) ·(list ·A)) ·(list ·A) (λ e : prod ·(list ·A) ·(list ·A) . σ e @(λ p : prod ·(list ·A) ·(list ·A) . list ·A) {
  | pair l' l' ➔ l' 
 }) (pair ·(list ·A) ·(list ·A) (cons ·A a left) right) (pair ·(list ·A) ·(list ·A) l1' l2') H) 
 } Hrec 
  | false ➔ σ partition ·A f l' @(λ p : prod ·(list ·A) ·(list ·A) . Π Hrec' : Π l1' : list ·A . Π l2' : list ·A . eq ·(prod ·(list ·A) ·(list ·A)) p (pair ·(list ·A) ·(list ·A) l1' l2') ➔ eq ·nat (length ·A l') (add (length ·A l1') (length ·A l2')) . eq ·(prod ·(list ·A) ·(list ·A)) σ p @(λ p' : prod ·(list ·A) ·(list ·A) . prod ·(list ·A) ·(list ·A)) {
  | pair g d ➔ pair ·(list ·A) ·(list ·A) g (cons ·A a d) 
 } (pair ·(list ·A) ·(list ·A) l1' l2') ➔ eq ·nat (S (length ·A l')) (add (length ·A l1') (length ·A l2'))) {
  | pair left right ➔ λ Hrec' : Π l1' : list ·A . Π l2' : list ·A . eq ·(prod ·(list ·A) ·(list ·A)) (pair ·(list ·A) ·(list ·A) left right) (pair ·(list ·A) ·(list ·A) l1' l2') ➔ eq ·nat (length ·A l') (add (length ·A l1') (length ·A l2')) . λ H : eq ·(prod ·(list ·A) ·(list ·A)) (pair ·(list ·A) ·(list ·A) left (cons ·A a right)) (pair ·(list ·A) ·(list ·A) l1' l2') . eq_ind ·(list ·A) left (λ l1' : list ·A . tprodT?) (λ H' : eq ·(prod ·(list ·A) ·(list ·A)) (pair ·(list ·A) ·(list ·A) left (cons ·A a right)) (pair ·(list ·A) ·(list ·A) left l2') . λ H0 : eq ·(list ·A) (cons ·A a right) l2' . eq_ind ·(list ·A) (cons ·A a right) (λ l2' : list ·A . tprodT?) (λ H' : eq ·(prod ·(list ·A) ·(list ·A)) (pair ·(list ·A) ·(list ·A) left (cons ·A a right)) (pair ·(list ·A) ·(list ·A) left (cons ·A a right)) . eq_ind_r ·nat (add (length ·A left) (length ·A right)) ·(λ n : nat . eq ·nat (S n) (add (length ·A left) (S (length ·A right)))) (plus_n_Sm (length ·A left) (length ·A right)) (length ·A l') (Hrec' left right (eq_refl ·(prod ·(list ·A) ·(list ·A)) (pair ·(list ·A) ·(list ·A) left right)))) l2' H0 H') l1' (f_equal ·(prod ·(list ·A) ·(list ·A)) ·(list ·A) (λ e : prod ·(list ·A) ·(list ·A) . σ e @(λ p : prod ·(list ·A) ·(list ·A) . list ·A) {
  | pair l' l' ➔ l' 
 }) (pair ·(list ·A) ·(list ·A) left (cons ·A a right)) (pair ·(list ·A) ·(list ·A) l1' l2') H) H (f_equal ·(prod ·(list ·A) ·(list ·A)) ·(list ·A) (λ e : prod ·(list ·A) ·(list ·A) . σ e @(λ p : prod ·(list ·A) ·(list ·A) . list ·A) {
  | pair l' l' ➔ l' 
 }) (pair ·(list ·A) ·(list ·A) left (cons ·A a right)) (pair ·(list ·A) ·(list ·A) l1' l2') H) 
 } Hrec 
 }) l l1 l2.



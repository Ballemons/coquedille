module test.
data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

list_ind : ∀ A : ★ . ∀ P : Π l : list ·A . ★ . Π f : P (nil ·A) . Π f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . Π l : list ·A . P l = Λ A : ★ . Λ P : Π l : list ·A . ★ . λ f : P (nil ·A) . λ f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . λ l : list ·A . μ F. l @(λ l : list ·A . P l) {
  | nil ➔ f 
  | cons y l' ➔ f' y (to/list -isType/F l') (F l') 
 }.

False : ★ = ∀ X : ★ . X.

not : Π A : ★ . ★ = λ A : ★ . A ➔ False.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

removelast : ∀ A : ★ . Π l : list ·A . list ·A = Λ A : ★ . λ l : list ·A . μ removelast. l @(λ l : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a l' ➔ σ l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a0 l0 ➔ cons ·A a (removelast l') 
 } 
 }.

app : ∀ A : ★ . list ·A ➔ list ·A ➔ list ·A = Λ A : ★ . λ l : list ·A . λ m : list ·A . μ app. l @(λ l : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ _ . m 
  | cons a l1 ➔ λ _ . cons ·A a (app l1 m) 
 } m.

False_ind : ∀ P : ★ . False ➔ P = Λ P : ★ . λ f : False . f ·P.

eq_trans : ∀ A : ★ . Π x : A . Π y : A . Π z : A . eq ·A x y ➔ eq ·A y z ➔ eq ·A x z = Λ A : ★ . λ x : A . λ y : A . λ z : A . λ H : eq ·A x y . λ H0 : eq ·A y z . σ H0 @(λ y' : A . λ _ : eq ·A y y' . eq ·A x y') {
  | eq_refl ➔ H 
 }.

f_equal : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π x : A . Π y : A . eq ·A x y ➔ eq ·B (f x) (f y) = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·B (f x) (f y')) {
  | eq_refl ➔ eq_refl ·B (f x) 
 }.

eq_ind : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . Π f : P x . Π y : A . Π e : eq ·A x y . P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ f : P x . λ y : A . λ e : eq ·A x y . σ e @(λ y' : A . λ _ : eq ·A x y' . P y') {
  | eq_refl ➔ f 
 }.

data True : ★ =
  | I : True.

removelast_app : ∀ A : ★ . Π l : list ·A . Π l' : list ·A . not ·(eq ·(list ·A) l' (nil ·A)) ➔ eq ·(list ·A) (removelast ·A (app ·A l l')) (app ·A l (removelast ·A l')) = Λ A : ★ . λ l : list ·A . list_ind ·A (λ l' : list ·A . tprodT?) (λ l' : list ·A . λ H : not ·(eq ·(list ·A) l' (nil ·A)) . eq_refl ·(list ·A) (removelast ·A l')) (λ a : A . λ l' : list ·A . λ IHl : Π l'' : list ·A . not ·(eq ·(list ·A) l'' (nil ·A)) ➔ eq ·(list ·A) (removelast ·A (app ·A l' l'')) (app ·A l' (removelast ·A l'')) . λ l'' : list ·A . λ H : not ·(eq ·(list ·A) l'' (nil ·A)) . σ app ·A l' l'' @(λ l' : list ·A . Π IHl' : eq ·(list ·A) (removelast ·A l') (app ·A l' (removelast ·A l'')) . Π H0 : not ·(eq ·(list ·A) l' (nil ·A)) . eq ·(list ·A) σ l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a0 l0 ➔ cons ·A a (removelast ·A l') 
 } (cons ·A a (app ·A l' (removelast ·A l'')))) {
  | nil ➔ λ IHl' : eq ·(list ·A) (removelast ·A (nil ·A)) (app ·A l' (removelast ·A l'')) . λ H0 : not ·(eq ·(list ·A) (nil ·A) (nil ·A)) . False_ind ·(eq ·(list ·A) (nil ·A) (cons ·A a (app ·A l' (removelast ·A l'')))) (H0 (eq_refl ·(list ·A) (nil ·A))) 
  | cons a0 l0 ➔ λ IHl' : eq ·(list ·A) (removelast ·A (cons ·A a0 l0)) (app ·A l' (removelast ·A l'')) . λ H0 : not ·(eq ·(list ·A) (cons ·A a0 l0) (nil ·A)) . eq_trans ·(list ·A) (cons ·A a (removelast ·A (cons ·A a0 l0))) (cons ·A a (removelast ·A (cons ·A a0 l0))) (cons ·A a (app ·A l' (removelast ·A l''))) (f_equal ·(Π l' : list ·A . list ·A) ·(list ·A) (λ f : Π l' : list ·A . list ·A . f (removelast ·A (cons ·A a0 l0))) (cons ·A a) (cons ·A a) (eq_refl ·(Π l' : list ·A . list ·A) (cons ·A a))) (f_equal ·(list ·A) ·(list ·A) (cons ·A a) (removelast ·A (cons ·A a0 l0)) (app ·A l' (removelast ·A l'')) IHl') 
 } (IHl l'' H) (σ l' @(λ l' : list ·A . Π IHl' : Π l'' : list ·A . not ·(eq ·(list ·A) l'' (nil ·A)) ➔ eq ·(list ·A) (removelast ·A (app ·A l' l'')) (app ·A l' (removelast ·A l'')) . not ·(eq ·(list ·A) (app ·A l' l'') (nil ·A))) {
  | nil ➔ λ IHl' : Π l'' : list ·A . not ·(eq ·(list ·A) l'' (nil ·A)) ➔ eq ·(list ·A) (removelast ·A (app ·A (nil ·A) l'')) (app ·A (nil ·A) (removelast ·A l'')) . H 
  | cons a0 l' ➔ λ IHl' : Π l'' : list ·A . not ·(eq ·(list ·A) l'' (nil ·A)) ➔ eq ·(list ·A) (removelast ·A (app ·A (cons ·A a0 l') l'')) (app ·A (cons ·A a0 l') (removelast ·A l'')) . λ H0 : eq ·(list ·A) (cons ·A a0 (app ·A l' l'')) (nil ·A) . False_ind ·False (eq_ind ·(list ·A) (cons ·A a0 (app ·A l' l'')) (λ e : list ·A . σ e @(λ l' : list ·A . xx) {
  | nil ➔ False 
  | cons XX XX ➔ True 
 }) I (nil ·A) H0) 
 } IHl)) l.



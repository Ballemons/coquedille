module test.
data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

list_ind : ∀ A : ★ . ∀ P : Π l : list ·A . ★ . Π f : P (nil ·A) . Π f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . Π l : list ·A . P l = Λ A : ★ . Λ P : Π l : list ·A . ★ . λ f : P (nil ·A) . λ f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . λ l : list ·A . μ F. l @(λ l : list ·A . P l) {
  | nil ➔ f 
  | cons y l' ➔ f' y (to/list -isType/F l') (F l') 
 }.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

length : ∀ A : ★ . list ·A ➔ nat = Λ A : ★ . λ l : list ·A . μ length. l @(λ l : list ·A . nat) {
  | nil ➔ O 
  | cons a l' ➔ S (length l') 
 }.

data prod (A : ★) (B : ★) : ★ =
  | pair : A ➔ B ➔ prod.

combine : ∀ A : ★ . ∀ B : ★ . Π l : list ·A . Π l' : list ·B . list ·(prod ·A ·B) = Λ A : ★ . Λ B : ★ . λ l : list ·A . λ l' : list ·B . μ combine. l @(λ l : list ·A . Π l' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ λ _ . nil ·(prod ·A ·B) 
  | cons x tl ➔ λ _ . σ l' @(λ l'' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ nil ·(prod ·A ·B) 
  | cons y tl' ➔ cons ·(prod ·A ·B) (pair ·A ·B x y) (combine tl tl') 
 } 
 } l'.

min : Π n : nat . Π m : nat . nat = λ n : nat . λ m : nat . μ min. n @(λ n : nat . Π m : nat . nat) {
  | O ➔ λ _ . O 
  | S n' ➔ λ _ . σ m @(λ m' : nat . nat) {
  | O ➔ O 
  | S m' ➔ S (min n' m') 
 } 
 } m.

f_equal : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π x : A . Π y : A . eq ·A x y ➔ eq ·B (f x) (f y) = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·B (f x) (f y')) {
  | eq_refl ➔ eq_refl ·B (f x) 
 }.

f_equal_nat : ∀ B : ★ . Π f : nat ➔ B . Π x : nat . Π y : nat . eq ·nat x y ➔ eq ·B (f x) (f y) = f_equal ·nat.

combine_length : ∀ A : ★ . ∀ B : ★ . Π l : list ·A . Π l' : list ·B . eq ·nat (length ·(prod ·A ·B) (combine ·A ·B l l')) (min (length ·A l) (length ·B l')) = Λ A : ★ . Λ B : ★ . λ l : list ·A . list_ind ·A (λ l' : list ·A . tprodT?) (λ l' : list ·B . eq_refl ·nat O) (λ a : A . λ l' : list ·A . λ IHl : Π l'' : list ·B . eq ·nat (length ·(prod ·A ·B) (combine ·A ·B l' l'')) (min (length ·A l') (length ·B l'')) . λ l'' : list ·B . σ l'' @(λ l' : list ·B . eq ·nat (length ·(prod ·A ·B) (combine ·A ·B (cons ·A a l') l')) (min (length ·A (cons ·A a l')) (length ·B l'))) {
  | nil ➔ eq_refl ·nat O 
  | cons b l'' ➔ f_equal_nat ·nat S (length ·(prod ·A ·B) (combine ·A ·B l' l'')) (min (length ·A l') (length ·B l'')) (IHl l'') 
 }) l.



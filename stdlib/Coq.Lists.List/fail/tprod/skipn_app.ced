module test.
data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

nat_ind : ∀ P : Π n : nat . ★ . Π f : P O . Π f' : Π n : nat . P n ➔ P (S n) . Π n : nat . P n = Λ P : Π n : nat . ★ . λ f : P O . λ f' : Π n : nat . P n ➔ P (S n) . λ n : nat . μ F. n @(λ n : nat . P n) {
  | O ➔ f 
  | S n' ➔ f' (to/nat -isType/F n') (F n') 
 }.

data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

skipn : ∀ A : ★ . Π n : nat . Π l : list ·A . list ·A = Λ A : ★ . λ n : nat . λ l : list ·A . μ skipn. n @(λ n : nat . Π l : list ·A . list ·A) {
  | O ➔ λ _ . l 
  | S n' ➔ λ _ . σ l @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a l' ➔ skipn n' l' 
 } 
 } l.

app : ∀ A : ★ . list ·A ➔ list ·A ➔ list ·A = Λ A : ★ . λ l : list ·A . λ m : list ·A . μ app. l @(λ l : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ _ . m 
  | cons a l1 ➔ λ _ . cons ·A a (app l1 m) 
 } m.

sub : Π n : nat . Π m : nat . nat = λ n : nat . λ m : nat . μ sub. n @(λ n : nat . Π m : nat . nat) {
  | O ➔ λ _ . n 
  | S k ➔ λ _ . σ m @(λ m' : nat . nat) {
  | O ➔ n 
  | S l ➔ sub k l 
 } 
 } m.

length : ∀ A : ★ . list ·A ➔ nat = Λ A : ★ . λ l : list ·A . μ length. l @(λ l : list ·A . nat) {
  | nil ➔ O 
  | cons a l' ➔ S (length l') 
 }.

skipn_app : ∀ A : ★ . Π n : nat . Π l1 : list ·A . Π l2 : list ·A . eq ·(list ·A) (skipn ·A n (app ·A l1 l2)) (app ·A (skipn ·A n l1) (skipn ·A (sub n (length ·A l1)) l2)) = Λ A : ★ . λ n : nat . nat_ind (λ n' : nat . tprodT?) (λ l1 : list ·A . λ l2 : list ·A . eq_refl ·(list ·A) (app ·A (skipn ·A O l1) (skipn ·A (sub O (length ·A l1)) l2))) (λ n' : nat . λ IHn : Π l1 : list ·A . Π l2 : list ·A . eq ·(list ·A) (skipn ·A n' (app ·A l1 l2)) (app ·A (skipn ·A n' l1) (skipn ·A (sub n' (length ·A l1)) l2)) . λ l1 : list ·A . σ l1 @(λ l : list ·A . Π l2 : list ·A . eq ·(list ·A) (skipn ·A (S n') (app ·A l l2)) (app ·A (skipn ·A (S n') l) (skipn ·A (sub (S n') (length ·A l)) l2))) {
  | nil ➔ λ l2 : list ·A . eq_refl ·(list ·A) σ l2 @(λ l : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a l ➔ skipn ·A n' l 
 } 
  | cons a l ➔ λ l2 : list ·A . IHn l l2 
 }) n.



module test.
data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

list_ind : ∀ A : ★ . ∀ P : Π l : list ·A . ★ . Π f : P (nil ·A) . Π f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . Π l : list ·A . P l = Λ A : ★ . Λ P : Π l : list ·A . ★ . λ f : P (nil ·A) . λ f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . λ l : list ·A . μ F. l @(λ l : list ·A . P l) {
  | nil ➔ f 
  | cons y l' ➔ f' y (to/list -isType/F l') (F l') 
 }.

data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

nth : ∀ A : ★ . Π n : nat . Π l : list ·A . Π default : A . A = Λ A : ★ . λ n : nat . λ l : list ·A . λ default : A . σ n @(λ n' : nat . A) {
  | O ➔ μ nth. l @(λ l : list ·A . Π n : nat . Π default : A . A) {
  | nil ➔ λ _ . λ _ . default 
  | cons x l' ➔ λ _ . λ _ . x 
 } n default 
  | S m ➔ μ nth. l @(λ l : list ·A . Π n : nat . Π default : A . A) {
  | nil ➔ λ _ . λ _ . default 
  | cons x t ➔ λ _ . λ _ . nth t m default 
 } n default 
 }.

map : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π l : list ·A . list ·B = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ l : list ·A . μ map. l @(λ l : list ·A . list ·B) {
  | nil ➔ nil ·B 
  | cons a t ➔ cons ·B (f a) (map t) 
 }.

map_nth : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π l : list ·A . Π d : A . Π n : nat . eq ·B (nth ·B n (map ·A ·B f l) (f d)) (f (nth ·A n l d)) = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ l : list ·A . list_ind ·A (λ l' : list ·A . tprodT?) (λ d : A . λ n : nat . σ n @(λ n' : nat . eq ·B (nth ·B n' (nil ·B) (f d)) (f (nth ·A n' (nil ·A) d))) {
  | O ➔ eq_refl ·B (f (nth ·A O (nil ·A) d)) 
  | S n' ➔ eq_refl ·B (f (nth ·A (S n') (nil ·A) d)) 
 }) (λ a : A . λ l' : list ·A . λ IHl : Π d : A . Π n : nat . eq ·B (nth ·B n (map ·A ·B f l') (f d)) (f (nth ·A n l' d)) . λ d : A . λ n : nat . σ n @(λ n' : nat . eq ·B (nth ·B n' (cons ·B (f a) (map ·A ·B f l')) (f d)) (f (nth ·A n' (cons ·A a l') d))) {
  | O ➔ eq_refl ·B (f (nth ·A O (cons ·A a l') d)) 
  | S n' ➔ IHl d n' 
 }) l.



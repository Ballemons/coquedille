module test.
data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

nat_ind : ∀ P : Π n : nat . ★ . Π f : P O . Π f' : Π n : nat . P n ➔ P (S n) . Π n : nat . P n = Λ P : Π n : nat . ★ . λ f : P O . λ f' : Π n : nat . P n ➔ P (S n) . λ n : nat . μ F. n @(λ n : nat . P n) {
  | O ➔ f 
  | S n' ➔ f' (to/nat -isType/F n') (F n') 
 }.

data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

firstn : ∀ A : ★ . Π n : nat . Π l : list ·A . list ·A = Λ A : ★ . λ n : nat . λ l : list ·A . μ firstn. n @(λ n : nat . Π l : list ·A . list ·A) {
  | O ➔ λ _ . nil ·A 
  | S n' ➔ λ _ . σ l @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a l' ➔ cons ·A a (firstn n' l') 
 } 
 } l.

skipn : ∀ A : ★ . Π n : nat . Π l : list ·A . list ·A = Λ A : ★ . λ n : nat . λ l : list ·A . μ skipn. n @(λ n : nat . Π l : list ·A . list ·A) {
  | O ➔ λ _ . l 
  | S n' ➔ λ _ . σ l @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a l' ➔ skipn n' l' 
 } 
 } l.

add : Π n : nat . Π m : nat . nat = λ n : nat . λ m : nat . μ add. n @(λ n : nat . Π m : nat . nat) {
  | O ➔ λ _ . m 
  | S p ➔ λ _ . S (add p m) 
 } m.

firstn_skipn_comm : ∀ A : ★ . Π m : nat . Π n : nat . Π l : list ·A . eq ·(list ·A) (firstn ·A m (skipn ·A n l)) (skipn ·A n (firstn ·A (add n m) l)) = Λ A : ★ . λ m : nat . λ n : nat . nat_ind (λ n' : nat . tprodT?) (λ l : list ·A . σ l @(λ l' : list ·A . eq ·(list ·A) (firstn ·A m (skipn ·A O l')) (skipn ·A O (firstn ·A (add O m) l'))) {
  | nil ➔ σ m @(λ n' : nat . eq ·(list ·A) (firstn ·A n' (nil ·A)) (firstn ·A n' (nil ·A))) {
  | O ➔ eq_refl ·(list ·A) (firstn ·A O (nil ·A)) 
  | S m' ➔ eq_refl ·(list ·A) (firstn ·A (S m') (nil ·A)) 
 } 
  | cons a l' ➔ σ m @(λ n' : nat . eq ·(list ·A) (firstn ·A n' (cons ·A a l')) (firstn ·A n' (cons ·A a l'))) {
  | O ➔ eq_refl ·(list ·A) (firstn ·A O (cons ·A a l')) 
  | S m' ➔ eq_refl ·(list ·A) (firstn ·A (S m') (cons ·A a l')) 
 } 
 }) (λ n' : nat . λ IHn : Π l : list ·A . eq ·(list ·A) (firstn ·A m (skipn ·A n' l)) (skipn ·A n' (firstn ·A (add n' m) l)) . λ l : list ·A . σ l @(λ l' : list ·A . eq ·(list ·A) (firstn ·A m (skipn ·A (S n') l')) (skipn ·A (S n') (firstn ·A (add (S n') m) l'))) {
  | nil ➔ σ m @(λ n' : nat . Π IHn' : Π l' : list ·A . eq ·(list ·A) (firstn ·A n' (skipn ·A n' l')) (skipn ·A n' (firstn ·A (add n' n') l')) . eq ·(list ·A) (firstn ·A n' (nil ·A)) (nil ·A)) {
  | O ➔ λ IHn' : Π l' : list ·A . eq ·(list ·A) (firstn ·A O (skipn ·A n' l')) (skipn ·A n' (firstn ·A (add n' O) l')) . eq_refl ·(list ·A) (nil ·A) 
  | S m' ➔ λ IHn' : Π l' : list ·A . eq ·(list ·A) (firstn ·A (S m') (skipn ·A n' l')) (skipn ·A n' (firstn ·A (add n' (S m')) l')) . eq_refl ·(list ·A) (nil ·A) 
 } IHn 
  | cons a l' ➔ σ m @(λ n' : nat . Π IHn' : Π l' : list ·A . eq ·(list ·A) (firstn ·A n' (skipn ·A n' l')) (skipn ·A n' (firstn ·A (add n' n') l')) . eq ·(list ·A) (firstn ·A n' (skipn ·A n' l')) (skipn ·A n' (firstn ·A (add n' n') l'))) {
  | O ➔ λ IHn' : Π l' : list ·A . eq ·(list ·A) (firstn ·A O (skipn ·A n' l')) (skipn ·A n' (firstn ·A (add n' O) l')) . IHn' l' 
  | S m' ➔ λ IHn' : Π l' : list ·A . eq ·(list ·A) (firstn ·A (S m') (skipn ·A n' l')) (skipn ·A n' (firstn ·A (add n' (S m')) l')) . IHn' l' 
 } IHn 
 }) n.



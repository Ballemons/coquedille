module test.
data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

False : ★ = ∀ X : ★ . X.

not : Π A : ★ . ★ = λ A : ★ . A ➔ False.

data Forall (A : ★) (P : A ➔ ★) : list ·A ➔ ★ =
  | Forall_nil : Forall (nil ·A)
  | Forall_cons : Π x : A . Π l : list ·A . P x ➔ Forall l ➔ Forall (cons ·A x l).

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

False_ind : ∀ P : ★ . False ➔ P = Λ P : ★ . λ f : False . f ·P.

eq_ind : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . Π f : P x . Π y : A . Π e : eq ·A x y . P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ f : P x . λ y : A . λ e : eq ·A x y . σ e @(λ y' : A . λ _ : eq ·A x y' . P y') {
  | eq_refl ➔ f 
 }.

data True : ★ =
  | I : True.

eq_sym : ∀ A : ★ . Π x : A . Π y : A . eq ·A x y ➔ eq ·A y x = Λ A : ★ . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·A y' x) {
  | eq_refl ➔ eq_refl ·A x 
 }.

eq_ind_r : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . P x ➔ Π y : A . eq ·A y x ➔ P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ H : P x . λ y : A . λ H0 : eq ·A y x . eq_ind ·A x ·(λ y' : A . P y') H y (eq_sym ·A y x H0).

f_equal : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π x : A . Π y : A . eq ·A x y ➔ eq ·B (f x) (f y) = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·B (f x) (f y')) {
  | eq_refl ➔ eq_refl ·B (f x) 
 }.

Forall_dec_subproof0 : ∀ A : ★ . ∀ P : A ➔ ★ . Π a : A . Π l' : list ·A . Π Hl' : not ·(Forall ·A ·P l') . not ·(Forall ·A ·P (cons ·A a l')) = Λ A : ★ . Λ P : A ➔ ★ . λ a : A . λ l' : list ·A . λ Hl' : not ·(Forall ·A ·P l') . λ H : Forall ·A ·P (cons ·A a l') . σ H @(λ l : list ·A . λ _ : Forall ·A ·P l . eq ·(list ·A) l (cons ·A a l') ➔ False) {
  | Forall_nil ➔ λ H0 : eq ·(list ·A) (nil ·A) (cons ·A a l') . False_ind ·False (eq_ind ·(list ·A) (nil ·A) (λ e : list ·A . σ e @(λ l : list ·A . xx) {
  | nil ➔ True 
  | cons XX XX ➔ False 
 }) I (cons ·A a l') H0) 
  | Forall_cons x l H0 H1 ➔ λ H2 : eq ·(list ·A) (cons ·A x l) (cons ·A a l') . eq_ind_r ·A a (λ a' : A . tprodT?) (λ H1' : eq ·(list ·A) l l' . eq_ind_r ·(list ·A) l' (λ l' : list ·A . tprodT?) (λ H2' : P a . λ H3 : Forall ·A ·P l' . False_ind ·False (Hl' H3)) l H1') x (f_equal ·(list ·A) ·A (λ e : list ·A . σ e @(λ l' : list ·A . A) {
  | nil ➔ x 
  | cons a' l' ➔ a' 
 }) (cons ·A x l) (cons ·A a l') H2) (f_equal ·(list ·A) ·(list ·A) (λ e : list ·A . σ e @(λ l' : list ·A . list ·A) {
  | nil ➔ l 
  | cons a' l' ➔ l' 
 }) (cons ·A x l) (cons ·A a l') H2) H0 H1 
 } (eq_refl ·(list ·A) (cons ·A a l')).



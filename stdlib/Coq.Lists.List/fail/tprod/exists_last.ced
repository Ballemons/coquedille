module test.
data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

list_rect : ∀ A : ★ . ∀ P : Π l : list ·A . ★ . Π f : P (nil ·A) . Π f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . Π l : list ·A . P l = Λ A : ★ . Λ P : Π l : list ·A . ★ . λ f : P (nil ·A) . λ f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . λ l : list ·A . μ F. l @(λ l : list ·A . P l) {
  | nil ➔ f 
  | cons y l' ➔ f' y l' (F l') 
 }.

False : ★ = ∀ X : ★ . X.

not : Π A : ★ . ★ = λ A : ★ . A ➔ False.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

data sigT (A : ★) (P : A ➔ ★) : ★ =
  | existT : Π x : A . P x ➔ sigT.

data sig (A : ★) (P : A ➔ ★) : ★ =
  | exist : Π x : A . P x ➔ sig.

app : ∀ A : ★ . list ·A ➔ list ·A ➔ list ·A = Λ A : ★ . λ l : list ·A . λ m : list ·A . μ app. l @(λ l : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ _ . m 
  | cons a l1 ➔ λ _ . cons ·A a (app l1 m) 
 } m.

False_ind : ∀ P : ★ . False ➔ P = Λ P : ★ . λ f : False . f ·P.

eq_ind : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . Π f : P x . Π y : A . Π e : eq ·A x y . P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ f : P x . λ y : A . λ e : eq ·A x y . σ e @(λ y' : A . λ _ : eq ·A x y' . P y') {
  | eq_refl ➔ f 
 }.

data True : ★ =
  | I : True.

eq_rect : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . Π f : P x . Π y : A . Π e : eq ·A x y . P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ f : P x . λ y : A . λ e : eq ·A x y . σ e @(λ y' : A . λ _ : eq ·A x y' . P y') {
  | eq_refl ➔ f 
 }.

eq_sym : ∀ A : ★ . Π x : A . Π y : A . eq ·A x y ➔ eq ·A y x = Λ A : ★ . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·A y' x) {
  | eq_refl ➔ eq_refl ·A x 
 }.

eq_rect_r : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . P x ➔ Π y : A . eq ·A y x ➔ P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ H : P x . λ y : A . λ H0 : eq ·A y x . eq_rect ·A x ·(λ y' : A . P y') H y (eq_sym ·A y x H0).

exists_last : ∀ A : ★ . Π l : list ·A . not ·(eq ·(list ·A) l (nil ·A)) ➔ sigT ·(list ·A) ·(λ l' : list ·A . sig ·A ·(λ a : A . eq ·(list ·A) l (app ·A l' (cons ·A a (nil ·A))))) = Λ A : ★ . λ l : list ·A . list_rect ·A (λ l' : list ·A . tprodT?) (λ H : not ·(eq ·(list ·A) (nil ·A) (nil ·A)) . σ H (eq_refl ·(list ·A) (nil ·A)) @(λ _ : False . sigT ·(list ·A) ·(λ l' : list ·A . sig ·A ·(λ a : A . eq ·(list ·A) (nil ·A) (app ·A l' (cons ·A a (nil ·A)))))) {

 }) (λ a : A . λ l' : list ·A . λ IHl : not ·(eq ·(list ·A) l' (nil ·A)) ➔ sigT ·(list ·A) ·(λ l'' : list ·A . sig ·A ·(λ a' : A . eq ·(list ·A) l' (app ·A l'' (cons ·A a' (nil ·A))))) . λ _tmp : not ·(eq ·(list ·A) (cons ·A a l') (nil ·A)) . σ l' @(λ l' : list ·A . Π IHl' : not ·(eq ·(list ·A) l' (nil ·A)) ➔ sigT ·(list ·A) ·(λ l'' : list ·A . sig ·A ·(λ a' : A . eq ·(list ·A) l' (app ·A l'' (cons ·A a' (nil ·A))))) . sigT ·(list ·A) ·(λ l'' : list ·A . sig ·A ·(λ a' : A . eq ·(list ·A) (cons ·A a l') (app ·A l'' (cons ·A a' (nil ·A)))))) {
  | nil ➔ λ IHl' : not ·(eq ·(list ·A) (nil ·A) (nil ·A)) ➔ sigT ·(list ·A) ·(λ l'' : list ·A . sig ·A ·(λ a' : A . eq ·(list ·A) (nil ·A) (app ·A l'' (cons ·A a' (nil ·A))))) . existT ·(list ·A) ·(λ l'' : list ·A . sig ·A ·(λ a' : A . eq ·(list ·A) (cons ·A a (nil ·A)) (app ·A l'' (cons ·A a' (nil ·A))))) (nil ·A) (exist ·A ·(λ a' : A . eq ·(list ·A) (cons ·A a (nil ·A)) (app ·A (nil ·A) (cons ·A a' (nil ·A)))) a (eq_refl ·(list ·A) (app ·A (nil ·A) (cons ·A a (nil ·A))))) 
  | cons a0 l' ➔ λ IHl' : not ·(eq ·(list ·A) (cons ·A a0 l') (nil ·A)) ➔ sigT ·(list ·A) ·(λ l'' : list ·A . sig ·A ·(λ a' : A . eq ·(list ·A) (cons ·A a0 l') (app ·A l'' (cons ·A a' (nil ·A))))) . σ IHl' (λ H : eq ·(list ·A) (cons ·A a0 l') (nil ·A) . False_ind ·False (eq_ind ·(list ·A) (cons ·A a0 l') (λ e : list ·A . σ e @(λ l' : list ·A . xx) {
  | nil ➔ False 
  | cons XX XX ➔ True 
 }) I (nil ·A) H)) @(λ s : sigT ·(list ·A) ·(λ l'' : list ·A . sig ·A ·(λ a' : A . eq ·(list ·A) (cons ·A a0 l') (app ·A l'' (cons ·A a' (nil ·A))))) . sigT ·(list ·A) ·(λ l'' : list ·A . sig ·A ·(λ a' : A . eq ·(list ·A) (cons ·A a (cons ·A a0 l')) (app ·A l'' (cons ·A a' (nil ·A)))))) {
  | existT l'' s ➔ σ s @(λ s' : sig ·A ·(λ a' : A . eq ·(list ·A) (cons ·A a0 l') (app ·A l'' (cons ·A a' (nil ·A)))) . sigT ·(list ·A) ·(λ l'' : list ·A . sig ·A ·(λ a' : A . eq ·(list ·A) (cons ·A a (cons ·A a0 l')) (app ·A l'' (cons ·A a' (nil ·A)))))) {
  | exist a' H ➔ eq_rect_r ·(list ·A) (app ·A l'' (cons ·A a' (nil ·A))) ·(λ l' : list ·A . sigT ·(list ·A) ·(λ l'' : list ·A . sig ·A ·(λ a' : A . eq ·(list ·A) (cons ·A a l') (app ·A l'' (cons ·A a' (nil ·A)))))) (existT ·(list ·A) ·(λ l'' : list ·A . sig ·A ·(λ a' : A . eq ·(list ·A) (cons ·A a (app ·A l'' (cons ·A a' (nil ·A)))) (app ·A l'' (cons ·A a' (nil ·A))))) (cons ·A a l'') (exist ·A ·(λ a' : A . eq ·(list ·A) (cons ·A a (app ·A l'' (cons ·A a' (nil ·A)))) (app ·A (cons ·A a l'') (cons ·A a' (nil ·A)))) a' (eq_refl ·(list ·A) (app ·A (cons ·A a l'') (cons ·A a' (nil ·A)))))) (cons ·A a0 l') H 
 } 
 } 
 } IHl) l.



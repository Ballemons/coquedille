module test.
data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

data Forall (A : ★) (P : A ➔ ★) : list ·A ➔ ★ =
  | Forall_nil : Forall (nil ·A)
  | Forall_cons : Π x : A . Π l : list ·A . P x ➔ Forall l ➔ Forall (cons ·A x l).

Forall_ind : ∀ A : ★ . ∀ P : A ➔ ★ . ∀ P' : list ·A ➔ ★ . Π f : P' (nil ·A) . Π f' : Π x : A . Π l : list ·A . P x ➔ Forall ·A ·P l ➔ P' l ➔ P' (cons ·A x l) . Π l : list ·A . Π f' : Forall ·A ·P l . P' l = Λ A : ★ . Λ P : A ➔ ★ . Λ P' : list ·A ➔ ★ . λ f : P' (nil ·A) . λ f' : Π x : A . Π l : list ·A . P x ➔ Forall ·A ·P l ➔ P' l ➔ P' (cons ·A x l) . λ l : list ·A . λ f' : Forall ·A ·P l . μ F. f' @(λ l : list ·A . λ f' : Forall ·A ·P l . P' l) {
  | Forall_nil ➔ f 
  | Forall_cons x l' p f' ➔ f' x l' p f' (F -l' f') 
 }.



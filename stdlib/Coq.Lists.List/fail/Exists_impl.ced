module test.
data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

data Exists (A : ★) (P : A ➔ ★) : list ·A ➔ ★ =
  | Exists_cons_hd : Π x : A . Π l : list ·A . P x ➔ Exists (cons ·A x l)
  | Exists_cons_tl : Π x : A . Π l : list ·A . Exists l ➔ Exists (cons ·A x l).

Exists_ind : ∀ A : ★ . ∀ P : A ➔ ★ . ∀ P' : list ·A ➔ ★ . Π f : Π x : A . Π l : list ·A . P x ➔ P' (cons ·A x l) . Π f' : Π x : A . Π l : list ·A . Exists ·A ·P l ➔ P' l ➔ P' (cons ·A x l) . Π l : list ·A . Π e : Exists ·A ·P l . P' l = Λ A : ★ . Λ P : A ➔ ★ . Λ P' : list ·A ➔ ★ . λ f : Π x : A . Π l : list ·A . P x ➔ P' (cons ·A x l) . λ f' : Π x : A . Π l : list ·A . Exists ·A ·P l ➔ P' l ➔ P' (cons ·A x l) . λ l : list ·A . λ e : Exists ·A ·P l . μ F. e @(λ l : list ·A . λ e : Exists ·A ·P l . P' l) {
  | Exists_cons_hd x l' p ➔ f x l' p 
  | Exists_cons_tl x l' e' ➔ f' x l' e' (F -l' e') 
 }.

Exists_impl : ∀ A : ★ . ∀ P : A ➔ ★ . ∀ Q : A ➔ ★ . Π H : Π x : A . P x ➔ Q x . Π xs : list ·A . Π H0 : Exists ·A ·P xs . Exists ·A ·Q xs = Λ A : ★ . Λ P : A ➔ ★ . Λ Q : A ➔ ★ . λ H : Π x : A . P x ➔ Q x . λ xs : list ·A . λ H0 : Exists ·A ·P xs . Exists_ind ·A ·P ·(λ xs' : list ·A . Exists ·A ·Q xs') (λ x : A . λ l : list ·A . λ H0' : P x . Exists_cons_hd ·A ·Q x l (H x H0')) (λ x : A . λ l : list ·A . λ H0' : Exists ·A ·P l . λ IHExists : Exists ·A ·Q l . Exists_cons_tl ·A ·Q x l IHExists) xs H0.



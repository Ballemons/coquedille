module test.
data and (A : ★) (B : ★) : ★ =
  | conj : A ➔ B ➔ and.

data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

data Exists (A : ★) (P : A ➔ ★) : list ·A ➔ ★ =
  | Exists_cons_hd : Π x : A . Π l : list ·A . P x ➔ Exists (cons ·A x l)
  | Exists_cons_tl : Π x : A . Π l : list ·A . Exists l ➔ Exists (cons ·A x l).

False : ★ = ∀ X : ★ . X.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

False_ind : ∀ P : ★ . False ➔ P = Λ P : ★ . λ f : False . f ·P.

eq_ind : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . Π f : P x . Π y : A . Π e : eq ·A x y . P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ f : P x . λ y : A . λ e : eq ·A x y . σ e @(λ y' : A . λ _ : eq ·A x y' . P y') {
  | eq_refl ➔ f 
 }.

data True : ★ =
  | I : True.

Exists_nil : ∀ A : ★ . ∀ P : A ➔ ★ . and ·(Exists ·A ·P (nil ·A) ➔ False) ·(False ➔ Exists ·A ·P (nil ·A)) = Λ A : ★ . Λ P : A ➔ ★ . conj ·(Exists ·A ·P (nil ·A) ➔ False) ·(False ➔ Exists ·A ·P (nil ·A)) (λ H : Exists ·A ·P (nil ·A) . σ H @(λ l : list ·A . λ _ : Exists ·A ·P l . eq ·(list ·A) l (nil ·A) ➔ False) {
  | Exists_cons_hd x l H0 ➔ λ H1 : eq ·(list ·A) (cons ·A x l) (nil ·A) . False_ind ·(Π H0' : P x . False) (eq_ind ·(list ·A) (cons ·A x l) (λ e : list ·A . σ e @(λ l' : list ·A . xx) {
  | nil ➔ False 
  | cons XX XX ➔ True 
 }) I (nil ·A) H1) H0 
  | Exists_cons_tl x l H0 ➔ λ H1 : eq ·(list ·A) (cons ·A x l) (nil ·A) . False_ind ·(Π H0' : Exists ·A ·P l . False) (eq_ind ·(list ·A) (cons ·A x l) (λ e : list ·A . σ e @(λ l' : list ·A . xx) {
  | nil ➔ False 
  | cons XX XX ➔ True 
 }) I (nil ·A) H1) H0 
 } (eq_refl ·(list ·A) (nil ·A))) (λ H : False . σ H @(λ _ : False . Exists ·A ·P (nil ·A)) {

 }).



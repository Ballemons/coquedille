module test.
data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

data Add (A : ★) (a : A) : list ·A ➔ list ·A ➔ ★ =
  | Add_head : Π l : list ·A . Add l (cons ·A a l)
  | Add_cons : Π x : A . Π l : list ·A . Π l' : list ·A . Add l l' ➔ Add (cons ·A x l) (cons ·A x l').

Add_ind : ∀ A : ★ . Π a : A . ∀ P : list ·A ➔ list ·A ➔ ★ . Π f : Π l : list ·A . P l (cons ·A a l) . Π f' : Π x : A . Π l : list ·A . Π l' : list ·A . Add ·A a l l' ➔ P l l' ➔ P (cons ·A x l) (cons ·A x l') . Π l : list ·A . Π l' : list ·A . Π a' : Add ·A a l l' . P l l' = Λ A : ★ . λ a : A . Λ P : list ·A ➔ list ·A ➔ ★ . λ f : Π l : list ·A . P l (cons ·A a l) . λ f' : Π x : A . Π l : list ·A . Π l' : list ·A . Add ·A a l l' ➔ P l l' ➔ P (cons ·A x l) (cons ·A x l') . λ l : list ·A . λ l' : list ·A . λ a' : Add ·A a l l' . μ F. a' @(λ l : list ·A . λ l' : list ·A . λ a' : Add ·A a l l' . P l l') {
  | Add_head l' ➔ f l' 
  | Add_cons x l' l'' a' ➔ f' x l' l'' a' (F -l' -l'' a') 
 }.

data ex (A : ★) (P : A ➔ ★) : ★ =
  | ex_intro : Π x : A . P x ➔ ex.

data and (A : ★) (B : ★) : ★ =
  | conj : A ➔ B ➔ and.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

app : ∀ A : ★ . list ·A ➔ list ·A ➔ list ·A = Λ A : ★ . λ l : list ·A . λ m : list ·A . μ app. l @(λ l : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ _ . m 
  | cons a l1 ➔ λ _ . cons ·A a (app l1 m) 
 } m.

eq_trans : ∀ A : ★ . Π x : A . Π y : A . Π z : A . eq ·A x y ➔ eq ·A y z ➔ eq ·A x z = Λ A : ★ . λ x : A . λ y : A . λ z : A . λ H : eq ·A x y . λ H0 : eq ·A y z . σ H0 @(λ y' : A . λ _ : eq ·A y y' . eq ·A x y') {
  | eq_refl ➔ H 
 }.

f_equal : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π x : A . Π y : A . eq ·A x y ➔ eq ·B (f x) (f y) = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·B (f x) (f y')) {
  | eq_refl ➔ eq_refl ·B (f x) 
 }.

Add_split : ∀ A : ★ . Π a : A . Π l : list ·A . Π l' : list ·A . Π H : Add ·A a l l' . ex ·(list ·A) ·(λ l1 : list ·A . ex ·(list ·A) ·(λ l2 : list ·A . and ·(eq ·(list ·A) l (app ·A l1 l2)) ·(eq ·(list ·A) l' (app ·A l1 (cons ·A a l2))))) = Λ A : ★ . λ a : A . λ l : list ·A . λ l' : list ·A . λ H : Add ·A a l l' . Add_ind ·A a ·(λ l' : list ·A . λ l'' : list ·A . ex ·(list ·A) ·(λ l1 : list ·A . ex ·(list ·A) ·(λ l2 : list ·A . and ·(eq ·(list ·A) l' (app ·A l1 l2)) ·(eq ·(list ·A) l'' (app ·A l1 (cons ·A a l2)))))) (λ l' : list ·A . ex_intro ·(list ·A) ·(λ l1 : list ·A . ex ·(list ·A) ·(λ l2 : list ·A . and ·(eq ·(list ·A) l' (app ·A l1 l2)) ·(eq ·(list ·A) (cons ·A a l') (app ·A l1 (cons ·A a l2))))) (nil ·A) (ex_intro ·(list ·A) ·(λ l2 : list ·A . and ·(eq ·(list ·A) l' (app ·A (nil ·A) l2)) ·(eq ·(list ·A) (cons ·A a l') (app ·A (nil ·A) (cons ·A a l2)))) l' (conj ·(eq ·(list ·A) l' (app ·A (nil ·A) l')) ·(eq ·(list ·A) (cons ·A a l') (app ·A (nil ·A) (cons ·A a l'))) (eq_refl ·(list ·A) (app ·A (nil ·A) l')) (eq_refl ·(list ·A) (app ·A (nil ·A) (cons ·A a l')))))) (λ x : A . λ l' : list ·A . λ l'' : list ·A . λ H' : Add ·A a l' l'' . λ IHAdd : ex ·(list ·A) ·(λ l1 : list ·A . ex ·(list ·A) ·(λ l2 : list ·A . and ·(eq ·(list ·A) l' (app ·A l1 l2)) ·(eq ·(list ·A) l'' (app ·A l1 (cons ·A a l2))))) . σ IHAdd @(λ _ : ex ·(list ·A) ·(λ l1 : list ·A . ex ·(list ·A) ·(λ l2 : list ·A . and ·(eq ·(list ·A) l' (app ·A l1 l2)) ·(eq ·(list ·A) l'' (app ·A l1 (cons ·A a l2))))) . ex ·(list ·A) ·(λ l1 : list ·A . ex ·(list ·A) ·(λ l2 : list ·A . and ·(eq ·(list ·A) (cons ·A x l') (app ·A l1 l2)) ·(eq ·(list ·A) (cons ·A x l'') (app ·A l1 (cons ·A a l2)))))) {
  | ex_intro l1 H0 ➔ σ H0 @(λ _ : ex ·(list ·A) ·(λ l2 : list ·A . and ·(eq ·(list ·A) l' (app ·A l1 l2)) ·(eq ·(list ·A) l'' (app ·A l1 (cons ·A a l2)))) . ex ·(list ·A) ·(λ l1' : list ·A . ex ·(list ·A) ·(λ l2 : list ·A . and ·(eq ·(list ·A) (cons ·A x l') (app ·A l1' l2)) ·(eq ·(list ·A) (cons ·A x l'') (app ·A l1' (cons ·A a l2)))))) {
  | ex_intro l2 H0' ➔ σ H0' @(λ _ : and ·(eq ·(list ·A) l' (app ·A l1 l2)) ·(eq ·(list ·A) l'' (app ·A l1 (cons ·A a l2))) . ex ·(list ·A) ·(λ l1' : list ·A . ex ·(list ·A) ·(λ l2' : list ·A . and ·(eq ·(list ·A) (cons ·A x l') (app ·A l1' l2')) ·(eq ·(list ·A) (cons ·A x l'') (app ·A l1' (cons ·A a l2')))))) {
  | conj Hl Hl' ➔ ex_intro ·(list ·A) ·(λ l1' : list ·A . ex ·(list ·A) ·(λ l2' : list ·A . and ·(eq ·(list ·A) (cons ·A x l') (app ·A l1' l2')) ·(eq ·(list ·A) (cons ·A x l'') (app ·A l1' (cons ·A a l2'))))) (cons ·A x l1) (ex_intro ·(list ·A) ·(λ l2' : list ·A . and ·(eq ·(list ·A) (cons ·A x l') (app ·A (cons ·A x l1) l2')) ·(eq ·(list ·A) (cons ·A x l'') (app ·A (cons ·A x l1) (cons ·A a l2')))) l2 (conj ·(eq ·(list ·A) (cons ·A x l') (app ·A (cons ·A x l1) l2)) ·(eq ·(list ·A) (cons ·A x l'') (app ·A (cons ·A x l1) (cons ·A a l2))) (eq_trans ·(list ·A) (cons ·A x l') (cons ·A x l') (cons ·A x (app ·A l1 l2)) (f_equal ·(Π l' : list ·A . list ·A) ·(list ·A) (λ f : Π l' : list ·A . list ·A . f l') (cons ·A x) (cons ·A x) (eq_refl ·(Π l' : list ·A . list ·A) (cons ·A x))) (f_equal ·(list ·A) ·(list ·A) (cons ·A x) l' (app ·A l1 l2) Hl)) (eq_trans ·(list ·A) (cons ·A x l'') (cons ·A x l'') (cons ·A x (app ·A l1 (cons ·A a l2))) (f_equal ·(Π l' : list ·A . list ·A) ·(list ·A) (λ f : Π l' : list ·A . list ·A . f l'') (cons ·A x) (cons ·A x) (eq_refl ·(Π l' : list ·A . list ·A) (cons ·A x))) (f_equal ·(list ·A) ·(list ·A) (cons ·A x) l'' (app ·A l1 (cons ·A a l2)) Hl')))) 
 } 
 } 
 }) l l' H.



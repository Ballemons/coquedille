module test.
data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

sub : Π n : nat . Π m : nat . nat = λ n : nat . λ m : nat . μ sub. n @(λ n : nat . Π m : nat . nat) {
  | O ➔ λ m . n 
  | S k ➔ λ m . σ m @(λ m' : nat . nat) {
  | O ➔ n 
  | S l ➔ sub k l 
 } 
 } m.

sub_0_r : Π n : nat . eq ·nat (sub n O) n = λ n : nat . σ n @(λ n' : nat . eq ·nat (sub n' O) n') {
  | O ➔ eq_refl ·nat O 
  | S n' ➔ eq_refl ·nat (S n') 
 }.

skipn_length : ∀ A : ★ . Π n : nat . Π l : list ·A . eq ·nat ((λ l' : list ·A . μ length. l' @(λ l' : list ·A . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) ((λ n' : nat . λ l' : list ·A . μ skipn. n' @(λ n' : nat . Π l' : list ·A . list ·A) {
  | O ➔ λ l' . l' 
  | S n' ➔ λ l' . σ l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a l' ➔ skipn n' l' 
 } 
 } l') n l)) ((λ n' : nat . λ m : nat . μ sub. n' @(λ n' : nat . Π m : nat . nat) {
  | O ➔ λ m . n' 
  | S k ➔ λ m . σ m @(λ m' : nat . nat) {
  | O ➔ n' 
  | S l' ➔ sub k l' 
 } 
 } m) ((λ l' : list ·A . μ length. l' @(λ l' : list ·A . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) l) n) = Λ A : ★ . λ n : nat . (λ n' : nat . μ F. n' @(λ n' : nat . Π l : list ·A . eq ·nat ((λ l' : list ·A . μ length. l' @(λ l' : list ·A . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) ((λ n' : nat . λ l' : list ·A . μ skipn. n' @(λ n' : nat . Π l' : list ·A . list ·A) {
  | O ➔ λ l' . l' 
  | S n' ➔ λ l' . σ l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a l' ➔ skipn n' l' 
 } 
 } l') n' l)) ((λ n' : nat . λ m : nat . μ sub. n' @(λ n' : nat . Π m : nat . nat) {
  | O ➔ λ m . n' 
  | S k ➔ λ m . σ m @(λ m' : nat . nat) {
  | O ➔ n' 
  | S l' ➔ sub k l' 
 } 
 } m) ((λ l' : list ·A . μ length. l' @(λ l' : list ·A . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) l) n')) {
  | O ➔ λ l . λ l : list ·A . σ σ sub_0_r ((λ l' : list ·A . μ length. l' @(λ l' : list ·A . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) l) @(λ y : nat . λ _ : eq ·nat ((λ n' : nat . λ m : nat . μ sub. n' @(λ n' : nat . Π m : nat . nat) {
  | O ➔ λ m . n' 
  | S k ➔ λ m . σ m @(λ m' : nat . nat) {
  | O ➔ n' 
  | S l' ➔ sub k l' 
 } 
 } m) ((λ l' : list ·A . μ length. l' @(λ l' : list ·A . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) l) O) y . eq ·nat y ((λ n' : nat . λ m : nat . μ sub. n' @(λ n' : nat . Π m : nat . nat) {
  | O ➔ λ m . n' 
  | S k ➔ λ m . σ m @(λ m' : nat . nat) {
  | O ➔ n' 
  | S l' ➔ sub k l' 
 } 
 } m) ((λ l' : list ·A . μ length. l' @(λ l' : list ·A . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) l) O)) {
  | eq_refl ➔ eq_refl ·nat ((λ n' : nat . λ m : nat . μ sub. n' @(λ n' : nat . Π m : nat . nat) {
  | O ➔ λ m . n' 
  | S k ➔ λ m . σ m @(λ m' : nat . nat) {
  | O ➔ n' 
  | S l' ➔ sub k l' 
 } 
 } m) ((λ l' : list ·A . μ length. l' @(λ l' : list ·A . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) l) O) 
 } @(λ y : nat . λ _ : eq ·nat ((λ l' : list ·A . μ length. l' @(λ l' : list ·A . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) l) y . eq ·nat ((λ l' : list ·A . μ length. l' @(λ l' : list ·A . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) l) y) {
  | eq_refl ➔ eq_refl ·nat ((λ l' : list ·A . μ length. l' @(λ l' : list ·A . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) l) 
 } 
  | S n' ➔ λ l . λ l : list ·A . σ l @(λ l' : list ·A . eq ·nat ((λ l' : list ·A . μ length. l' @(λ l' : list ·A . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) σ l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a l' ➔ (λ n' : nat . λ l' : list ·A . μ skipn. n' @(λ n' : nat . Π l' : list ·A . list ·A) {
  | O ➔ λ l' . l' 
  | S n' ➔ λ l' . σ l' @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a' l' ➔ skipn n' l' 
 } 
 } l') n' l' 
 }) ((λ n' : nat . λ m : nat . μ sub. n' @(λ n' : nat . Π m : nat . nat) {
  | O ➔ λ m . n' 
  | S k ➔ λ m . σ m @(λ m' : nat . nat) {
  | O ➔ n' 
  | S l' ➔ sub k l' 
 } 
 } m) ((λ l' : list ·A . μ length. l' @(λ l' : list ·A . nat) {
  | nil ➔ O 
  | cons a l'' ➔ S (length l'') 
 }) l') (S n'))) {
  | nil ➔ eq_refl ·nat O 
  | cons a l' ➔ F n' l' 
 } 
 } l) n.



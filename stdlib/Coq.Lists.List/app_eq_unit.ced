module test.
data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

data eq (A : ★) (x : A) : A ➔ ★ =
  | eq_refl : eq x.

app : ∀ A : ★ . list ·A ➔ list ·A ➔ list ·A = Λ A : ★ . λ l : list ·A . λ m : list ·A . μ app. l @(λ l : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a l1 ➔ λ m . cons ·A a (app l1 m) 
 } m.

data or (A : ★) (B : ★) : ★ =
  | or_introl : A ➔ or
  | or_intror : B ➔ or.

data and (A : ★) (B : ★) : ★ =
  | conj : A ➔ B ➔ and.

False : ★ = ∀ X : ★ . X.

False_ind : ∀ P : ★ . False ➔ P = Λ P : ★ . λ f : False . f ·P.

eq_ind : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . Π f : P x . Π y : A . Π e : eq ·A x y . P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ f : P x . λ y : A . λ e : eq ·A x y . σ e @(λ y' : A . λ _ : eq ·A x y' . P y') {
  | eq_refl ➔ f 
 }.

data True : ★ =
  | I : True.

eq_sym : ∀ A : ★ . Π x : A . Π y : A . eq ·A x y ➔ eq ·A y x = Λ A : ★ . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·A y' x) {
  | eq_refl ➔ eq_refl ·A x 
 }.

eq_ind_r : ∀ A : ★ . Π x : A . ∀ P : A ➔ ★ . P x ➔ Π y : A . eq ·A y x ➔ P y = Λ A : ★ . λ x : A . Λ P : A ➔ ★ . λ H : P x . λ y : A . λ H0 : eq ·A y x . eq_ind ·A x ·(λ y' : A . P y') H y (eq_sym ·A y x H0).

list_ind : ∀ A : ★ . ∀ P : Π l : list ·A . ★ . Π f : P (nil ·A) . Π f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . Π l : list ·A . P l = Λ A : ★ . Λ P : Π l : list ·A . ★ . λ f : P (nil ·A) . λ f' : Π a : A . Π l : list ·A . P l ➔ P (cons ·A a l) . λ l : list ·A . μ F. l @(λ l : list ·A . P l) {
  | nil ➔ f 
  | cons y l' ➔ f' y (to/list -isType/F l') (F l') 
 }.

eq_trans : ∀ A : ★ . Π x : A . Π y : A . Π z : A . eq ·A x y ➔ eq ·A y z ➔ eq ·A x z = Λ A : ★ . λ x : A . λ y : A . λ z : A . λ H : eq ·A x y . λ H0 : eq ·A y z . σ H0 @(λ y' : A . λ _ : eq ·A y y' . eq ·A x y') {
  | eq_refl ➔ H 
 }.

f_equal : ∀ A : ★ . ∀ B : ★ . Π f : A ➔ B . Π x : A . Π y : A . eq ·A x y ➔ eq ·B (f x) (f y) = Λ A : ★ . Λ B : ★ . λ f : A ➔ B . λ x : A . λ y : A . λ H : eq ·A x y . σ H @(λ y' : A . λ _ : eq ·A x y' . eq ·B (f x) (f y')) {
  | eq_refl ➔ eq_refl ·B (f x) 
 }.

app_nil_r : ∀ A : ★ . Π l : list ·A . eq ·(list ·A) (app ·A l (nil ·A)) l = Λ A : ★ . λ l : list ·A . list_ind ·A ·(λ l' : list ·A . eq ·(list ·A) (app ·A l' (nil ·A)) l') ([ H : eq tSort ·A ·A = eq_refl tSort ·A ] - (λ H' : eq tSort ·A ·A . eq_refl ·(list ·A) (nil ·A)) H) (λ a : A . λ l' : list ·A . λ IHl : eq ·(list ·A) (app ·A l' (nil ·A)) l' . ([ H : eq ·(list ·A) (app ·A l' (nil ·A)) l' = IHl ] - ([ H' : eq ·A a a = eq_refl ·A a ] - ([ H' : eq tSort ·A ·A = eq_refl tSort ·A ] - (λ H' : eq tSort ·A ·A . λ H0 : eq ·A a a . λ H1 : eq ·(list ·A) (app ·A l' (nil ·A)) l' . eq_trans ·(list ·A) (cons ·A a (app ·A l' (nil ·A))) (cons ·A a (app ·A l' (nil ·A))) (cons ·A a l') (f_equal ·(Π l' : list ·A . list ·A) ·(list ·A) (λ f : Π l' : list ·A . list ·A . f (app ·A l' (nil ·A))) (cons ·A a) (cons ·A a) (eq_refl ·(Π l' : list ·A . list ·A) (cons ·A a))) (f_equal ·(list ·A) ·(list ·A) (cons ·A a) (app ·A l' (nil ·A)) l' H1)) H') H') H)) l.

not : Π A : ★ . ★ = λ A : ★ . A ➔ False.

app_cons_not_nil : ∀ A : ★ . Π x : list ·A . Π y : list ·A . Π a : A . not ·(eq ·(list ·A) (nil ·A) (app ·A x (cons ·A a y))) = Λ A : ★ . λ x : list ·A . σ x @(λ l : list ·A . Π y : list ·A . Π a : A . eq ·(list ·A) (nil ·A) (app ·A l (cons ·A a y)) ➔ False) {
  | nil ➔ λ y : list ·A . λ a : A . λ H : eq ·(list ·A) (nil ·A) (cons ·A a y) . δ - ( σ H @(λ x : list ·A . λ _ : eq ·(list ·A) (nil ·A) x . { nil ·A ≃ x }) {
  | eq_refl ➔ β 
 }) 
  | cons a l ➔ λ y : list ·A . λ a0 : A . λ H : eq ·(list ·A) (nil ·A) (cons ·A a (app ·A l (cons ·A a0 y))) . δ - ( σ H @(λ x : list ·A . λ _ : eq ·(list ·A) (nil ·A) x . { nil ·A ≃ x }) {
  | eq_refl ➔ β 
 }) 
 }.

app_eq_unit : ∀ A : ★ . Π x : list ·A . Π y : list ·A . Π a : A . eq ·(list ·A) (app ·A x y) (cons ·A a (nil ·A)) ➔ or ·(and ·(eq ·(list ·A) x (nil ·A)) ·(eq ·(list ·A) y (cons ·A a (nil ·A)))) ·(and ·(eq ·(list ·A) x (cons ·A a (nil ·A))) ·(eq ·(list ·A) y (nil ·A))) = Λ A : ★ . λ x : list ·A . σ x @(λ l : list ·A . Π y : list ·A . Π a : A . eq ·(list ·A) (app ·A l y) (cons ·A a (nil ·A)) ➔ or ·(and ·(eq ·(list ·A) l (nil ·A)) ·(eq ·(list ·A) y (cons ·A a (nil ·A)))) ·(and ·(eq ·(list ·A) l (cons ·A a (nil ·A))) ·(eq ·(list ·A) y (nil ·A)))) {
  | nil ➔ λ y : list ·A . σ y @(λ l : list ·A . Π a : A . eq ·(list ·A) (app ·A (nil ·A) l) (cons ·A a (nil ·A)) ➔ or ·(and ·(eq ·(list ·A) (nil ·A) (nil ·A)) ·(eq ·(list ·A) l (cons ·A a (nil ·A)))) ·(and ·(eq ·(list ·A) (nil ·A) (cons ·A a (nil ·A))) ·(eq ·(list ·A) l (nil ·A)))) {
  | nil ➔ λ a : A . λ H : eq ·(list ·A) (nil ·A) (cons ·A a (nil ·A)) . False_ind ·(or ·(and ·(eq ·(list ·A) (nil ·A) (nil ·A)) ·(eq ·(list ·A) (nil ·A) (cons ·A a (nil ·A)))) ·(and ·(eq ·(list ·A) (nil ·A) (cons ·A a (nil ·A))) ·(eq ·(list ·A) (nil ·A) (nil ·A)))) (eq_ind ·(list ·A) (nil ·A) (λ e : list ·A . σ e @(λ l : list ·A . xx) {
  | nil ➔ True 
  | cons XX XX ➔ False 
 }) I (cons ·A a (nil ·A)) H) 
  | cons a l ➔ λ a0 : A . λ H : eq ·(list ·A) (cons ·A a l) (cons ·A a0 (nil ·A)) . or_introl ·(and ·(eq ·(list ·A) (nil ·A) (nil ·A)) ·(eq ·(list ·A) (cons ·A a l) (cons ·A a0 (nil ·A)))) ·(and ·(eq ·(list ·A) (nil ·A) (cons ·A a0 (nil ·A))) ·(eq ·(list ·A) (cons ·A a l) (nil ·A))) (conj ·(eq ·(list ·A) (nil ·A) (nil ·A)) ·(eq ·(list ·A) (cons ·A a l) (cons ·A a0 (nil ·A))) (eq_refl ·(list ·A) (nil ·A)) H) 
 } 
  | cons a l ➔ λ y : list ·A . σ y @(λ l' : list ·A . Π a' : A . eq ·(list ·A) (app ·A (cons ·A a l) l') (cons ·A a' (nil ·A)) ➔ or ·(and ·(eq ·(list ·A) (cons ·A a l) (nil ·A)) ·(eq ·(list ·A) l' (cons ·A a' (nil ·A)))) ·(and ·(eq ·(list ·A) (cons ·A a l) (cons ·A a' (nil ·A))) ·(eq ·(list ·A) l' (nil ·A)))) {
  | nil ➔ λ a0 : A . λ H : eq ·(list ·A) (cons ·A a (app ·A l (nil ·A))) (cons ·A a0 (nil ·A)) . or_intror ·(and ·(eq ·(list ·A) (cons ·A a l) (nil ·A)) ·(eq ·(list ·A) (nil ·A) (cons ·A a0 (nil ·A)))) ·(and ·(eq ·(list ·A) (cons ·A a l) (cons ·A a0 (nil ·A))) ·(eq ·(list ·A) (nil ·A) (nil ·A))) (conj ·(eq ·(list ·A) (cons ·A a l) (cons ·A a0 (nil ·A))) ·(eq ·(list ·A) (nil ·A) (nil ·A)) (eq_ind_r ·(list ·A) l (λ l' : list ·A . tprodT?) (λ H0 : eq ·(list ·A) (cons ·A a l) (cons ·A a0 (nil ·A)) . H0) (app ·A l (nil ·A)) (app_nil_r ·A l) H) (eq_refl ·(list ·A) (nil ·A))) 
  | cons a0 l0 ➔ λ a1 : A . λ H : eq ·(list ·A) (cons ·A a (app ·A l (cons ·A a0 l0))) (cons ·A a1 (nil ·A)) . σ app_cons_not_nil ·A l l0 a0 (eq_sym ·(list ·A) (app ·A l (cons ·A a0 l0)) (nil ·A) (f_equal ·(list ·A) ·(list ·A) (λ e : list ·A . σ e @(λ l' : list ·A . list ·A) {
  | nil ➔ (λ l' : list ·A . λ m : list ·A . μ app. l' @(λ l' : list ·A . Π m : list ·A . list ·A) {
  | nil ➔ λ m . m 
  | cons a' l1 ➔ λ m . cons ·A a' (app l1 m) 
 } m) l (cons ·A a0 l0) 
  | cons a' l' ➔ l' 
 }) (cons ·A a (app ·A l (cons ·A a0 l0))) (cons ·A a1 (nil ·A)) H)) @(λ _ : False . or ·(and ·(eq ·(list ·A) (cons ·A a l) (nil ·A)) ·(eq ·(list ·A) (cons ·A a0 l0) (cons ·A a1 (nil ·A)))) ·(and ·(eq ·(list ·A) (cons ·A a l) (cons ·A a1 (nil ·A))) ·(eq ·(list ·A) (cons ·A a0 l0) (nil ·A)))) {

 } 
 } 
 }.



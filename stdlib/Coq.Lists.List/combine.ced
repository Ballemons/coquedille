module test.
data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

data prod (A : ★) (B : ★) : ★ =
  | pair : A ➔ B ➔ prod.

combine : ∀ A : ★ . ∀ B : ★ . Π l : list ·A . Π l' : list ·B . list ·(prod ·A ·B) = Λ A : ★ . Λ B : ★ . λ l : list ·A . λ l' : list ·B . μ combine. l @(λ l : list ·A . Π l' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ λ _ . nil ·(prod ·A ·B) 
  | cons x tl ➔ λ _ . σ l' @(λ l'' : list ·B . list ·(prod ·A ·B)) {
  | nil ➔ nil ·(prod ·A ·B) 
  | cons y tl' ➔ cons ·(prod ·A ·B) (pair ·A ·B x y) (combine tl tl') 
 } 
 } l'.



module test.
data nat : ★ =
  | O : nat
  | S : nat ➔ nat.

data list (A : ★) : ★ =
  | nil : list
  | cons : A ➔ list ➔ list.

skipn : ∀ A : ★ . Π n : nat . Π l : list ·A . list ·A = Λ A : ★ . λ n : nat . λ l : list ·A . μ skipn. n @(λ n : nat . Π l : list ·A . list ·A) {
  | O ➔ λ _ . l 
  | S n' ➔ λ _ . σ l @(λ l' : list ·A . list ·A) {
  | nil ➔ nil ·A 
  | cons a l' ➔ skipn n' l' 
 } 
 } l.


